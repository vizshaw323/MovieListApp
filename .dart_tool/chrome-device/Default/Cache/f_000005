define(['dart_sdk', 'packages/state_notifier/state_notifier.dart', 'packages/freezed_annotation/freezed_annotation.dart', 'packages/collection/src/equality.dart'], (function load__packages__riverpod__src__created_provider_dart(dart_sdk, packages__state_notifier__state_notifier$46dart, packages__freezed_annotation__freezed_annotation$46dart, packages__collection__src__equality$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const collection = dart_sdk.collection;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const state_notifier = packages__state_notifier__state_notifier$46dart.state_notifier;
  const freezed_annotation = packages__freezed_annotation__freezed_annotation$46dart.freezed_annotation;
  const equality = packages__collection__src__equality$46dart.src__equality;
  var created_provider = Object.create(dart.library);
  var state_provider = Object.create(dart.library);
  var stream_provider = Object.create(dart.library);
  var state_notifier_provider = Object.create(dart.library);
  var provider = Object.create(dart.library);
  var select = Object.create(dart.library);
  var framework = Object.create(dart.library);
  var internals = Object.create(dart.library);
  var builders = Object.create(dart.library);
  var future_provider = Object.create(dart.library);
  var common = Object.create(dart.library);
  var $modulo = dartx['%'];
  var $entries = dartx.entries;
  var $where = dartx.where;
  var $map = dartx.map;
  var $toString = dartx.toString;
  var $hashCode = dartx.hashCode;
  var $putIfAbsent = dartx.putIfAbsent;
  var $keys = dartx.keys;
  var $toList = dartx.toList;
  var $isNotEmpty = dartx.isNotEmpty;
  var $remove = dartx.remove;
  var $values = dartx.values;
  var $forEach = dartx.forEach;
  var $addEntries = dartx.addEntries;
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $containsKey = dartx.containsKey;
  var $isEmpty = dartx.isEmpty;
  var $reversed = dartx.reversed;
  var $every = dartx.every;
  var $runtimeType = dartx.runtimeType;
  var $toUnsigned = dartx.toUnsigned;
  var $toRadixString = dartx.toRadixString;
  var $padLeft = dartx.padLeft;
  var $_equals = dartx._equals;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    ObjectL: () => (T$.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    ProviderReferenceL: () => (T$.ProviderReferenceL = dart.constFn(dart.legacy(framework.ProviderReference)))(),
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    IdentityMapOfStringL$ObjectL: () => (T$.IdentityMapOfStringL$ObjectL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), T$.ObjectL())))(),
    boolL: () => (T$.boolL = dart.constFn(dart.legacy(core.bool)))(),
    MapEntryOfStringL$ObjectL: () => (T$.MapEntryOfStringL$ObjectL = dart.constFn(core.MapEntry$(T$.StringL(), T$.ObjectL())))(),
    MapEntryLOfStringL$ObjectL: () => (T$.MapEntryLOfStringL$ObjectL = dart.constFn(dart.legacy(T$.MapEntryOfStringL$ObjectL())))(),
    MapEntryLOfStringL$ObjectLToboolL: () => (T$.MapEntryLOfStringL$ObjectLToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.MapEntryLOfStringL$ObjectL()])))(),
    MapEntryLOfStringL$ObjectLToStringL: () => (T$.MapEntryLOfStringL$ObjectLToStringL = dart.constFn(dart.fnType(T$.StringL(), [T$.MapEntryLOfStringL$ObjectL()])))(),
    AutoDisposeProviderReferenceL: () => (T$.AutoDisposeProviderReferenceL = dart.constFn(dart.legacy(framework.AutoDisposeProviderReference)))(),
    StateControllerL: () => (T$.StateControllerL = dart.constFn(dart.legacy(state_provider.StateController)))(),
    VoidToboolL: () => (T$.VoidToboolL = dart.constFn(dart.fnType(T$.boolL(), [])))(),
    OverrideL: () => (T$.OverrideL = dart.constFn(dart.legacy(framework.Override)))(),
    AsyncLoadingL: () => (T$.AsyncLoadingL = dart.constFn(dart.legacy(common.AsyncLoading)))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    _$AsyncLoadingOfNull: () => (T$._$AsyncLoadingOfNull = dart.constFn(common._$AsyncLoading$(core.Null)))(),
    AsyncValueOfNull: () => (T$.AsyncValueOfNull = dart.constFn(common.AsyncValue$(core.Null)))(),
    AsyncValueLOfNull: () => (T$.AsyncValueLOfNull = dart.constFn(dart.legacy(T$.AsyncValueOfNull())))(),
    VoidToAsyncValueLOfNull: () => (T$.VoidToAsyncValueLOfNull = dart.constFn(dart.fnType(T$.AsyncValueLOfNull(), [])))(),
    StackTraceL: () => (T$.StackTraceL = dart.constFn(dart.legacy(core.StackTrace)))(),
    ObjectLAndStackTraceLToNull: () => (T$.ObjectLAndStackTraceLToNull = dart.constFn(dart.fnType(core.Null, [T$.ObjectL(), T$.StackTraceL()])))(),
    ProviderElementL: () => (T$.ProviderElementL = dart.constFn(dart.legacy(framework.ProviderElement)))(),
    ProviderSubscriptionL: () => (T$.ProviderSubscriptionL = dart.constFn(dart.legacy(framework.ProviderSubscription)))(),
    LinkedMapOfProviderElementL$ProviderSubscriptionL: () => (T$.LinkedMapOfProviderElementL$ProviderSubscriptionL = dart.constFn(_js_helper.LinkedMap$(T$.ProviderElementL(), T$.ProviderSubscriptionL())))(),
    LinkedHashSetOfProviderElementL: () => (T$.LinkedHashSetOfProviderElementL = dart.constFn(collection.LinkedHashSet$(T$.ProviderElementL())))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    VoidToLvoid: () => (T$.VoidToLvoid = dart.constFn(dart.legacy(T$.VoidTovoid())))(),
    DoubleLinkedQueueOfVoidToLvoid: () => (T$.DoubleLinkedQueueOfVoidToLvoid = dart.constFn(collection.DoubleLinkedQueue$(T$.VoidToLvoid())))(),
    ListQueueOfProviderElementL: () => (T$.ListQueueOfProviderElementL = dart.constFn(collection.ListQueue$(T$.ProviderElementL())))(),
    VoidToProviderSubscriptionL: () => (T$.VoidToProviderSubscriptionL = dart.constFn(dart.fnType(T$.ProviderSubscriptionL(), [])))(),
    DoubleLinkedQueueOfProviderElementL: () => (T$.DoubleLinkedQueueOfProviderElementL = dart.constFn(collection.DoubleLinkedQueue$(T$.ProviderElementL())))(),
    FnTovoid: () => (T$.FnTovoid = dart.constFn(dart.fnType(dart.void, [T$.VoidToLvoid()])))(),
    AutoDisposeProviderElementL: () => (T$.AutoDisposeProviderElementL = dart.constFn(dart.legacy(framework.AutoDisposeProviderElement)))(),
    _LinkedListEntryOfAutoDisposeProviderElementL: () => (T$._LinkedListEntryOfAutoDisposeProviderElementL = dart.constFn(framework._LinkedListEntry$(T$.AutoDisposeProviderElementL())))(),
    _LinkedListEntryLOfAutoDisposeProviderElementL: () => (T$._LinkedListEntryLOfAutoDisposeProviderElementL = dart.constFn(dart.legacy(T$._LinkedListEntryOfAutoDisposeProviderElementL())))(),
    LinkedListOf_LinkedListEntryLOfAutoDisposeProviderElementL: () => (T$.LinkedListOf_LinkedListEntryLOfAutoDisposeProviderElementL = dart.constFn(collection.LinkedList$(T$._LinkedListEntryLOfAutoDisposeProviderElementL())))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    ProviderContainerL: () => (T$.ProviderContainerL = dart.constFn(dart.legacy(framework.ProviderContainer)))(),
    _HashSetOfProviderContainerL: () => (T$._HashSetOfProviderContainerL = dart.constFn(collection._HashSet$(T$.ProviderContainerL())))(),
    ProviderBaseL: () => (T$.ProviderBaseL = dart.constFn(dart.legacy(framework.ProviderBase)))(),
    LinkedMapOfProviderBaseL$ProviderBaseL: () => (T$.LinkedMapOfProviderBaseL$ProviderBaseL = dart.constFn(_js_helper.LinkedMap$(T$.ProviderBaseL(), T$.ProviderBaseL())))(),
    RootProviderL: () => (T$.RootProviderL = dart.constFn(dart.legacy(framework.RootProvider)))(),
    FamilyOfdynamic$dynamic$dynamic$ProviderReferenceL$RootProviderL: () => (T$.FamilyOfdynamic$dynamic$dynamic$ProviderReferenceL$RootProviderL = dart.constFn(framework.Family$(dart.dynamic, dart.dynamic, dart.dynamic, T$.ProviderReferenceL(), T$.RootProviderL())))(),
    FamilyLOfdynamic$dynamic$dynamic$ProviderReferenceL$RootProviderL: () => (T$.FamilyLOfdynamic$dynamic$dynamic$ProviderReferenceL$RootProviderL = dart.constFn(dart.legacy(T$.FamilyOfdynamic$dynamic$dynamic$ProviderReferenceL$RootProviderL())))(),
    FamilyOverrideL: () => (T$.FamilyOverrideL = dart.constFn(dart.legacy(framework.FamilyOverride)))(),
    LinkedMapOfFamilyLOfdynamic$dynamic$dynamic$ProviderReferenceL$RootProviderL$FamilyOverrideL: () => (T$.LinkedMapOfFamilyLOfdynamic$dynamic$dynamic$ProviderReferenceL$RootProviderL$FamilyOverrideL = dart.constFn(_js_helper.LinkedMap$(T$.FamilyLOfdynamic$dynamic$dynamic$ProviderReferenceL$RootProviderL(), T$.FamilyOverrideL())))(),
    LinkedMapOfProviderBaseL$ProviderElementL: () => (T$.LinkedMapOfProviderBaseL$ProviderElementL = dart.constFn(_js_helper.LinkedMap$(T$.ProviderBaseL(), T$.ProviderElementL())))(),
    ProviderOverrideL: () => (T$.ProviderOverrideL = dart.constFn(dart.legacy(framework.ProviderOverride)))(),
    ScopedProviderL: () => (T$.ScopedProviderL = dart.constFn(dart.legacy(framework.ScopedProvider)))(),
    MapEntryOfProviderBaseL$ProviderBaseL: () => (T$.MapEntryOfProviderBaseL$ProviderBaseL = dart.constFn(core.MapEntry$(T$.ProviderBaseL(), T$.ProviderBaseL())))(),
    MapEntryLOfProviderBaseL$ProviderBaseL: () => (T$.MapEntryLOfProviderBaseL$ProviderBaseL = dart.constFn(dart.legacy(T$.MapEntryOfProviderBaseL$ProviderBaseL())))(),
    MapEntryLOfProviderBaseL$ProviderBaseLToboolL: () => (T$.MapEntryLOfProviderBaseL$ProviderBaseLToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.MapEntryLOfProviderBaseL$ProviderBaseL()])))(),
    LinkedHashSetOfProviderContainerL: () => (T$.LinkedHashSetOfProviderContainerL = dart.constFn(collection.LinkedHashSet$(T$.ProviderContainerL())))(),
    ProviderObserverL: () => (T$.ProviderObserverL = dart.constFn(dart.legacy(framework.ProviderObserver)))(),
    SyncIterableOfProviderObserverL: () => (T$.SyncIterableOfProviderObserverL = dart.constFn(_js_helper.SyncIterable$(T$.ProviderObserverL())))(),
    ListOfOverrideL: () => (T$.ListOfOverrideL = dart.constFn(core.List$(T$.OverrideL())))(),
    ValueProviderL: () => (T$.ValueProviderL = dart.constFn(dart.legacy(framework.ValueProvider)))(),
    JSArrayOfOverrideL: () => (T$.JSArrayOfOverrideL = dart.constFn(_interceptors.JSArray$(T$.OverrideL())))(),
    _HashSetOfProviderElementL: () => (T$._HashSetOfProviderElementL = dart.constFn(collection._HashSet$(T$.ProviderElementL())))(),
    SyncIterableOfProviderElementL: () => (T$.SyncIterableOfProviderElementL = dart.constFn(_js_helper.SyncIterable$(T$.ProviderElementL())))(),
    LinkedMapOfProviderBaseL$ObjectL: () => (T$.LinkedMapOfProviderBaseL$ObjectL = dart.constFn(_js_helper.LinkedMap$(T$.ProviderBaseL(), T$.ObjectL())))(),
    ProviderReferenceLToNull: () => (T$.ProviderReferenceLToNull = dart.constFn(dart.fnType(core.Null, [T$.ProviderReferenceL()])))(),
    _ScopedProviderElementL: () => (T$._ScopedProviderElementL = dart.constFn(dart.legacy(framework._ScopedProviderElement)))(),
    ProviderBaseLOfObjectL$TLToTL: () => (T$.ProviderBaseLOfObjectL$TLToTL = dart.constFn(dart.gFnType(T => {
      var TL = () => (TL = dart.constFn(dart.legacy(T)))();
      var ProviderBaseOfObjectL$TL = () => (ProviderBaseOfObjectL$TL = dart.constFn(framework.ProviderBase$(T$.ObjectL(), TL())))();
      var ProviderBaseLOfObjectL$TL = () => (ProviderBaseLOfObjectL$TL = dart.constFn(dart.legacy(ProviderBaseOfObjectL$TL())))();
      return [TL(), [ProviderBaseLOfObjectL$TL()]];
    })))(),
    ProviderBaseLOfObjectL$TLToLTL: () => (T$.ProviderBaseLOfObjectL$TLToLTL = dart.constFn(dart.legacy(T$.ProviderBaseLOfObjectL$TLToTL())))(),
    DefaultEqualityOfNeverL: () => (T$.DefaultEqualityOfNeverL = dart.constFn(equality.DefaultEquality$(dart.legacy(dart.Never))))(),
    TLToTL: () => (T$.TLToTL = dart.constFn(dart.gFnType(T => {
      var TL = () => (TL = dart.constFn(dart.legacy(T)))();
      return [TL(), [TL()]];
    })))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: builders.ProviderFamilyBuilder.prototype
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: builders.AutoDisposeProviderBuilder.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: builders.AutoDisposeProviderFamilyBuilder.prototype
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: builders.StateProviderFamilyBuilder.prototype
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: builders.AutoDisposeStateProviderBuilder.prototype
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: T$._$AsyncLoadingOfNull().prototype
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: builders.AutoDisposeStreamProviderFamilyBuilder.prototype
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: builders.StreamProviderFamilyBuilder.prototype
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: builders.AutoDisposeStreamProviderBuilder.prototype
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: builders.StateNotifierProviderFamilyBuilder.prototype
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: builders.AutoDisposeStateNotifierProviderBuilder.prototype
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: builders.AutoDisposeStateNotifierProviderFamilyBuilder.prototype
      });
    },
    get C12() {
      return C[12] = dart.const(new _js_helper.PrivateSymbol.new('_listener', _listener$));
    },
    get C13() {
      return C[13] = dart.fn(framework._runGuarded, T$.FnTovoid());
    },
    get C14() {
      return C[14] = dart.constList([], T$.OverrideL());
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: builders.AutoDisposeStateProviderFamilyBuilder.prototype
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: builders.AutoDisposeFutureProviderBuilder.prototype
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: builders.FutureProviderFamilyBuilder.prototype
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: builders.AutoDisposeFutureProviderFamilyBuilder.prototype
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: freezed_annotation.Freezed.prototype,
        [Freezed_unionKey]: null
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: T$.DefaultEqualityOfNeverL().prototype
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: equality.DeepCollectionEquality.prototype,
        [DeepCollectionEquality__unordered]: false,
        [DeepCollectionEquality__base]: C[21] || CT.C21
      });
    },
    get C22() {
      return C[22] = dart.fn(common._$identity, T$.TLToTL());
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: common._$AsyncValueTearOff.prototype
      });
    }
  }, false);
  var C = Array(24).fill(void 0);
  var I = [
    "package:riverpod/src/framework.dart",
    "package:riverpod/src/provider.dart",
    "package:riverpod/src/created_provider.dart",
    "package:riverpod/src/state_provider.dart",
    "file:///C:/Users/KIIT/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/riverpod-0.11.0/lib/src/framework/base_provider.dart",
    "file:///C:/Users/KIIT/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/riverpod-0.11.0/lib/src/framework/family.dart",
    "package:riverpod/src/common.dart",
    "package:riverpod/src/stream_provider.dart",
    "file:///C:/Users/KIIT/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/riverpod-0.11.0/lib/src/state_notifier_provider.dart",
    "package:riverpod/src/state_notifier_provider.dart",
    "package:riverpod/src/framework/select.dart",
    "file:///C:/Users/KIIT/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/riverpod-0.11.0/lib/src/framework/auto_dispose.dart",
    "file:///C:/Users/KIIT/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/riverpod-0.11.0/lib/src/framework/container.dart",
    "package:riverpod/src/builders.dart",
    "package:riverpod/src/future_provider.dart",
    "file:///C:/Users/KIIT/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/riverpod-0.11.0/lib/src/common.freezed.dart"
  ];
  var name$ = dart.privateName(framework, "ProviderBase.name");
  var _from = dart.privateName(framework, "_from");
  var _argument = dart.privateName(framework, "_argument");
  var _cachedHash = dart.privateName(framework, "_cachedHash");
  var _create$ = dart.privateName(framework, "_create");
  const _is_ProviderBase_default = Symbol('_is_ProviderBase_default');
  framework.ProviderBase$ = dart.generic((Created, Listened) => {
    class ProviderBase extends core.Object {
      get name() {
        return this[name$];
      }
      set name(value) {
        super.name = value;
      }
      get from() {
        return this[_from];
      }
      get argument() {
        return this[_argument];
      }
      toString() {
        let content = new (T$.IdentityMapOfStringL$ObjectL()).from(["name", this.name, "from", this.from, "argument", this.argument])[$entries][$where](dart.fn(e => e.value != null, T$.MapEntryLOfStringL$ObjectLToboolL()))[$map](T$.StringL(), dart.fn(e => dart.str(e.key) + ": " + dart.str(e.value), T$.MapEntryLOfStringL$ObjectLToStringL()));
        return dart.str(framework.describeIdentity(this)) + dart.str(content);
      }
      get hashCode() {
        return this[_cachedHash];
      }
    }
    (ProviderBase.new = function(_create, name) {
      this[_from] = null;
      this[_argument] = null;
      this[_cachedHash] = framework.ProviderBase._nextHashCode = (dart.notNull(framework.ProviderBase._nextHashCode) + 1)[$modulo](16777215);
      this[_create$] = _create;
      this[name$] = name;
      ;
    }).prototype = ProviderBase.prototype;
    dart.addTypeTests(ProviderBase);
    ProviderBase.prototype[_is_ProviderBase_default] = true;
    dart.addTypeCaches(ProviderBase);
    ProviderBase[dart.implements] = () => [framework.ProviderListenable$(dart.legacy(Listened))];
    dart.setMethodSignature(ProviderBase, () => ({
      __proto__: dart.getMethods(ProviderBase.__proto__),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), [])
    }));
    dart.setGetterSignature(ProviderBase, () => ({
      __proto__: dart.getGetters(ProviderBase.__proto__),
      from: dart.legacy(framework.Family$(dart.dynamic, dart.dynamic, dart.dynamic, dart.legacy(framework.ProviderReference), dart.legacy(framework.RootProvider))),
      argument: dart.legacy(core.Object),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(ProviderBase, I[0]);
    dart.setFieldSignature(ProviderBase, () => ({
      __proto__: dart.getFields(ProviderBase.__proto__),
      [_create$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(Created), [dart.legacy(framework.ProviderReference)]))),
      name: dart.finalFieldType(dart.legacy(core.String)),
      [_from]: dart.fieldType(dart.legacy(framework.Family$(dart.dynamic, dart.dynamic, dart.dynamic, dart.legacy(framework.ProviderReference), dart.legacy(framework.RootProvider)))),
      [_argument]: dart.fieldType(dart.legacy(core.Object)),
      [_cachedHash]: dart.finalFieldType(dart.legacy(core.int))
    }));
    dart.defineExtensionMethods(ProviderBase, ['toString']);
    dart.defineExtensionAccessors(ProviderBase, ['hashCode']);
    return ProviderBase;
  });
  framework.ProviderBase = framework.ProviderBase$();
  dart.defineLazy(framework.ProviderBase, {
    /*framework.ProviderBase._nextHashCode*/get _nextHashCode() {
      return 1;
    },
    set _nextHashCode(_) {}
  }, true);
  dart.addTypeTests(framework.ProviderBase, _is_ProviderBase_default);
  const _is_RootProvider_default = Symbol('_is_RootProvider_default');
  framework.RootProvider$ = dart.generic((Created, Listened) => {
    var ListenedL = () => (ListenedL = dart.constFn(dart.legacy(Listened)))();
    var ValueProviderOfObjectL$ListenedL = () => (ValueProviderOfObjectL$ListenedL = dart.constFn(framework.ValueProvider$(T$.ObjectL(), ListenedL())))();
    var ValueProviderElementOfObjectL$ListenedL = () => (ValueProviderElementOfObjectL$ListenedL = dart.constFn(framework.ValueProviderElement$(T$.ObjectL(), ListenedL())))();
    var ValueProviderElementLOfObjectL$ListenedL = () => (ValueProviderElementLOfObjectL$ListenedL = dart.constFn(dart.legacy(ValueProviderElementOfObjectL$ListenedL())))();
    var ValueProviderElementLOfObjectL$ListenedLToListenedL = () => (ValueProviderElementLOfObjectL$ListenedLToListenedL = dart.constFn(dart.fnType(ListenedL(), [ValueProviderElementLOfObjectL$ListenedL()])))();
    class RootProvider extends framework.ProviderBase$(dart.legacy(Created), dart.legacy(Listened)) {
      select(Selected, selector) {
        return new (framework.ProviderSelector$(ListenedL(), dart.legacy(Selected))).new({provider: this, selector: selector});
      }
      overrideWithValue(value) {
        ListenedL().as(value);
        return new framework.ProviderOverride.new(new (ValueProviderOfObjectL$ListenedL()).new(dart.fn(ref => value, ValueProviderElementLOfObjectL$ListenedLToListenedL()), value), this);
      }
    }
    (RootProvider.new = function(create, name) {
      RootProvider.__proto__.new.call(this, create, name);
      ;
    }).prototype = RootProvider.prototype;
    dart.addTypeTests(RootProvider);
    RootProvider.prototype[_is_RootProvider_default] = true;
    dart.addTypeCaches(RootProvider);
    dart.setMethodSignature(RootProvider, () => ({
      __proto__: dart.getMethods(RootProvider.__proto__),
      select: dart.gFnType(Selected => [dart.legacy(framework.ProviderListenable$(dart.legacy(Selected))), [dart.legacy(dart.fnType(dart.legacy(Selected), [dart.legacy(Listened)]))]]),
      overrideWithValue: dart.fnType(dart.legacy(framework.Override), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(RootProvider, I[0]);
    return RootProvider;
  });
  framework.RootProvider = framework.RootProvider$();
  dart.addTypeTests(framework.RootProvider, _is_RootProvider_default);
  const _is_AlwaysAliveProviderBase_default = Symbol('_is_AlwaysAliveProviderBase_default');
  framework.AlwaysAliveProviderBase$ = dart.generic((Created, Listened) => {
    var CreatedL = () => (CreatedL = dart.constFn(dart.legacy(Created)))();
    var ProviderElementOfCreatedL$ListenedL = () => (ProviderElementOfCreatedL$ListenedL = dart.constFn(framework.ProviderElement$(CreatedL(), ListenedL())))();
    var AlwaysAliveProviderBaseOfCreatedL$ListenedL = () => (AlwaysAliveProviderBaseOfCreatedL$ListenedL = dart.constFn(framework.AlwaysAliveProviderBase$(CreatedL(), ListenedL())))();
    var AlwaysAliveProviderBaseLOfCreatedL$ListenedL = () => (AlwaysAliveProviderBaseLOfCreatedL$ListenedL = dart.constFn(dart.legacy(AlwaysAliveProviderBaseOfCreatedL$ListenedL())))();
    var ListenedL = () => (ListenedL = dart.constFn(dart.legacy(Listened)))();
    class AlwaysAliveProviderBase extends framework.RootProvider$(dart.legacy(Created), dart.legacy(Listened)) {
      createElement() {
        return new (ProviderElementOfCreatedL$ListenedL()).new(this);
      }
      overrideWithProvider(provider) {
        AlwaysAliveProviderBaseLOfCreatedL$ListenedL().as(provider);
        return new framework.ProviderOverride.new(provider, this);
      }
    }
    (AlwaysAliveProviderBase.new = function(create, name) {
      AlwaysAliveProviderBase.__proto__.new.call(this, create, name);
      ;
    }).prototype = AlwaysAliveProviderBase.prototype;
    dart.addTypeTests(AlwaysAliveProviderBase);
    AlwaysAliveProviderBase.prototype[_is_AlwaysAliveProviderBase_default] = true;
    dart.addTypeCaches(AlwaysAliveProviderBase);
    dart.setMethodSignature(AlwaysAliveProviderBase, () => ({
      __proto__: dart.getMethods(AlwaysAliveProviderBase.__proto__),
      createElement: dart.fnType(dart.legacy(framework.ProviderElement$(dart.legacy(Created), dart.legacy(Listened))), []),
      overrideWithProvider: dart.fnType(dart.legacy(framework.ProviderOverride), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(AlwaysAliveProviderBase, I[0]);
    return AlwaysAliveProviderBase;
  });
  framework.AlwaysAliveProviderBase = framework.AlwaysAliveProviderBase$();
  dart.addTypeTests(framework.AlwaysAliveProviderBase, _is_AlwaysAliveProviderBase_default);
  const _is_Provider_default = Symbol('_is_Provider_default');
  provider.Provider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var RootProviderOfObjectL$TL = () => (RootProviderOfObjectL$TL = dart.constFn(framework.RootProvider$(T$.ObjectL(), TL())))();
    var RootProviderLOfObjectL$TL = () => (RootProviderLOfObjectL$TL = dart.constFn(dart.legacy(RootProviderOfObjectL$TL())))();
    var _ProviderStateOfTL = () => (_ProviderStateOfTL = dart.constFn(provider._ProviderState$(TL())))();
    class Provider extends framework.AlwaysAliveProviderBase$(dart.legacy(T), dart.legacy(T)) {
      overrideWithProvider(provider) {
        RootProviderLOfObjectL$TL().as(provider);
        return new framework.ProviderOverride.new(provider, this);
      }
      createState() {
        return new (_ProviderStateOfTL()).new();
      }
    }
    (Provider.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      Provider.__proto__.new.call(this, create, name);
      ;
    }).prototype = Provider.prototype;
    dart.addTypeTests(Provider);
    Provider.prototype[_is_Provider_default] = true;
    dart.addTypeCaches(Provider);
    dart.setMethodSignature(Provider, () => ({
      __proto__: dart.getMethods(Provider.__proto__),
      createState: dart.fnType(dart.legacy(provider._ProviderState$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(Provider, I[1]);
    return Provider;
  });
  provider.Provider = provider.Provider$();
  dart.defineLazy(provider.Provider, {
    /*provider.Provider.family*/get family() {
      return C[0] || CT.C0;
    },
    /*provider.Provider.autoDispose*/get autoDispose() {
      return C[1] || CT.C1;
    }
  }, true);
  dart.addTypeTests(provider.Provider, _is_Provider_default);
  const _is_CreatedProvider_default = Symbol('_is_CreatedProvider_default');
  created_provider.CreatedProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ProviderReferenceLToTL = () => (ProviderReferenceLToTL = dart.constFn(dart.fnType(TL(), [T$.ProviderReferenceL()])))();
    class CreatedProvider extends provider.Provider$(dart.legacy(T)) {}
    (CreatedProvider.new = function(provider, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      CreatedProvider.__proto__.new.call(this, dart.fn(ref => {
        ref.watch(T$.ObjectL(), provider);
        let targetElement = ref.container.readProviderElement(TL(), T$.ObjectL(), provider);
        return targetElement.state.createdValue;
      }, ProviderReferenceLToTL()), {name: name});
      ;
    }).prototype = CreatedProvider.prototype;
    dart.addTypeTests(CreatedProvider);
    CreatedProvider.prototype[_is_CreatedProvider_default] = true;
    dart.addTypeCaches(CreatedProvider);
    dart.setLibraryUri(CreatedProvider, I[2]);
    return CreatedProvider;
  });
  created_provider.CreatedProvider = created_provider.CreatedProvider$();
  dart.addTypeTests(created_provider.CreatedProvider, _is_CreatedProvider_default);
  const _is_AutoDisposeProviderBase_default = Symbol('_is_AutoDisposeProviderBase_default');
  framework.AutoDisposeProviderBase$ = dart.generic((Created, Listened) => {
    var CreatedL = () => (CreatedL = dart.constFn(dart.legacy(Created)))();
    var ProviderReferenceLToCreatedL = () => (ProviderReferenceLToCreatedL = dart.constFn(dart.fnType(CreatedL(), [T$.ProviderReferenceL()])))();
    var AutoDisposeProviderElementOfCreatedL$ListenedL = () => (AutoDisposeProviderElementOfCreatedL$ListenedL = dart.constFn(framework.AutoDisposeProviderElement$(CreatedL(), ListenedL())))();
    var RootProviderOfCreatedL$ListenedL = () => (RootProviderOfCreatedL$ListenedL = dart.constFn(framework.RootProvider$(CreatedL(), ListenedL())))();
    var RootProviderLOfCreatedL$ListenedL = () => (RootProviderLOfCreatedL$ListenedL = dart.constFn(dart.legacy(RootProviderOfCreatedL$ListenedL())))();
    var ListenedL = () => (ListenedL = dart.constFn(dart.legacy(Listened)))();
    class AutoDisposeProviderBase extends framework.RootProvider$(dart.legacy(Created), dart.legacy(Listened)) {
      createElement() {
        return new (AutoDisposeProviderElementOfCreatedL$ListenedL()).new(this);
      }
      overrideWithProvider(provider) {
        RootProviderLOfCreatedL$ListenedL().as(provider);
        return new framework.ProviderOverride.new(provider, this);
      }
    }
    (AutoDisposeProviderBase.new = function(create, name) {
      AutoDisposeProviderBase.__proto__.new.call(this, dart.fn(ref => create(T$.AutoDisposeProviderReferenceL().as(ref)), ProviderReferenceLToCreatedL()), name);
      ;
    }).prototype = AutoDisposeProviderBase.prototype;
    dart.addTypeTests(AutoDisposeProviderBase);
    AutoDisposeProviderBase.prototype[_is_AutoDisposeProviderBase_default] = true;
    dart.addTypeCaches(AutoDisposeProviderBase);
    dart.setMethodSignature(AutoDisposeProviderBase, () => ({
      __proto__: dart.getMethods(AutoDisposeProviderBase.__proto__),
      createElement: dart.fnType(dart.legacy(framework.AutoDisposeProviderElement$(dart.legacy(Created), dart.legacy(Listened))), []),
      overrideWithProvider: dart.fnType(dart.legacy(framework.ProviderOverride), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(AutoDisposeProviderBase, I[0]);
    return AutoDisposeProviderBase;
  });
  framework.AutoDisposeProviderBase = framework.AutoDisposeProviderBase$();
  dart.addTypeTests(framework.AutoDisposeProviderBase, _is_AutoDisposeProviderBase_default);
  const _is_AutoDisposeProvider_default = Symbol('_is_AutoDisposeProvider_default');
  provider.AutoDisposeProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var RootProviderOfObjectL$TL = () => (RootProviderOfObjectL$TL = dart.constFn(framework.RootProvider$(T$.ObjectL(), TL())))();
    var RootProviderLOfObjectL$TL = () => (RootProviderLOfObjectL$TL = dart.constFn(dart.legacy(RootProviderOfObjectL$TL())))();
    var _AutoDisposeProviderStateOfTL = () => (_AutoDisposeProviderStateOfTL = dart.constFn(provider._AutoDisposeProviderState$(TL())))();
    class AutoDisposeProvider extends framework.AutoDisposeProviderBase$(dart.legacy(T), dart.legacy(T)) {
      overrideWithProvider(provider) {
        RootProviderLOfObjectL$TL().as(provider);
        return new framework.ProviderOverride.new(provider, this);
      }
      createState() {
        return new (_AutoDisposeProviderStateOfTL()).new();
      }
    }
    (AutoDisposeProvider.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      AutoDisposeProvider.__proto__.new.call(this, create, name);
      ;
    }).prototype = AutoDisposeProvider.prototype;
    dart.addTypeTests(AutoDisposeProvider);
    AutoDisposeProvider.prototype[_is_AutoDisposeProvider_default] = true;
    dart.addTypeCaches(AutoDisposeProvider);
    dart.setMethodSignature(AutoDisposeProvider, () => ({
      __proto__: dart.getMethods(AutoDisposeProvider.__proto__),
      createState: dart.fnType(dart.legacy(provider._AutoDisposeProviderState$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(AutoDisposeProvider, I[1]);
    return AutoDisposeProvider;
  });
  provider.AutoDisposeProvider = provider.AutoDisposeProvider$();
  dart.defineLazy(provider.AutoDisposeProvider, {
    /*provider.AutoDisposeProvider.family*/get family() {
      return C[2] || CT.C2;
    }
  }, true);
  dart.addTypeTests(provider.AutoDisposeProvider, _is_AutoDisposeProvider_default);
  const _is_AutoDisposeCreatedProvider_default = Symbol('_is_AutoDisposeCreatedProvider_default');
  created_provider.AutoDisposeCreatedProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var AutoDisposeProviderReferenceLToTL = () => (AutoDisposeProviderReferenceLToTL = dart.constFn(dart.fnType(TL(), [T$.AutoDisposeProviderReferenceL()])))();
    class AutoDisposeCreatedProvider extends provider.AutoDisposeProvider$(dart.legacy(T)) {}
    (AutoDisposeCreatedProvider.new = function(provider, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      AutoDisposeCreatedProvider.__proto__.new.call(this, dart.fn(ref => {
        ref.watch(T$.ObjectL(), provider);
        let targetElement = ref.container.readProviderElement(TL(), T$.ObjectL(), provider);
        return targetElement.state.createdValue;
      }, AutoDisposeProviderReferenceLToTL()), {name: name});
      ;
    }).prototype = AutoDisposeCreatedProvider.prototype;
    dart.addTypeTests(AutoDisposeCreatedProvider);
    AutoDisposeCreatedProvider.prototype[_is_AutoDisposeCreatedProvider_default] = true;
    dart.addTypeCaches(AutoDisposeCreatedProvider);
    dart.setLibraryUri(AutoDisposeCreatedProvider, I[2]);
    return AutoDisposeCreatedProvider;
  });
  created_provider.AutoDisposeCreatedProvider = created_provider.AutoDisposeCreatedProvider$();
  dart.addTypeTests(created_provider.AutoDisposeCreatedProvider, _is_AutoDisposeCreatedProvider_default);
  const _is_StateController_default = Symbol('_is_StateController_default');
  state_provider.StateController$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class StateController extends state_notifier.StateNotifier$(dart.legacy(T)) {
      get state() {
        return super.state;
      }
      set state(value) {
        TL().as(value);
        return super.state = value;
      }
    }
    (StateController.new = function(state) {
      StateController.__proto__.new.call(this, state);
      ;
    }).prototype = StateController.prototype;
    dart.addTypeTests(StateController);
    StateController.prototype[_is_StateController_default] = true;
    dart.addTypeCaches(StateController);
    dart.setLibraryUri(StateController, I[3]);
    return StateController;
  });
  state_provider.StateController = state_provider.StateController$();
  dart.addTypeTests(state_provider.StateController, _is_StateController_default);
  var removeListener = dart.privateName(state_provider, "_StateProviderStateMixin.removeListener");
  var _element = dart.privateName(framework, "ProviderStateBase._element");
  var _createdValue = dart.privateName(framework, "ProviderStateBase._createdValue");
  var _exposedValue = dart.privateName(framework, "_exposedValue");
  var _element$ = dart.privateName(framework, "_element");
  var _createdValue$ = dart.privateName(framework, "_createdValue");
  var _debugMarkWillChange = dart.privateName(framework, "_debugMarkWillChange");
  const _is_ProviderStateBase_default = Symbol('_is_ProviderStateBase_default');
  framework.ProviderStateBase$ = dart.generic((Created, Listened) => {
    var CreatedL = () => (CreatedL = dart.constFn(dart.legacy(Created)))();
    var ProviderElementOfCreatedL$ListenedL = () => (ProviderElementOfCreatedL$ListenedL = dart.constFn(framework.ProviderElement$(CreatedL(), ListenedL())))();
    var ProviderElementLOfCreatedL$ListenedL = () => (ProviderElementLOfCreatedL$ListenedL = dart.constFn(dart.legacy(ProviderElementOfCreatedL$ListenedL())))();
    var ListenedL = () => (ListenedL = dart.constFn(dart.legacy(Listened)))();
    class ProviderStateBase extends core.Object {
      get [_element$]() {
        return this[_element];
      }
      set [_element$](value) {
        this[_element] = ProviderElementLOfCreatedL$ListenedL().as(value);
      }
      get [_createdValue$]() {
        return this[_createdValue];
      }
      set [_createdValue$](value) {
        this[_createdValue] = CreatedL().as(value);
      }
      get ref() {
        return this[_element$];
      }
      get createdValue() {
        return this[_createdValue$];
      }
      get exposedValue() {
        return this[_exposedValue];
      }
      set exposedValue(exposedValue) {
        ListenedL().as(exposedValue);
        if (!dart.test(dart.fn(() => {
          this[_element$][_debugMarkWillChange]();
          return true;
        }, T$.VoidToboolL())())) dart.assertFailed("", I[4], 920, 12, "() {\n      _element._debugMarkWillChange();\n      return true;\n    }()");
        this[_exposedValue] = exposedValue;
        this[_element$].markDidChange();
      }
      handleError(error, stackTrace) {
        return false;
      }
      dispose() {
      }
    }
    (ProviderStateBase.new = function() {
      this[_element] = null;
      this[_createdValue] = null;
      this[_exposedValue] = null;
      ;
    }).prototype = ProviderStateBase.prototype;
    dart.addTypeTests(ProviderStateBase);
    ProviderStateBase.prototype[_is_ProviderStateBase_default] = true;
    dart.addTypeCaches(ProviderStateBase);
    dart.setMethodSignature(ProviderStateBase, () => ({
      __proto__: dart.getMethods(ProviderStateBase.__proto__),
      handleError: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object), dart.legacy(core.StackTrace)]),
      dispose: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(ProviderStateBase, () => ({
      __proto__: dart.getGetters(ProviderStateBase.__proto__),
      ref: dart.legacy(framework.ProviderReference),
      createdValue: dart.legacy(Created),
      exposedValue: dart.legacy(Listened)
    }));
    dart.setSetterSignature(ProviderStateBase, () => ({
      __proto__: dart.getSetters(ProviderStateBase.__proto__),
      exposedValue: dart.legacy(core.Object)
    }));
    dart.setLibraryUri(ProviderStateBase, I[0]);
    dart.setFieldSignature(ProviderStateBase, () => ({
      __proto__: dart.getFields(ProviderStateBase.__proto__),
      [_element$]: dart.fieldType(dart.legacy(framework.ProviderElement$(dart.legacy(Created), dart.legacy(Listened)))),
      [_createdValue$]: dart.fieldType(dart.legacy(Created)),
      [_exposedValue]: dart.fieldType(dart.legacy(Listened))
    }));
    return ProviderStateBase;
  });
  framework.ProviderStateBase = framework.ProviderStateBase$();
  dart.addTypeTests(framework.ProviderStateBase, _is_ProviderStateBase_default);
  const _is__StateProviderStateMixin_default = Symbol('_is__StateProviderStateMixin_default');
  state_provider._StateProviderStateMixin$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var TLToNull = () => (TLToNull = dart.constFn(dart.fnType(core.Null, [TL()])))();
    class _StateProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(state_provider.StateController$(dart.legacy(T))), dart.legacy(state_provider.StateController$(dart.legacy(T)))) {}
    _StateProviderStateMixin[dart.mixinOn] = ProviderStateBase => class _StateProviderStateMixin extends ProviderStateBase {
      get removeListener() {
        return this[removeListener];
      }
      set removeListener(value) {
        this[removeListener] = value;
      }
      valueChanged(opts) {
        let t0, t0$;
        let previous = opts && 'previous' in opts ? opts.previous : null;
        T$.StateControllerL().as(previous);
        if (dart.equals(this.createdValue, previous)) {
          return;
        }
        t0 = this.removeListener;
        t0 == null ? null : t0();
        t0$ = this.exposedValue;
        t0$ == null ? null : t0$.dispose();
        this.removeListener = this.createdValue.addListener(dart.fn(state => {
          this.exposedValue = this.createdValue;
        }, TLToNull()));
      }
      dispose() {
        let t0;
        t0 = this.removeListener;
        t0 == null ? null : t0();
        this.exposedValue.dispose();
        super.dispose();
      }
    };
    (_StateProviderStateMixin[dart.mixinNew] = function() {
      this[removeListener] = null;
    }).prototype = _StateProviderStateMixin.prototype;
    dart.addTypeTests(_StateProviderStateMixin);
    _StateProviderStateMixin.prototype[_is__StateProviderStateMixin_default] = true;
    dart.addTypeCaches(_StateProviderStateMixin);
    _StateProviderStateMixin[dart.implements] = () => [framework.ProviderStateBase$(dart.legacy(state_provider.StateController$(dart.legacy(T))), dart.legacy(state_provider.StateController$(dart.legacy(T))))];
    dart.setMethodSignature(_StateProviderStateMixin, () => ({
      __proto__: dart.getMethods(_StateProviderStateMixin.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {})
    }));
    dart.setLibraryUri(_StateProviderStateMixin, I[3]);
    dart.setFieldSignature(_StateProviderStateMixin, () => ({
      __proto__: dart.getFields(_StateProviderStateMixin.__proto__),
      removeListener: dart.fieldType(dart.legacy(dart.fnType(dart.void, [])))
    }));
    return _StateProviderStateMixin;
  });
  state_provider._StateProviderStateMixin = state_provider._StateProviderStateMixin$();
  dart.addTypeTests(state_provider._StateProviderStateMixin, _is__StateProviderStateMixin_default);
  const _is_StateProvider_default = Symbol('_is_StateProvider_default');
  state_provider.StateProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StateControllerOfTL = () => (StateControllerOfTL = dart.constFn(state_provider.StateController$(TL())))();
    var StateControllerLOfTL = () => (StateControllerLOfTL = dart.constFn(dart.legacy(StateControllerOfTL())))();
    var ProviderReferenceLToStateControllerLOfTL = () => (ProviderReferenceLToStateControllerLOfTL = dart.constFn(dart.fnType(StateControllerLOfTL(), [T$.ProviderReferenceL()])))();
    var _StateProviderStateOfTL = () => (_StateProviderStateOfTL = dart.constFn(state_provider._StateProviderState$(TL())))();
    class StateProvider extends framework.AlwaysAliveProviderBase$(dart.legacy(state_provider.StateController$(dart.legacy(T))), dart.legacy(state_provider.StateController$(dart.legacy(T)))) {
      createState() {
        return new (_StateProviderStateOfTL()).new();
      }
    }
    (StateProvider.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      StateProvider.__proto__.new.call(this, dart.fn(ref => new (StateControllerOfTL()).new(create(ref)), ProviderReferenceLToStateControllerLOfTL()), name);
      ;
    }).prototype = StateProvider.prototype;
    dart.addTypeTests(StateProvider);
    StateProvider.prototype[_is_StateProvider_default] = true;
    dart.addTypeCaches(StateProvider);
    dart.setMethodSignature(StateProvider, () => ({
      __proto__: dart.getMethods(StateProvider.__proto__),
      createState: dart.fnType(dart.legacy(state_provider._StateProviderState$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(StateProvider, I[3]);
    return StateProvider;
  });
  state_provider.StateProvider = state_provider.StateProvider$();
  dart.defineLazy(state_provider.StateProvider, {
    /*state_provider.StateProvider.family*/get family() {
      return C[3] || CT.C3;
    },
    /*state_provider.StateProvider.autoDispose*/get autoDispose() {
      return C[4] || CT.C4;
    }
  }, true);
  dart.addTypeTests(state_provider.StateProvider, _is_StateProvider_default);
  const _is__StateProviderState_default = Symbol('_is__StateProviderState_default');
  state_provider._StateProviderState$ = dart.generic(T => {
    const ProviderStateBase__StateProviderStateMixin$36 = class ProviderStateBase__StateProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(state_provider.StateController$(dart.legacy(T))), dart.legacy(state_provider.StateController$(dart.legacy(T)))) {};
    (ProviderStateBase__StateProviderStateMixin$36.new = function() {
      state_provider._StateProviderStateMixin$(dart.legacy(T))[dart.mixinNew].call(this);
      ProviderStateBase__StateProviderStateMixin$36.__proto__.new.call(this);
    }).prototype = ProviderStateBase__StateProviderStateMixin$36.prototype;
    dart.applyMixin(ProviderStateBase__StateProviderStateMixin$36, state_provider._StateProviderStateMixin$(dart.legacy(T)));
    class _StateProviderState extends ProviderStateBase__StateProviderStateMixin$36 {
      get removeListener() {
        return super.removeListener;
      }
      set removeListener(value) {
        return super.removeListener = value;
      }
      valueChanged(opts) {
        let previous = opts && 'previous' in opts ? opts.previous : null;
        T$.StateControllerL().as(previous);
        return super.valueChanged({previous: previous});
      }
      dispose() {
        return super.dispose();
      }
    }
    (_StateProviderState.new = function() {
      _StateProviderState.__proto__.new.call(this);
      ;
    }).prototype = _StateProviderState.prototype;
    dart.addTypeTests(_StateProviderState);
    _StateProviderState.prototype[_is__StateProviderState_default] = true;
    dart.addTypeCaches(_StateProviderState);
    dart.setMethodSignature(_StateProviderState, () => ({
      __proto__: dart.getMethods(_StateProviderState.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {})
    }));
    dart.setGetterSignature(_StateProviderState, () => ({
      __proto__: dart.getGetters(_StateProviderState.__proto__),
      removeListener: dart.legacy(dart.fnType(dart.void, []))
    }));
    dart.setSetterSignature(_StateProviderState, () => ({
      __proto__: dart.getSetters(_StateProviderState.__proto__),
      removeListener: dart.legacy(dart.fnType(dart.void, []))
    }));
    dart.setLibraryUri(_StateProviderState, I[3]);
    return _StateProviderState;
  });
  state_provider._StateProviderState = state_provider._StateProviderState$();
  dart.addTypeTests(state_provider._StateProviderState, _is__StateProviderState_default);
  var _cache = dart.privateName(framework, "_cache");
  var _builder$ = dart.privateName(framework, "_builder");
  var _name$ = dart.privateName(framework, "_name");
  const _is_Family_default = Symbol('_is_Family_default');
  framework.Family$ = dart.generic((Created, Listened, Param, Ref, P) => {
    var ParamL = () => (ParamL = dart.constFn(dart.legacy(Param)))();
    var LinkedMapOfParamL$PL = () => (LinkedMapOfParamL$PL = dart.constFn(_js_helper.LinkedMap$(ParamL(), PL())))();
    var PL = () => (PL = dart.constFn(dart.legacy(P)))();
    var VoidToPL = () => (VoidToPL = dart.constFn(dart.fnType(PL(), [])))();
    class Family extends core.Object {
      call(value) {
        ParamL().as(value);
        return this[_cache][$putIfAbsent](value, dart.fn(() => {
          let t0;
          let provider = this.create(value, this[_builder$], this[_name$] == null ? null : dart.str(this[_name$]) + " (" + dart.str(value) + ")");
          if (!(provider[_from] == null)) dart.assertFailed("The provider created already belongs to a Family", I[5], 23, 9, "provider._from == null");
          t0 = provider;
          return (() => {
            t0[_from] = this;
            t0[_argument] = value;
            return t0;
          })();
        }, VoidToPL()));
      }
      get debugKeys() {
        let result = null;
        if (!dart.test(dart.fn(() => {
          result = this[_cache][$keys][$toList]({growable: false});
          return true;
        }, T$.VoidToboolL())())) dart.assertFailed("", I[5], 42, 12, "() {\n      result = _cache.keys.toList(growable: false);\n      return true;\n    }()");
        return result;
      }
    }
    (Family.new = function(_builder, _name) {
      this[_cache] = new (LinkedMapOfParamL$PL()).new();
      this[_builder$] = _builder;
      this[_name$] = _name;
      ;
    }).prototype = Family.prototype;
    dart.addTypeTests(Family);
    Family.prototype[_is_Family_default] = true;
    dart.addTypeCaches(Family);
    dart.setMethodSignature(Family, () => ({
      __proto__: dart.getMethods(Family.__proto__),
      call: dart.fnType(dart.legacy(P), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(Family, () => ({
      __proto__: dart.getGetters(Family.__proto__),
      debugKeys: dart.legacy(core.List$(dart.legacy(Param)))
    }));
    dart.setLibraryUri(Family, I[0]);
    dart.setFieldSignature(Family, () => ({
      __proto__: dart.getFields(Family.__proto__),
      [_builder$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(Created), [dart.legacy(Ref), dart.legacy(Param)]))),
      [_name$]: dart.finalFieldType(dart.legacy(core.String)),
      [_cache]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(Param), dart.legacy(P))))
    }));
    return Family;
  });
  framework.Family = framework.Family$();
  dart.addTypeTests(framework.Family, _is_Family_default);
  framework.ProviderReference = class ProviderReference extends core.Object {};
  (framework.ProviderReference.new = function() {
    ;
  }).prototype = framework.ProviderReference.prototype;
  dart.addTypeTests(framework.ProviderReference);
  dart.addTypeCaches(framework.ProviderReference);
  dart.setLibraryUri(framework.ProviderReference, I[0]);
  const _is_StateProviderFamily_default = Symbol('_is_StateProviderFamily_default');
  state_provider.StateProviderFamily$ = dart.generic((T, A) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StateControllerOfTL = () => (StateControllerOfTL = dart.constFn(state_provider.StateController$(TL())))();
    var StateControllerLOfTL = () => (StateControllerLOfTL = dart.constFn(dart.legacy(StateControllerOfTL())))();
    var ProviderReferenceLAndALToStateControllerLOfTL = () => (ProviderReferenceLAndALToStateControllerLOfTL = dart.constFn(dart.fnType(StateControllerLOfTL(), [T$.ProviderReferenceL(), AL()])))();
    var ProviderReferenceLAndALToLStateControllerLOfTL = () => (ProviderReferenceLAndALToLStateControllerLOfTL = dart.constFn(dart.legacy(ProviderReferenceLAndALToStateControllerLOfTL())))();
    var StateProviderOfTL = () => (StateProviderOfTL = dart.constFn(state_provider.StateProvider$(TL())))();
    var ProviderReferenceLToTL = () => (ProviderReferenceLToTL = dart.constFn(dart.fnType(TL(), [T$.ProviderReferenceL()])))();
    var AL = () => (AL = dart.constFn(dart.legacy(A)))();
    class StateProviderFamily extends framework.Family$(dart.legacy(state_provider.StateController$(dart.legacy(T))), dart.legacy(state_provider.StateController$(dart.legacy(T))), dart.legacy(A), dart.legacy(framework.ProviderReference), dart.legacy(state_provider.StateProvider$(dart.legacy(T)))) {
      create(value, builder, name) {
        AL().as(value);
        ProviderReferenceLAndALToLStateControllerLOfTL().as(builder);
        return new (StateProviderOfTL()).new(dart.fn(ref => builder(ref, value).state, ProviderReferenceLToTL()), {name: name});
      }
    }
    (StateProviderFamily.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      StateProviderFamily.__proto__.new.call(this, dart.fn((ref, a) => new (StateControllerOfTL()).new(create(ref, a)), ProviderReferenceLAndALToStateControllerLOfTL()), name);
      ;
    }).prototype = StateProviderFamily.prototype;
    dart.addTypeTests(StateProviderFamily);
    StateProviderFamily.prototype[_is_StateProviderFamily_default] = true;
    dart.addTypeCaches(StateProviderFamily);
    dart.setMethodSignature(StateProviderFamily, () => ({
      __proto__: dart.getMethods(StateProviderFamily.__proto__),
      create: dart.fnType(dart.legacy(state_provider.StateProvider$(dart.legacy(T))), [dart.legacy(core.Object), dart.legacy(core.Object), dart.legacy(core.String)])
    }));
    dart.setLibraryUri(StateProviderFamily, I[3]);
    return StateProviderFamily;
  });
  state_provider.StateProviderFamily = state_provider.StateProviderFamily$();
  dart.addTypeTests(state_provider.StateProviderFamily, _is_StateProviderFamily_default);
  const _is_AutoDisposeStateProvider_default = Symbol('_is_AutoDisposeStateProvider_default');
  state_provider.AutoDisposeStateProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StateControllerOfTL = () => (StateControllerOfTL = dart.constFn(state_provider.StateController$(TL())))();
    var StateControllerLOfTL = () => (StateControllerLOfTL = dart.constFn(dart.legacy(StateControllerOfTL())))();
    var AutoDisposeProviderReferenceLToStateControllerLOfTL = () => (AutoDisposeProviderReferenceLToStateControllerLOfTL = dart.constFn(dart.fnType(StateControllerLOfTL(), [T$.AutoDisposeProviderReferenceL()])))();
    var _AutoDisposeStateProviderStateOfTL = () => (_AutoDisposeStateProviderStateOfTL = dart.constFn(state_provider._AutoDisposeStateProviderState$(TL())))();
    class AutoDisposeStateProvider extends framework.AutoDisposeProviderBase$(dart.legacy(state_provider.StateController$(dart.legacy(T))), dart.legacy(state_provider.StateController$(dart.legacy(T)))) {
      createState() {
        return new (_AutoDisposeStateProviderStateOfTL()).new();
      }
    }
    (AutoDisposeStateProvider.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      AutoDisposeStateProvider.__proto__.new.call(this, dart.fn(ref => new (StateControllerOfTL()).new(create(ref)), AutoDisposeProviderReferenceLToStateControllerLOfTL()), name);
      ;
    }).prototype = AutoDisposeStateProvider.prototype;
    dart.addTypeTests(AutoDisposeStateProvider);
    AutoDisposeStateProvider.prototype[_is_AutoDisposeStateProvider_default] = true;
    dart.addTypeCaches(AutoDisposeStateProvider);
    dart.setMethodSignature(AutoDisposeStateProvider, () => ({
      __proto__: dart.getMethods(AutoDisposeStateProvider.__proto__),
      createState: dart.fnType(dart.legacy(state_provider._AutoDisposeStateProviderState$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(AutoDisposeStateProvider, I[3]);
    return AutoDisposeStateProvider;
  });
  state_provider.AutoDisposeStateProvider = state_provider.AutoDisposeStateProvider$();
  dart.addTypeTests(state_provider.AutoDisposeStateProvider, _is_AutoDisposeStateProvider_default);
  const _is__AutoDisposeStateProviderState_default = Symbol('_is__AutoDisposeStateProviderState_default');
  state_provider._AutoDisposeStateProviderState$ = dart.generic(T => {
    const ProviderStateBase__StateProviderStateMixin$36 = class ProviderStateBase__StateProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(state_provider.StateController$(dart.legacy(T))), dart.legacy(state_provider.StateController$(dart.legacy(T)))) {};
    (ProviderStateBase__StateProviderStateMixin$36.new = function() {
      state_provider._StateProviderStateMixin$(dart.legacy(T))[dart.mixinNew].call(this);
      ProviderStateBase__StateProviderStateMixin$36.__proto__.new.call(this);
    }).prototype = ProviderStateBase__StateProviderStateMixin$36.prototype;
    dart.applyMixin(ProviderStateBase__StateProviderStateMixin$36, state_provider._StateProviderStateMixin$(dart.legacy(T)));
    class _AutoDisposeStateProviderState extends ProviderStateBase__StateProviderStateMixin$36 {
      get removeListener() {
        return super.removeListener;
      }
      set removeListener(value) {
        return super.removeListener = value;
      }
      valueChanged(opts) {
        let previous = opts && 'previous' in opts ? opts.previous : null;
        T$.StateControllerL().as(previous);
        return super.valueChanged({previous: previous});
      }
      dispose() {
        return super.dispose();
      }
    }
    (_AutoDisposeStateProviderState.new = function() {
      _AutoDisposeStateProviderState.__proto__.new.call(this);
      ;
    }).prototype = _AutoDisposeStateProviderState.prototype;
    dart.addTypeTests(_AutoDisposeStateProviderState);
    _AutoDisposeStateProviderState.prototype[_is__AutoDisposeStateProviderState_default] = true;
    dart.addTypeCaches(_AutoDisposeStateProviderState);
    dart.setMethodSignature(_AutoDisposeStateProviderState, () => ({
      __proto__: dart.getMethods(_AutoDisposeStateProviderState.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {})
    }));
    dart.setGetterSignature(_AutoDisposeStateProviderState, () => ({
      __proto__: dart.getGetters(_AutoDisposeStateProviderState.__proto__),
      removeListener: dart.legacy(dart.fnType(dart.void, []))
    }));
    dart.setSetterSignature(_AutoDisposeStateProviderState, () => ({
      __proto__: dart.getSetters(_AutoDisposeStateProviderState.__proto__),
      removeListener: dart.legacy(dart.fnType(dart.void, []))
    }));
    dart.setLibraryUri(_AutoDisposeStateProviderState, I[3]);
    return _AutoDisposeStateProviderState;
  });
  state_provider._AutoDisposeStateProviderState = state_provider._AutoDisposeStateProviderState$();
  dart.addTypeTests(state_provider._AutoDisposeStateProviderState, _is__AutoDisposeStateProviderState_default);
  framework.AutoDisposeProviderReference = class AutoDisposeProviderReference extends framework.ProviderReference {};
  (framework.AutoDisposeProviderReference.new = function() {
    ;
  }).prototype = framework.AutoDisposeProviderReference.prototype;
  dart.addTypeTests(framework.AutoDisposeProviderReference);
  dart.addTypeCaches(framework.AutoDisposeProviderReference);
  dart.setLibraryUri(framework.AutoDisposeProviderReference, I[0]);
  const _is_AutoDisposeStateProviderFamily_default = Symbol('_is_AutoDisposeStateProviderFamily_default');
  state_provider.AutoDisposeStateProviderFamily$ = dart.generic((T, A) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StateControllerOfTL = () => (StateControllerOfTL = dart.constFn(state_provider.StateController$(TL())))();
    var StateControllerLOfTL = () => (StateControllerLOfTL = dart.constFn(dart.legacy(StateControllerOfTL())))();
    var AutoDisposeProviderReferenceLAndALToStateControllerLOfTL = () => (AutoDisposeProviderReferenceLAndALToStateControllerLOfTL = dart.constFn(dart.fnType(StateControllerLOfTL(), [T$.AutoDisposeProviderReferenceL(), AL()])))();
    var AutoDisposeProviderReferenceLAndALToLStateControllerLOfTL = () => (AutoDisposeProviderReferenceLAndALToLStateControllerLOfTL = dart.constFn(dart.legacy(AutoDisposeProviderReferenceLAndALToStateControllerLOfTL())))();
    var AutoDisposeStateProviderOfTL = () => (AutoDisposeStateProviderOfTL = dart.constFn(state_provider.AutoDisposeStateProvider$(TL())))();
    var AutoDisposeProviderReferenceLToTL = () => (AutoDisposeProviderReferenceLToTL = dart.constFn(dart.fnType(TL(), [T$.AutoDisposeProviderReferenceL()])))();
    var AL = () => (AL = dart.constFn(dart.legacy(A)))();
    class AutoDisposeStateProviderFamily extends framework.Family$(dart.legacy(state_provider.StateController$(dart.legacy(T))), dart.legacy(state_provider.StateController$(dart.legacy(T))), dart.legacy(A), dart.legacy(framework.AutoDisposeProviderReference), dart.legacy(state_provider.AutoDisposeStateProvider$(dart.legacy(T)))) {
      create(value, builder, name) {
        AL().as(value);
        AutoDisposeProviderReferenceLAndALToLStateControllerLOfTL().as(builder);
        return new (AutoDisposeStateProviderOfTL()).new(dart.fn(ref => builder(ref, value).state, AutoDisposeProviderReferenceLToTL()), {name: name});
      }
    }
    (AutoDisposeStateProviderFamily.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      AutoDisposeStateProviderFamily.__proto__.new.call(this, dart.fn((ref, a) => new (StateControllerOfTL()).new(create(ref, a)), AutoDisposeProviderReferenceLAndALToStateControllerLOfTL()), name);
      ;
    }).prototype = AutoDisposeStateProviderFamily.prototype;
    dart.addTypeTests(AutoDisposeStateProviderFamily);
    AutoDisposeStateProviderFamily.prototype[_is_AutoDisposeStateProviderFamily_default] = true;
    dart.addTypeCaches(AutoDisposeStateProviderFamily);
    dart.setMethodSignature(AutoDisposeStateProviderFamily, () => ({
      __proto__: dart.getMethods(AutoDisposeStateProviderFamily.__proto__),
      create: dart.fnType(dart.legacy(state_provider.AutoDisposeStateProvider$(dart.legacy(T))), [dart.legacy(core.Object), dart.legacy(core.Object), dart.legacy(core.String)])
    }));
    dart.setLibraryUri(AutoDisposeStateProviderFamily, I[3]);
    return AutoDisposeStateProviderFamily;
  });
  state_provider.AutoDisposeStateProviderFamily = state_provider.AutoDisposeStateProviderFamily$();
  dart.addTypeTests(state_provider.AutoDisposeStateProviderFamily, _is_AutoDisposeStateProviderFamily_default);
  state_provider['AutoDisposeStateFamilyX|overrideWithProvider'] = function AutoDisposeStateFamilyX$124overrideWithProvider(T, Param, $this, builderOverride) {
    return new framework.FamilyOverride.new($this, dart.fn(param => $this.create(dart.legacy(Param).as(param), dart.fn((ref, a) => new (state_provider.StateController$(dart.legacy(T))).new(builderOverride(ref, a)), dart.fnType(dart.legacy(state_provider.StateController$(dart.legacy(T))), [T$.AutoDisposeProviderReferenceL(), dart.legacy(Param)])), null), dart.fnType(dart.legacy(state_provider.AutoDisposeStateProvider$(dart.legacy(T))), [dart.dynamic])));
  };
  state_provider['AutoDisposeStateFamilyX|get#overrideWithProvider'] = function AutoDisposeStateFamilyX$124get$35overrideWithProvider(T, Param, $this) {
    return dart.fn(builderOverride => state_provider['AutoDisposeStateFamilyX|overrideWithProvider'](dart.legacy(T), dart.legacy(Param), $this, builderOverride), dart.fnType(T$.OverrideL(), [dart.legacy(dart.fnType(dart.legacy(T), [T$.AutoDisposeProviderReferenceL(), dart.legacy(Param)]))]));
  };
  state_provider['StateFamilyX|overrideWithProvider'] = function StateFamilyX$124overrideWithProvider(T, Param, $this, builderOverride) {
    return new framework.FamilyOverride.new($this, dart.fn(param => $this.create(dart.legacy(Param).as(param), dart.fn((ref, a) => new (state_provider.StateController$(dart.legacy(T))).new(builderOverride(ref, a)), dart.fnType(dart.legacy(state_provider.StateController$(dart.legacy(T))), [T$.ProviderReferenceL(), dart.legacy(Param)])), null), dart.fnType(dart.legacy(state_provider.StateProvider$(dart.legacy(T))), [dart.dynamic])));
  };
  state_provider['StateFamilyX|get#overrideWithProvider'] = function StateFamilyX$124get$35overrideWithProvider(T, Param, $this) {
    return dart.fn(builderOverride => state_provider['StateFamilyX|overrideWithProvider'](dart.legacy(T), dart.legacy(Param), $this, builderOverride), dart.fnType(T$.OverrideL(), [dart.legacy(dart.fnType(dart.legacy(T), [T$.ProviderReferenceL(), dart.legacy(Param)]))]));
  };
  const _is__$36AsyncValue_default = Symbol('_is__$36AsyncValue_default');
  common._$AsyncValue$ = dart.generic(T => {
    class _$36AsyncValue extends core.Object {}
    _$36AsyncValue[dart.mixinOn] = Object => class _$36AsyncValue extends Object {};
    (_$36AsyncValue[dart.mixinNew] = function() {
    }).prototype = _$36AsyncValue.prototype;
    dart.addTypeTests(_$36AsyncValue);
    _$36AsyncValue.prototype[_is__$36AsyncValue_default] = true;
    dart.addTypeCaches(_$36AsyncValue);
    _$36AsyncValue[dart.implements] = () => [core.Object];
    dart.setLibraryUri(_$36AsyncValue, I[6]);
    return _$36AsyncValue;
  });
  common._$AsyncValue = common._$AsyncValue$();
  dart.addTypeTests(common._$AsyncValue, _is__$36AsyncValue_default);
  const _is_AsyncValue_default = Symbol('_is_AsyncValue_default');
  common.AsyncValue$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var AsyncDataOfTL = () => (AsyncDataOfTL = dart.constFn(common.AsyncData$(TL())))();
    var AsyncDataLOfTL = () => (AsyncDataLOfTL = dart.constFn(dart.legacy(AsyncDataOfTL())))();
    var AsyncDataLOfTLToAsyncDataLOfTL = () => (AsyncDataLOfTLToAsyncDataLOfTL = dart.constFn(dart.fnType(AsyncDataLOfTL(), [AsyncDataLOfTL()])))();
    var AsyncLoadingOfTL = () => (AsyncLoadingOfTL = dart.constFn(common.AsyncLoading$(TL())))();
    var AsyncLoadingLOfTL = () => (AsyncLoadingLOfTL = dart.constFn(dart.legacy(AsyncLoadingOfTL())))();
    var AsyncLoadingLOfTLToNull = () => (AsyncLoadingLOfTLToNull = dart.constFn(dart.fnType(core.Null, [AsyncLoadingLOfTL()])))();
    var AsyncErrorOfTL = () => (AsyncErrorOfTL = dart.constFn(common.AsyncError$(TL())))();
    var AsyncErrorLOfTL = () => (AsyncErrorLOfTL = dart.constFn(dart.legacy(AsyncErrorOfTL())))();
    var AsyncErrorLOfTLToNull = () => (AsyncErrorLOfTLToNull = dart.constFn(dart.fnType(core.Null, [AsyncErrorLOfTL()])))();
    const Object__$36AsyncValue$36 = class Object__$36AsyncValue extends core.Object {};
    (Object__$36AsyncValue$36.new = function() {
    }).prototype = Object__$36AsyncValue$36.prototype;
    dart.applyMixin(Object__$36AsyncValue$36, common._$AsyncValue$(dart.legacy(T)));
    class AsyncValue extends Object__$36AsyncValue$36 {
      static guard(T, future) {
        return async.async(dart.legacy(common.AsyncValue$(dart.legacy(T))), function* guard() {
          try {
            return new (common._$AsyncData$(dart.legacy(T))).new(yield future());
          } catch (e) {
            let err = dart.getThrown(e);
            let stack = dart.stackTrace(e);
            return new (common._$AsyncError$(dart.legacy(T))).new(err, stack);
          }
        });
      }
      get data() {
        return this.map(AsyncDataLOfTL(), {data: dart.fn(data => data, AsyncDataLOfTLToAsyncDataLOfTL()), loading: dart.fn(_ => null, AsyncLoadingLOfTLToNull()), error: dart.fn(_ => null, AsyncErrorLOfTLToNull())});
      }
      whenData(R, cb) {
        return this.when(dart.legacy(common.AsyncValue$(dart.legacy(R))), {data: dart.fn(value => {
            try {
              return new (common._$AsyncData$(dart.legacy(R))).new(cb(value));
            } catch (e) {
              let err = dart.getThrown(e);
              let stack = dart.stackTrace(e);
              return new (common._$AsyncError$(dart.legacy(R))).new(err, stack);
            }
          }, dart.fnType(dart.legacy(common.AsyncValue$(dart.legacy(R))), [TL()])), loading: dart.fn(() => C[5] || CT.C5, T$.VoidToAsyncValueLOfNull()), error: dart.fn((err, stack) => new (common._$AsyncError$(dart.legacy(R))).new(err, stack), dart.fnType(dart.legacy(common.AsyncValue$(dart.legacy(R))), [T$.ObjectL(), T$.StackTraceL()]))});
      }
    }
    (AsyncValue.__ = function() {
      ;
    }).prototype = AsyncValue.prototype;
    dart.addTypeTests(AsyncValue);
    AsyncValue.prototype[_is_AsyncValue_default] = true;
    dart.addTypeCaches(AsyncValue);
    dart.setMethodSignature(AsyncValue, () => ({
      __proto__: dart.getMethods(AsyncValue.__proto__),
      whenData: dart.gFnType(R => [dart.legacy(common.AsyncValue$(dart.legacy(R))), [dart.legacy(dart.fnType(dart.legacy(R), [dart.legacy(T)]))]])
    }));
    dart.setGetterSignature(AsyncValue, () => ({
      __proto__: dart.getGetters(AsyncValue.__proto__),
      data: dart.legacy(common.AsyncData$(dart.legacy(T)))
    }));
    dart.setLibraryUri(AsyncValue, I[6]);
    return AsyncValue;
  });
  common.AsyncValue = common.AsyncValue$();
  dart.addTypeTests(common.AsyncValue, _is_AsyncValue_default);
  const _is__StreamProviderMixin_default = Symbol('_is__StreamProviderMixin_default');
  stream_provider._StreamProviderMixin$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var AsyncValueOfTL = () => (AsyncValueOfTL = dart.constFn(common.AsyncValue$(TL())))();
    var AsyncValueLOfTL = () => (AsyncValueLOfTL = dart.constFn(dart.legacy(AsyncValueOfTL())))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    var ValueProviderOfStreamLOfTL$AsyncValueLOfTL = () => (ValueProviderOfStreamLOfTL$AsyncValueLOfTL = dart.constFn(framework.ValueProvider$(StreamLOfTL(), AsyncValueLOfTL())))();
    var StreamControllerOfTL = () => (StreamControllerOfTL = dart.constFn(async.StreamController$(TL())))();
    var AsyncValueLOfTLToNull = () => (AsyncValueLOfTLToNull = dart.constFn(dart.fnType(core.Null, [AsyncValueLOfTL()])))();
    var AsyncValueLOfTLTovoid = () => (AsyncValueLOfTLTovoid = dart.constFn(dart.fnType(dart.void, [AsyncValueLOfTL()])))();
    var AsyncValueLOfTLToLvoid = () => (AsyncValueLOfTLToLvoid = dart.constFn(dart.legacy(AsyncValueLOfTLTovoid())))();
    var ValueProviderElementOfStreamLOfTL$AsyncValueLOfTL = () => (ValueProviderElementOfStreamLOfTL$AsyncValueLOfTL = dart.constFn(framework.ValueProviderElement$(StreamLOfTL(), AsyncValueLOfTL())))();
    var ValueProviderElementLOfStreamLOfTL$AsyncValueLOfTL = () => (ValueProviderElementLOfStreamLOfTL$AsyncValueLOfTL = dart.constFn(dart.legacy(ValueProviderElementOfStreamLOfTL$AsyncValueLOfTL())))();
    var ValueProviderElementLOfStreamLOfTL$AsyncValueLOfTLToStreamLOfTL = () => (ValueProviderElementLOfStreamLOfTL$AsyncValueLOfTLToStreamLOfTL = dart.constFn(dart.fnType(StreamLOfTL(), [ValueProviderElementLOfStreamLOfTL$AsyncValueLOfTL()])))();
    class _StreamProviderMixin extends framework.RootProvider$(dart.legacy(async.Stream$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T)))) {}
    _StreamProviderMixin[dart.mixinOn] = RootProvider => class _StreamProviderMixin extends RootProvider {
      overrideWithValue(value) {
        AsyncValueLOfTL().as(value);
        return new framework.ProviderOverride.new(new (ValueProviderOfStreamLOfTL$AsyncValueLOfTL()).new(dart.fn(ref => {
          let t5, t4;
          let lastValue = null;
          let controller = StreamControllerOfTL().new();
          ref.onDispose(dart.bind(controller, 'close'));
          ref.onChange = dart.fn(newValue => {
            newValue.when(dart.void, {data: dart.bind(controller, 'add'), loading: dart.fn(() => {
                if (lastValue != null && !T$.AsyncLoadingL().is(lastValue)) {
                  ref.markMustRecomputeState();
                }
              }, T$.VoidToNull()), error: dart.bind(controller, 'addError')});
            lastValue = newValue;
          }, AsyncValueLOfTLToNull());
          t4 = ref;
          t5 = value;
          AsyncValueLOfTLToLvoid().as(t4.onChange)(t5);
          return controller.stream.asBroadcastStream();
        }, ValueProviderElementLOfStreamLOfTL$AsyncValueLOfTLToStreamLOfTL()), value), this);
      }
    };
    dart.addTypeTests(_StreamProviderMixin);
    _StreamProviderMixin.prototype[_is__StreamProviderMixin_default] = true;
    dart.addTypeCaches(_StreamProviderMixin);
    _StreamProviderMixin[dart.implements] = () => [framework.RootProvider$(dart.legacy(async.Stream$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T))))];
    dart.setLibraryUri(_StreamProviderMixin, I[7]);
    return _StreamProviderMixin;
  });
  stream_provider._StreamProviderMixin = stream_provider._StreamProviderMixin$();
  dart.addTypeTests(stream_provider._StreamProviderMixin, _is__StreamProviderMixin_default);
  var sub = dart.privateName(stream_provider, "_StreamProviderStateMixin.sub");
  var _realStream = dart.privateName(stream_provider, "_StreamProviderStateMixin._realStream");
  var _realStream$ = dart.privateName(stream_provider, "_realStream");
  const _is__StreamProviderStateMixin_default = Symbol('_is__StreamProviderStateMixin_default');
  stream_provider._StreamProviderStateMixin$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamSubscriptionOfTL = () => (StreamSubscriptionOfTL = dart.constFn(async.StreamSubscription$(TL())))();
    var StreamSubscriptionLOfTL = () => (StreamSubscriptionLOfTL = dart.constFn(dart.legacy(StreamSubscriptionOfTL())))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    var _$AsyncDataOfTL = () => (_$AsyncDataOfTL = dart.constFn(common._$AsyncData$(TL())))();
    var AsyncValueOfTL = () => (AsyncValueOfTL = dart.constFn(common.AsyncValue$(TL())))();
    var AsyncValueLOfTL = () => (AsyncValueLOfTL = dart.constFn(dart.legacy(AsyncValueOfTL())))();
    var TLToAsyncValueLOfTL = () => (TLToAsyncValueLOfTL = dart.constFn(dart.fnType(AsyncValueLOfTL(), [TL()])))();
    var _$AsyncErrorOfTL = () => (_$AsyncErrorOfTL = dart.constFn(common._$AsyncError$(TL())))();
    class _StreamProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(async.Stream$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T)))) {}
    _StreamProviderStateMixin[dart.mixinOn] = ProviderStateBase => class _StreamProviderStateMixin extends ProviderStateBase {
      get sub() {
        return this[sub];
      }
      set sub(value) {
        this[sub] = StreamSubscriptionLOfTL().as(value);
      }
      get [_realStream$]() {
        return this[_realStream];
      }
      set [_realStream$](value) {
        this[_realStream] = value;
      }
      valueChanged(opts) {
        let t6, t6$;
        let previous = opts && 'previous' in opts ? opts.previous : null;
        StreamLOfTL().as(previous);
        if (dart.equals(this.createdValue, previous)) {
          return;
        }
        this[_realStream$] = this.createdValue.asBroadcastStream();
        t6 = this.sub;
        t6 == null ? null : t6.cancel();
        this.exposedValue = C[5] || CT.C5;
        this.sub = (t6$ = this[_realStream$], t6$ == null ? null : t6$.listen(dart.fn(value => this.exposedValue = new (_$AsyncDataOfTL()).new(value), TLToAsyncValueLOfTL()), {onError: dart.fn((error, stack) => {
            this.exposedValue = new (_$AsyncErrorOfTL()).new(error, stack);
          }, T$.ObjectLAndStackTraceLToNull())}));
      }
      handleError(error, stackTrace) {
        this.exposedValue = new (_$AsyncErrorOfTL()).new(error, stackTrace);
        return true;
      }
      dispose() {
        let t6;
        t6 = this.sub;
        t6 == null ? null : t6.cancel();
        super.dispose();
      }
    };
    (_StreamProviderStateMixin[dart.mixinNew] = function() {
      this[sub] = null;
      this[_realStream] = null;
    }).prototype = _StreamProviderStateMixin.prototype;
    dart.addTypeTests(_StreamProviderStateMixin);
    _StreamProviderStateMixin.prototype[_is__StreamProviderStateMixin_default] = true;
    dart.addTypeCaches(_StreamProviderStateMixin);
    _StreamProviderStateMixin[dart.implements] = () => [framework.ProviderStateBase$(dart.legacy(async.Stream$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T))))];
    dart.setMethodSignature(_StreamProviderStateMixin, () => ({
      __proto__: dart.getMethods(_StreamProviderStateMixin.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {})
    }));
    dart.setLibraryUri(_StreamProviderStateMixin, I[7]);
    dart.setFieldSignature(_StreamProviderStateMixin, () => ({
      __proto__: dart.getFields(_StreamProviderStateMixin.__proto__),
      sub: dart.fieldType(dart.legacy(async.StreamSubscription$(dart.legacy(T)))),
      [_realStream$]: dart.fieldType(dart.legacy(async.Stream$(dart.legacy(T))))
    }));
    return _StreamProviderStateMixin;
  });
  stream_provider._StreamProviderStateMixin = stream_provider._StreamProviderStateMixin$();
  dart.addTypeTests(stream_provider._StreamProviderStateMixin, _is__StreamProviderStateMixin_default);
  const _is__CreatedStreamProvider_default = Symbol('_is__CreatedStreamProvider_default');
  stream_provider._CreatedStreamProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    var _StreamProviderStateMixinOfTL = () => (_StreamProviderStateMixinOfTL = dart.constFn(stream_provider._StreamProviderStateMixin$(TL())))();
    var _StreamProviderStateMixinLOfTL = () => (_StreamProviderStateMixinLOfTL = dart.constFn(dart.legacy(_StreamProviderStateMixinOfTL())))();
    var ProviderReferenceLToStreamLOfTL = () => (ProviderReferenceLToStreamLOfTL = dart.constFn(dart.fnType(StreamLOfTL(), [T$.ProviderReferenceL()])))();
    class _CreatedStreamProvider extends provider.Provider$(dart.legacy(async.Stream$(dart.legacy(T)))) {}
    (_CreatedStreamProvider.new = function(provider, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      _CreatedStreamProvider.__proto__.new.call(this, dart.fn(ref => {
        ref.watch(T$.ObjectL(), provider);
        let state = ref.container.readProviderElement(StreamLOfTL(), T$.ObjectL(), provider).state;
        return _StreamProviderStateMixinLOfTL().is(state) ? state[_realStream$] : state.createdValue;
      }, ProviderReferenceLToStreamLOfTL()), {name: name});
      ;
    }).prototype = _CreatedStreamProvider.prototype;
    dart.addTypeTests(_CreatedStreamProvider);
    _CreatedStreamProvider.prototype[_is__CreatedStreamProvider_default] = true;
    dart.addTypeCaches(_CreatedStreamProvider);
    dart.setLibraryUri(_CreatedStreamProvider, I[7]);
    return _CreatedStreamProvider;
  });
  stream_provider._CreatedStreamProvider = stream_provider._CreatedStreamProvider$();
  dart.addTypeTests(stream_provider._CreatedStreamProvider, _is__CreatedStreamProvider_default);
  const _is__AutoDisposeCreatedStreamProvider_default = Symbol('_is__AutoDisposeCreatedStreamProvider_default');
  stream_provider._AutoDisposeCreatedStreamProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    var _StreamProviderStateMixinOfTL = () => (_StreamProviderStateMixinOfTL = dart.constFn(stream_provider._StreamProviderStateMixin$(TL())))();
    var _StreamProviderStateMixinLOfTL = () => (_StreamProviderStateMixinLOfTL = dart.constFn(dart.legacy(_StreamProviderStateMixinOfTL())))();
    var AutoDisposeProviderReferenceLToStreamLOfTL = () => (AutoDisposeProviderReferenceLToStreamLOfTL = dart.constFn(dart.fnType(StreamLOfTL(), [T$.AutoDisposeProviderReferenceL()])))();
    class _AutoDisposeCreatedStreamProvider extends provider.AutoDisposeProvider$(dart.legacy(async.Stream$(dart.legacy(T)))) {}
    (_AutoDisposeCreatedStreamProvider.new = function(provider, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      _AutoDisposeCreatedStreamProvider.__proto__.new.call(this, dart.fn(ref => {
        ref.watch(T$.ObjectL(), provider);
        let state = ref.container.readProviderElement(StreamLOfTL(), T$.ObjectL(), provider).state;
        return _StreamProviderStateMixinLOfTL().is(state) ? state[_realStream$] : state.createdValue;
      }, AutoDisposeProviderReferenceLToStreamLOfTL()), {name: name});
      ;
    }).prototype = _AutoDisposeCreatedStreamProvider.prototype;
    dart.addTypeTests(_AutoDisposeCreatedStreamProvider);
    _AutoDisposeCreatedStreamProvider.prototype[_is__AutoDisposeCreatedStreamProvider_default] = true;
    dart.addTypeCaches(_AutoDisposeCreatedStreamProvider);
    dart.setLibraryUri(_AutoDisposeCreatedStreamProvider, I[7]);
    return _AutoDisposeCreatedStreamProvider;
  });
  stream_provider._AutoDisposeCreatedStreamProvider = stream_provider._AutoDisposeCreatedStreamProvider$();
  dart.addTypeTests(stream_provider._AutoDisposeCreatedStreamProvider, _is__AutoDisposeCreatedStreamProvider_default);
  var _stream = dart.privateName(stream_provider, "_stream");
  var _last = dart.privateName(stream_provider, "_last");
  const _is_AutoDisposeStreamProvider_default = Symbol('_is_AutoDisposeStreamProvider_default');
  stream_provider.AutoDisposeStreamProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    var AutoDisposeProviderReferenceLToStreamLOfTL = () => (AutoDisposeProviderReferenceLToStreamLOfTL = dart.constFn(dart.fnType(StreamLOfTL(), [T$.AutoDisposeProviderReferenceL()])))();
    var _AutoDisposeCreatedStreamProviderOfTL = () => (_AutoDisposeCreatedStreamProviderOfTL = dart.constFn(stream_provider._AutoDisposeCreatedStreamProvider$(TL())))();
    var FutureOfTL = () => (FutureOfTL = dart.constFn(async.Future$(TL())))();
    var FutureLOfTL = () => (FutureLOfTL = dart.constFn(dart.legacy(FutureOfTL())))();
    var AutoDisposeProviderReferenceLToFutureLOfTL = () => (AutoDisposeProviderReferenceLToFutureLOfTL = dart.constFn(dart.fnType(FutureLOfTL(), [T$.AutoDisposeProviderReferenceL()])))();
    var _AutoDisposeStreamProviderStateOfTL = () => (_AutoDisposeStreamProviderStateOfTL = dart.constFn(stream_provider._AutoDisposeStreamProviderState$(TL())))();
    const AutoDisposeProviderBase__StreamProviderMixin$36 = class AutoDisposeProviderBase__StreamProviderMixin extends framework.AutoDisposeProviderBase$(dart.legacy(async.Stream$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T)))) {};
    (AutoDisposeProviderBase__StreamProviderMixin$36.new = function(create, name) {
      AutoDisposeProviderBase__StreamProviderMixin$36.__proto__.new.call(this, create, name);
    }).prototype = AutoDisposeProviderBase__StreamProviderMixin$36.prototype;
    dart.applyMixin(AutoDisposeProviderBase__StreamProviderMixin$36, stream_provider._StreamProviderMixin$(dart.legacy(T)));
    class AutoDisposeStreamProvider extends AutoDisposeProviderBase__StreamProviderMixin$36 {
      get stream() {
        let t6;
        t6 = this[_stream];
        return t6 == null ? this[_stream] = new (_AutoDisposeCreatedStreamProviderOfTL()).new(this, {name: this.name == null ? null : dart.str(this.name) + ".stream"}) : t6;
      }
      get last() {
        let t6;
        t6 = this[_last];
        return t6 == null ? this[_last] = provider.Provider.autoDispose.call(FutureLOfTL(), dart.fn(ref => stream_provider._readLast(TL(), T$.ProviderElementL().as(ref), this), AutoDisposeProviderReferenceLToFutureLOfTL()), {name: this.name == null ? null : dart.str(this.name) + ".last"}) : t6;
      }
      createState() {
        return new (_AutoDisposeStreamProviderStateOfTL()).new();
      }
    }
    (AutoDisposeStreamProvider.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      this[_stream] = null;
      this[_last] = null;
      AutoDisposeStreamProvider.__proto__.new.call(this, dart.fn(ref => create(ref).asBroadcastStream(), AutoDisposeProviderReferenceLToStreamLOfTL()), name);
      ;
    }).prototype = AutoDisposeStreamProvider.prototype;
    dart.addTypeTests(AutoDisposeStreamProvider);
    AutoDisposeStreamProvider.prototype[_is_AutoDisposeStreamProvider_default] = true;
    dart.addTypeCaches(AutoDisposeStreamProvider);
    dart.setMethodSignature(AutoDisposeStreamProvider, () => ({
      __proto__: dart.getMethods(AutoDisposeStreamProvider.__proto__),
      createState: dart.fnType(dart.legacy(stream_provider._AutoDisposeStreamProviderState$(dart.legacy(T))), [])
    }));
    dart.setGetterSignature(AutoDisposeStreamProvider, () => ({
      __proto__: dart.getGetters(AutoDisposeStreamProvider.__proto__),
      stream: dart.legacy(framework.AutoDisposeProviderBase$(dart.legacy(async.Stream$(dart.legacy(T))), dart.legacy(async.Stream$(dart.legacy(T))))),
      last: dart.legacy(framework.AutoDisposeProviderBase$(dart.legacy(core.Object), dart.legacy(async.Future$(dart.legacy(T)))))
    }));
    dart.setLibraryUri(AutoDisposeStreamProvider, I[7]);
    dart.setFieldSignature(AutoDisposeStreamProvider, () => ({
      __proto__: dart.getFields(AutoDisposeStreamProvider.__proto__),
      [_stream]: dart.fieldType(dart.legacy(framework.AutoDisposeProviderBase$(dart.legacy(async.Stream$(dart.legacy(T))), dart.legacy(async.Stream$(dart.legacy(T)))))),
      [_last]: dart.fieldType(dart.legacy(framework.AutoDisposeProviderBase$(dart.legacy(core.Object), dart.legacy(async.Future$(dart.legacy(T))))))
    }));
    return AutoDisposeStreamProvider;
  });
  stream_provider.AutoDisposeStreamProvider = stream_provider.AutoDisposeStreamProvider$();
  dart.defineLazy(stream_provider.AutoDisposeStreamProvider, {
    /*stream_provider.AutoDisposeStreamProvider.family*/get family() {
      return C[6] || CT.C6;
    }
  }, true);
  dart.addTypeTests(stream_provider.AutoDisposeStreamProvider, _is_AutoDisposeStreamProvider_default);
  const _is__AutoDisposeStreamProviderState_default = Symbol('_is__AutoDisposeStreamProviderState_default');
  stream_provider._AutoDisposeStreamProviderState$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamSubscriptionOfTL = () => (StreamSubscriptionOfTL = dart.constFn(async.StreamSubscription$(TL())))();
    var StreamSubscriptionLOfTL = () => (StreamSubscriptionLOfTL = dart.constFn(dart.legacy(StreamSubscriptionOfTL())))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    const ProviderStateBase__StreamProviderStateMixin$36 = class ProviderStateBase__StreamProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(async.Stream$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T)))) {};
    (ProviderStateBase__StreamProviderStateMixin$36.new = function() {
      stream_provider._StreamProviderStateMixin$(dart.legacy(T))[dart.mixinNew].call(this);
      ProviderStateBase__StreamProviderStateMixin$36.__proto__.new.call(this);
    }).prototype = ProviderStateBase__StreamProviderStateMixin$36.prototype;
    dart.applyMixin(ProviderStateBase__StreamProviderStateMixin$36, stream_provider._StreamProviderStateMixin$(dart.legacy(T)));
    class _AutoDisposeStreamProviderState extends ProviderStateBase__StreamProviderStateMixin$36 {
      get sub() {
        return super.sub;
      }
      set sub(value) {
        StreamSubscriptionLOfTL().as(value);
        return super.sub = value;
      }
      get [_realStream$]() {
        return super[_realStream$];
      }
      set [_realStream$](value) {
        return super[_realStream$] = value;
      }
      valueChanged(opts) {
        let previous = opts && 'previous' in opts ? opts.previous : null;
        StreamLOfTL().as(previous);
        return super.valueChanged({previous: previous});
      }
      handleError(error, stackTrace) {
        return super.handleError(error, stackTrace);
      }
      dispose() {
        return super.dispose();
      }
    }
    (_AutoDisposeStreamProviderState.new = function() {
      _AutoDisposeStreamProviderState.__proto__.new.call(this);
      ;
    }).prototype = _AutoDisposeStreamProviderState.prototype;
    dart.addTypeTests(_AutoDisposeStreamProviderState);
    _AutoDisposeStreamProviderState.prototype[_is__AutoDisposeStreamProviderState_default] = true;
    dart.addTypeCaches(_AutoDisposeStreamProviderState);
    dart.setMethodSignature(_AutoDisposeStreamProviderState, () => ({
      __proto__: dart.getMethods(_AutoDisposeStreamProviderState.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {})
    }));
    dart.setGetterSignature(_AutoDisposeStreamProviderState, () => ({
      __proto__: dart.getGetters(_AutoDisposeStreamProviderState.__proto__),
      sub: dart.legacy(async.StreamSubscription$(dart.legacy(T))),
      [_realStream$]: dart.legacy(async.Stream$(dart.legacy(T)))
    }));
    dart.setSetterSignature(_AutoDisposeStreamProviderState, () => ({
      __proto__: dart.getSetters(_AutoDisposeStreamProviderState.__proto__),
      sub: dart.legacy(core.Object),
      [_realStream$]: dart.legacy(async.Stream$(dart.legacy(T)))
    }));
    dart.setLibraryUri(_AutoDisposeStreamProviderState, I[7]);
    return _AutoDisposeStreamProviderState;
  });
  stream_provider._AutoDisposeStreamProviderState = stream_provider._AutoDisposeStreamProviderState$();
  dart.addTypeTests(stream_provider._AutoDisposeStreamProviderState, _is__AutoDisposeStreamProviderState_default);
  const _is_AutoDisposeStreamProviderFamily_default = Symbol('_is_AutoDisposeStreamProviderFamily_default');
  stream_provider.AutoDisposeStreamProviderFamily$ = dart.generic((T, A) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    var AutoDisposeProviderReferenceLAndALToStreamLOfTL = () => (AutoDisposeProviderReferenceLAndALToStreamLOfTL = dart.constFn(dart.fnType(StreamLOfTL(), [T$.AutoDisposeProviderReferenceL(), AL()])))();
    var AutoDisposeProviderReferenceLAndALToLStreamLOfTL = () => (AutoDisposeProviderReferenceLAndALToLStreamLOfTL = dart.constFn(dart.legacy(AutoDisposeProviderReferenceLAndALToStreamLOfTL())))();
    var AutoDisposeStreamProviderOfTL = () => (AutoDisposeStreamProviderOfTL = dart.constFn(stream_provider.AutoDisposeStreamProvider$(TL())))();
    var AutoDisposeProviderReferenceLToStreamLOfTL = () => (AutoDisposeProviderReferenceLToStreamLOfTL = dart.constFn(dart.fnType(StreamLOfTL(), [T$.AutoDisposeProviderReferenceL()])))();
    var AL = () => (AL = dart.constFn(dart.legacy(A)))();
    class AutoDisposeStreamProviderFamily extends framework.Family$(dart.legacy(async.Stream$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T))), dart.legacy(A), dart.legacy(framework.AutoDisposeProviderReference), dart.legacy(stream_provider.AutoDisposeStreamProvider$(dart.legacy(T)))) {
      create(value, builder, name) {
        AL().as(value);
        AutoDisposeProviderReferenceLAndALToLStreamLOfTL().as(builder);
        return new (AutoDisposeStreamProviderOfTL()).new(dart.fn(ref => builder(ref, value), AutoDisposeProviderReferenceLToStreamLOfTL()), {name: name});
      }
    }
    (AutoDisposeStreamProviderFamily.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      AutoDisposeStreamProviderFamily.__proto__.new.call(this, create, name);
      ;
    }).prototype = AutoDisposeStreamProviderFamily.prototype;
    dart.addTypeTests(AutoDisposeStreamProviderFamily);
    AutoDisposeStreamProviderFamily.prototype[_is_AutoDisposeStreamProviderFamily_default] = true;
    dart.addTypeCaches(AutoDisposeStreamProviderFamily);
    dart.setMethodSignature(AutoDisposeStreamProviderFamily, () => ({
      __proto__: dart.getMethods(AutoDisposeStreamProviderFamily.__proto__),
      create: dart.fnType(dart.legacy(stream_provider.AutoDisposeStreamProvider$(dart.legacy(T))), [dart.legacy(core.Object), dart.legacy(core.Object), dart.legacy(core.String)])
    }));
    dart.setLibraryUri(AutoDisposeStreamProviderFamily, I[7]);
    return AutoDisposeStreamProviderFamily;
  });
  stream_provider.AutoDisposeStreamProviderFamily = stream_provider.AutoDisposeStreamProviderFamily$();
  dart.addTypeTests(stream_provider.AutoDisposeStreamProviderFamily, _is_AutoDisposeStreamProviderFamily_default);
  const _is_StreamProvider_default = Symbol('_is_StreamProvider_default');
  stream_provider.StreamProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _CreatedStreamProviderOfTL = () => (_CreatedStreamProviderOfTL = dart.constFn(stream_provider._CreatedStreamProvider$(TL())))();
    var FutureOfTL = () => (FutureOfTL = dart.constFn(async.Future$(TL())))();
    var FutureLOfTL = () => (FutureLOfTL = dart.constFn(dart.legacy(FutureOfTL())))();
    var ProviderOfFutureLOfTL = () => (ProviderOfFutureLOfTL = dart.constFn(provider.Provider$(FutureLOfTL())))();
    var ProviderReferenceLToFutureLOfTL = () => (ProviderReferenceLToFutureLOfTL = dart.constFn(dart.fnType(FutureLOfTL(), [T$.ProviderReferenceL()])))();
    var _StreamProviderStateOfTL = () => (_StreamProviderStateOfTL = dart.constFn(stream_provider._StreamProviderState$(TL())))();
    const AlwaysAliveProviderBase__StreamProviderMixin$36 = class AlwaysAliveProviderBase__StreamProviderMixin extends framework.AlwaysAliveProviderBase$(dart.legacy(async.Stream$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T)))) {};
    (AlwaysAliveProviderBase__StreamProviderMixin$36.new = function(create, name) {
      AlwaysAliveProviderBase__StreamProviderMixin$36.__proto__.new.call(this, create, name);
    }).prototype = AlwaysAliveProviderBase__StreamProviderMixin$36.prototype;
    dart.applyMixin(AlwaysAliveProviderBase__StreamProviderMixin$36, stream_provider._StreamProviderMixin$(dart.legacy(T)));
    class StreamProvider extends AlwaysAliveProviderBase__StreamProviderMixin$36 {
      get stream() {
        let t6;
        t6 = this[_stream];
        return t6 == null ? this[_stream] = new (_CreatedStreamProviderOfTL()).new(this, {name: this.name == null ? null : dart.str(this.name) + ".stream"}) : t6;
      }
      get last() {
        let t6;
        t6 = this[_last];
        return t6 == null ? this[_last] = new (ProviderOfFutureLOfTL()).new(dart.fn(ref => stream_provider._readLast(TL(), T$.ProviderElementL().as(ref), this), ProviderReferenceLToFutureLOfTL()), {name: this.name == null ? null : dart.str(this.name) + ".last"}) : t6;
      }
      createState() {
        return new (_StreamProviderStateOfTL()).new();
      }
    }
    (StreamProvider.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      this[_stream] = null;
      this[_last] = null;
      StreamProvider.__proto__.new.call(this, create, name);
      ;
    }).prototype = StreamProvider.prototype;
    dart.addTypeTests(StreamProvider);
    StreamProvider.prototype[_is_StreamProvider_default] = true;
    dart.addTypeCaches(StreamProvider);
    dart.setMethodSignature(StreamProvider, () => ({
      __proto__: dart.getMethods(StreamProvider.__proto__),
      createState: dart.fnType(dart.legacy(stream_provider._StreamProviderState$(dart.legacy(T))), [])
    }));
    dart.setGetterSignature(StreamProvider, () => ({
      __proto__: dart.getGetters(StreamProvider.__proto__),
      stream: dart.legacy(framework.AlwaysAliveProviderBase$(dart.legacy(async.Stream$(dart.legacy(T))), dart.legacy(async.Stream$(dart.legacy(T))))),
      last: dart.legacy(framework.AlwaysAliveProviderBase$(dart.legacy(core.Object), dart.legacy(async.Future$(dart.legacy(T)))))
    }));
    dart.setLibraryUri(StreamProvider, I[7]);
    dart.setFieldSignature(StreamProvider, () => ({
      __proto__: dart.getFields(StreamProvider.__proto__),
      [_stream]: dart.fieldType(dart.legacy(framework.AlwaysAliveProviderBase$(dart.legacy(async.Stream$(dart.legacy(T))), dart.legacy(async.Stream$(dart.legacy(T)))))),
      [_last]: dart.fieldType(dart.legacy(framework.AlwaysAliveProviderBase$(dart.legacy(core.Object), dart.legacy(async.Future$(dart.legacy(T))))))
    }));
    return StreamProvider;
  });
  stream_provider.StreamProvider = stream_provider.StreamProvider$();
  dart.defineLazy(stream_provider.StreamProvider, {
    /*stream_provider.StreamProvider.family*/get family() {
      return C[7] || CT.C7;
    },
    /*stream_provider.StreamProvider.autoDispose*/get autoDispose() {
      return C[8] || CT.C8;
    }
  }, true);
  dart.addTypeTests(stream_provider.StreamProvider, _is_StreamProvider_default);
  const _is__StreamProviderState_default = Symbol('_is__StreamProviderState_default');
  stream_provider._StreamProviderState$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamSubscriptionOfTL = () => (StreamSubscriptionOfTL = dart.constFn(async.StreamSubscription$(TL())))();
    var StreamSubscriptionLOfTL = () => (StreamSubscriptionLOfTL = dart.constFn(dart.legacy(StreamSubscriptionOfTL())))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    const ProviderStateBase__StreamProviderStateMixin$36 = class ProviderStateBase__StreamProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(async.Stream$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T)))) {};
    (ProviderStateBase__StreamProviderStateMixin$36.new = function() {
      stream_provider._StreamProviderStateMixin$(dart.legacy(T))[dart.mixinNew].call(this);
      ProviderStateBase__StreamProviderStateMixin$36.__proto__.new.call(this);
    }).prototype = ProviderStateBase__StreamProviderStateMixin$36.prototype;
    dart.applyMixin(ProviderStateBase__StreamProviderStateMixin$36, stream_provider._StreamProviderStateMixin$(dart.legacy(T)));
    class _StreamProviderState extends ProviderStateBase__StreamProviderStateMixin$36 {
      get sub() {
        return super.sub;
      }
      set sub(value) {
        StreamSubscriptionLOfTL().as(value);
        return super.sub = value;
      }
      get [_realStream$]() {
        return super[_realStream$];
      }
      set [_realStream$](value) {
        return super[_realStream$] = value;
      }
      valueChanged(opts) {
        let previous = opts && 'previous' in opts ? opts.previous : null;
        StreamLOfTL().as(previous);
        return super.valueChanged({previous: previous});
      }
      handleError(error, stackTrace) {
        return super.handleError(error, stackTrace);
      }
      dispose() {
        return super.dispose();
      }
    }
    (_StreamProviderState.new = function() {
      _StreamProviderState.__proto__.new.call(this);
      ;
    }).prototype = _StreamProviderState.prototype;
    dart.addTypeTests(_StreamProviderState);
    _StreamProviderState.prototype[_is__StreamProviderState_default] = true;
    dart.addTypeCaches(_StreamProviderState);
    dart.setMethodSignature(_StreamProviderState, () => ({
      __proto__: dart.getMethods(_StreamProviderState.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {})
    }));
    dart.setGetterSignature(_StreamProviderState, () => ({
      __proto__: dart.getGetters(_StreamProviderState.__proto__),
      sub: dart.legacy(async.StreamSubscription$(dart.legacy(T))),
      [_realStream$]: dart.legacy(async.Stream$(dart.legacy(T)))
    }));
    dart.setSetterSignature(_StreamProviderState, () => ({
      __proto__: dart.getSetters(_StreamProviderState.__proto__),
      sub: dart.legacy(core.Object),
      [_realStream$]: dart.legacy(async.Stream$(dart.legacy(T)))
    }));
    dart.setLibraryUri(_StreamProviderState, I[7]);
    return _StreamProviderState;
  });
  stream_provider._StreamProviderState = stream_provider._StreamProviderState$();
  dart.addTypeTests(stream_provider._StreamProviderState, _is__StreamProviderState_default);
  const _is_StreamProviderFamily_default = Symbol('_is_StreamProviderFamily_default');
  stream_provider.StreamProviderFamily$ = dart.generic((T, A) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamOfTL = () => (StreamOfTL = dart.constFn(async.Stream$(TL())))();
    var StreamLOfTL = () => (StreamLOfTL = dart.constFn(dart.legacy(StreamOfTL())))();
    var ProviderReferenceLAndALToStreamLOfTL = () => (ProviderReferenceLAndALToStreamLOfTL = dart.constFn(dart.fnType(StreamLOfTL(), [T$.ProviderReferenceL(), AL()])))();
    var ProviderReferenceLAndALToLStreamLOfTL = () => (ProviderReferenceLAndALToLStreamLOfTL = dart.constFn(dart.legacy(ProviderReferenceLAndALToStreamLOfTL())))();
    var StreamProviderOfTL = () => (StreamProviderOfTL = dart.constFn(stream_provider.StreamProvider$(TL())))();
    var ProviderReferenceLToStreamLOfTL = () => (ProviderReferenceLToStreamLOfTL = dart.constFn(dart.fnType(StreamLOfTL(), [T$.ProviderReferenceL()])))();
    var AL = () => (AL = dart.constFn(dart.legacy(A)))();
    class StreamProviderFamily extends framework.Family$(dart.legacy(async.Stream$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T))), dart.legacy(A), dart.legacy(framework.ProviderReference), dart.legacy(stream_provider.StreamProvider$(dart.legacy(T)))) {
      create(value, builder, name) {
        AL().as(value);
        ProviderReferenceLAndALToLStreamLOfTL().as(builder);
        return new (StreamProviderOfTL()).new(dart.fn(ref => builder(ref, value), ProviderReferenceLToStreamLOfTL()), {name: name});
      }
    }
    (StreamProviderFamily.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      StreamProviderFamily.__proto__.new.call(this, create, name);
      ;
    }).prototype = StreamProviderFamily.prototype;
    dart.addTypeTests(StreamProviderFamily);
    StreamProviderFamily.prototype[_is_StreamProviderFamily_default] = true;
    dart.addTypeCaches(StreamProviderFamily);
    dart.setMethodSignature(StreamProviderFamily, () => ({
      __proto__: dart.getMethods(StreamProviderFamily.__proto__),
      create: dart.fnType(dart.legacy(stream_provider.StreamProvider$(dart.legacy(T))), [dart.legacy(core.Object), dart.legacy(core.Object), dart.legacy(core.String)])
    }));
    dart.setLibraryUri(StreamProviderFamily, I[7]);
    return StreamProviderFamily;
  });
  stream_provider.StreamProviderFamily = stream_provider.StreamProviderFamily$();
  dart.addTypeTests(stream_provider.StreamProviderFamily, _is_StreamProviderFamily_default);
  stream_provider._readLast = function _readLast(T, ref, provider) {
    return ref.watch(dart.legacy(common.AsyncValue$(dart.legacy(T))), provider).when(dart.legacy(async.Future$(dart.legacy(T))), {data: dart.fn(value => async.Future$(dart.legacy(T)).value(value), dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(T)])), loading: dart.fn(() => ref.watch(dart.legacy(async.Stream$(dart.legacy(T))), provider.stream).first, dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [])), error: dart.fn((err, stack) => async.Future$(dart.legacy(T)).error(err, stack), dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [T$.ObjectL(), T$.StackTraceL()]))});
  };
  var removeListener$ = dart.privateName(state_notifier_provider, "_StateNotifierStateProviderStateMixin.removeListener");
  var _listener = dart.privateName(state_notifier_provider, "_listener");
  const _is__StateNotifierStateProviderStateMixin_default = Symbol('_is__StateNotifierStateProviderStateMixin_default');
  state_notifier_provider._StateNotifierStateProviderStateMixin$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StateNotifierOfTL = () => (StateNotifierOfTL = dart.constFn(state_notifier.StateNotifier$(TL())))();
    var StateNotifierLOfTL = () => (StateNotifierLOfTL = dart.constFn(dart.legacy(StateNotifierOfTL())))();
    class _StateNotifierStateProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(state_notifier.StateNotifier$(dart.legacy(T))), dart.legacy(T)) {}
    _StateNotifierStateProviderStateMixin[dart.mixinOn] = ProviderStateBase => class _StateNotifierStateProviderStateMixin extends ProviderStateBase {
      get removeListener() {
        return this[removeListener$];
      }
      set removeListener(value) {
        this[removeListener$] = value;
      }
      valueChanged(opts) {
        let t6;
        let previous = opts && 'previous' in opts ? opts.previous : null;
        StateNotifierLOfTL().as(previous);
        if (!(this.createdValue != null)) dart.assertFailed("StateNotifierProvider must return a non-null value", I[8], 83, 7, "createdValue != null");
        if (dart.equals(this.createdValue, previous)) {
          return;
        }
        t6 = this.removeListener;
        t6 == null ? null : t6();
        this.removeListener = this.createdValue.addListener(dart.bind(this, _listener));
      }
      [_listener](value) {
        TL().as(value);
        this.exposedValue = value;
      }
      dispose() {
        let t6;
        t6 = this.removeListener;
        t6 == null ? null : t6();
        super.dispose();
      }
    };
    (_StateNotifierStateProviderStateMixin[dart.mixinNew] = function() {
      this[removeListener$] = null;
    }).prototype = _StateNotifierStateProviderStateMixin.prototype;
    dart.addTypeTests(_StateNotifierStateProviderStateMixin);
    _StateNotifierStateProviderStateMixin.prototype[_is__StateNotifierStateProviderStateMixin_default] = true;
    dart.addTypeCaches(_StateNotifierStateProviderStateMixin);
    _StateNotifierStateProviderStateMixin[dart.implements] = () => [framework.ProviderStateBase$(dart.legacy(state_notifier.StateNotifier$(dart.legacy(T))), dart.legacy(T))];
    dart.setMethodSignature(_StateNotifierStateProviderStateMixin, () => ({
      __proto__: dart.getMethods(_StateNotifierStateProviderStateMixin.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {}),
      [_listener]: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(_StateNotifierStateProviderStateMixin, I[9]);
    dart.setFieldSignature(_StateNotifierStateProviderStateMixin, () => ({
      __proto__: dart.getFields(_StateNotifierStateProviderStateMixin.__proto__),
      removeListener: dart.fieldType(dart.legacy(dart.fnType(dart.void, [])))
    }));
    return _StateNotifierStateProviderStateMixin;
  });
  state_notifier_provider._StateNotifierStateProviderStateMixin = state_notifier_provider._StateNotifierStateProviderStateMixin$();
  dart.addTypeTests(state_notifier_provider._StateNotifierStateProviderStateMixin, _is__StateNotifierStateProviderStateMixin_default);
  var _state = dart.privateName(state_notifier_provider, "_state");
  const _is_StateNotifierProvider_default = Symbol('_is_StateNotifierProvider_default');
  state_notifier_provider.StateNotifierProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ProviderReferenceLToTL = () => (ProviderReferenceLToTL = dart.constFn(dart.fnType(TL(), [T$.ProviderReferenceL()])))();
    class StateNotifierProvider extends provider.Provider$(dart.legacy(T)) {}
    (StateNotifierProvider.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      this[_state] = null;
      StateNotifierProvider.__proto__.new.call(this, dart.fn(ref => {
        let controller = create(ref);
        ref.onDispose(dart.bind(controller, 'dispose'));
        return controller;
      }, ProviderReferenceLToTL()), {name: name});
      ;
    }).prototype = StateNotifierProvider.prototype;
    dart.addTypeTests(StateNotifierProvider);
    StateNotifierProvider.prototype[_is_StateNotifierProvider_default] = true;
    dart.addTypeCaches(StateNotifierProvider);
    dart.setLibraryUri(StateNotifierProvider, I[9]);
    dart.setFieldSignature(StateNotifierProvider, () => ({
      __proto__: dart.getFields(StateNotifierProvider.__proto__),
      [_state]: dart.fieldType(dart.legacy(state_notifier_provider.StateNotifierStateProvider$(dart.legacy(core.Object))))
    }));
    return StateNotifierProvider;
  });
  state_notifier_provider.StateNotifierProvider = state_notifier_provider.StateNotifierProvider$();
  dart.defineLazy(state_notifier_provider.StateNotifierProvider, {
    /*state_notifier_provider.StateNotifierProvider.family*/get family() {
      return C[9] || CT.C9;
    },
    /*state_notifier_provider.StateNotifierProvider.autoDispose*/get autoDispose() {
      return C[10] || CT.C10;
    }
  }, true);
  dart.addTypeTests(state_notifier_provider.StateNotifierProvider, _is_StateNotifierProvider_default);
  var _provider$ = dart.privateName(state_notifier_provider, "_provider");
  const _is_StateNotifierStateProvider_default = Symbol('_is_StateNotifierStateProvider_default');
  state_notifier_provider.StateNotifierStateProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StateNotifierOfTL = () => (StateNotifierOfTL = dart.constFn(state_notifier.StateNotifier$(TL())))();
    var StateNotifierLOfTL = () => (StateNotifierLOfTL = dart.constFn(dart.legacy(StateNotifierOfTL())))();
    var ProviderReferenceLToStateNotifierLOfTL = () => (ProviderReferenceLToStateNotifierLOfTL = dart.constFn(dart.fnType(StateNotifierLOfTL(), [T$.ProviderReferenceL()])))();
    var _StateNotifierStateProviderStateOfTL = () => (_StateNotifierStateProviderStateOfTL = dart.constFn(state_notifier_provider._StateNotifierStateProviderState$(TL())))();
    var ValueProviderOfStateNotifierLOfTL$TL = () => (ValueProviderOfStateNotifierLOfTL$TL = dart.constFn(framework.ValueProvider$(StateNotifierLOfTL(), TL())))();
    var ValueProviderElementOfStateNotifierLOfTL$TL = () => (ValueProviderElementOfStateNotifierLOfTL$TL = dart.constFn(framework.ValueProviderElement$(StateNotifierLOfTL(), TL())))();
    var ValueProviderElementLOfStateNotifierLOfTL$TL = () => (ValueProviderElementLOfStateNotifierLOfTL$TL = dart.constFn(dart.legacy(ValueProviderElementOfStateNotifierLOfTL$TL())))();
    var ValueProviderElementLOfStateNotifierLOfTL$TLToStateNotifierLOfTL = () => (ValueProviderElementLOfStateNotifierLOfTL$TLToStateNotifierLOfTL = dart.constFn(dart.fnType(StateNotifierLOfTL(), [ValueProviderElementLOfStateNotifierLOfTL$TL()])))();
    class StateNotifierStateProvider extends framework.AlwaysAliveProviderBase$(dart.legacy(state_notifier.StateNotifier$(dart.legacy(T))), dart.legacy(T)) {
      createState() {
        return new (_StateNotifierStateProviderStateOfTL()).new();
      }
      overrideWithValue(value) {
        TL().as(value);
        return new framework.ProviderOverride.new(new (ValueProviderOfStateNotifierLOfTL$TL()).new(dart.fn(ref => ref.watch(StateNotifierLOfTL(), this[_provider$]), ValueProviderElementLOfStateNotifierLOfTL$TLToStateNotifierLOfTL()), value), this);
      }
    }
    (StateNotifierStateProvider.__ = function(_provider) {
      this[_provider$] = _provider;
      StateNotifierStateProvider.__proto__.new.call(this, dart.fn(ref => ref.watch(StateNotifierLOfTL(), _provider), ProviderReferenceLToStateNotifierLOfTL()), _provider.name != null ? dart.str(_provider.name) + ".state" : null);
      ;
    }).prototype = StateNotifierStateProvider.prototype;
    dart.addTypeTests(StateNotifierStateProvider);
    StateNotifierStateProvider.prototype[_is_StateNotifierStateProvider_default] = true;
    dart.addTypeCaches(StateNotifierStateProvider);
    dart.setMethodSignature(StateNotifierStateProvider, () => ({
      __proto__: dart.getMethods(StateNotifierStateProvider.__proto__),
      createState: dart.fnType(dart.legacy(state_notifier_provider._StateNotifierStateProviderState$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(StateNotifierStateProvider, I[9]);
    dart.setFieldSignature(StateNotifierStateProvider, () => ({
      __proto__: dart.getFields(StateNotifierStateProvider.__proto__),
      [_provider$]: dart.finalFieldType(dart.legacy(state_notifier_provider.StateNotifierProvider$(dart.legacy(state_notifier.StateNotifier$(dart.legacy(T))))))
    }));
    return StateNotifierStateProvider;
  });
  state_notifier_provider.StateNotifierStateProvider = state_notifier_provider.StateNotifierStateProvider$();
  dart.addTypeTests(state_notifier_provider.StateNotifierStateProvider, _is_StateNotifierStateProvider_default);
  const _is__StateNotifierStateProviderState_default = Symbol('_is__StateNotifierStateProviderState_default');
  state_notifier_provider._StateNotifierStateProviderState$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StateNotifierOfTL = () => (StateNotifierOfTL = dart.constFn(state_notifier.StateNotifier$(TL())))();
    var StateNotifierLOfTL = () => (StateNotifierLOfTL = dart.constFn(dart.legacy(StateNotifierOfTL())))();
    const ProviderStateBase__StateNotifierStateProviderStateMixin$36 = class ProviderStateBase__StateNotifierStateProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(state_notifier.StateNotifier$(dart.legacy(T))), dart.legacy(T)) {};
    (ProviderStateBase__StateNotifierStateProviderStateMixin$36.new = function() {
      state_notifier_provider._StateNotifierStateProviderStateMixin$(dart.legacy(T))[dart.mixinNew].call(this);
      ProviderStateBase__StateNotifierStateProviderStateMixin$36.__proto__.new.call(this);
    }).prototype = ProviderStateBase__StateNotifierStateProviderStateMixin$36.prototype;
    dart.applyMixin(ProviderStateBase__StateNotifierStateProviderStateMixin$36, state_notifier_provider._StateNotifierStateProviderStateMixin$(dart.legacy(T)));
    class _StateNotifierStateProviderState extends ProviderStateBase__StateNotifierStateProviderStateMixin$36 {
      get removeListener() {
        return super.removeListener;
      }
      set removeListener(value) {
        return super.removeListener = value;
      }
      valueChanged(opts) {
        let previous = opts && 'previous' in opts ? opts.previous : null;
        StateNotifierLOfTL().as(previous);
        return super.valueChanged({previous: previous});
      }
      [_listener](value) {
        return super[_listener](value);
      }
      dispose() {
        return super.dispose();
      }
    }
    (_StateNotifierStateProviderState.new = function() {
      _StateNotifierStateProviderState.__proto__.new.call(this);
      ;
    }).prototype = _StateNotifierStateProviderState.prototype;
    dart.addTypeTests(_StateNotifierStateProviderState);
    _StateNotifierStateProviderState.prototype[_is__StateNotifierStateProviderState_default] = true;
    dart.addTypeCaches(_StateNotifierStateProviderState);
    dart.setMethodSignature(_StateNotifierStateProviderState, () => ({
      __proto__: dart.getMethods(_StateNotifierStateProviderState.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {}),
      [_listener]: dart.fnType(dart.void, [dart.legacy(T)])
    }));
    dart.setGetterSignature(_StateNotifierStateProviderState, () => ({
      __proto__: dart.getGetters(_StateNotifierStateProviderState.__proto__),
      removeListener: dart.legacy(dart.fnType(dart.void, []))
    }));
    dart.setSetterSignature(_StateNotifierStateProviderState, () => ({
      __proto__: dart.getSetters(_StateNotifierStateProviderState.__proto__),
      removeListener: dart.legacy(dart.fnType(dart.void, []))
    }));
    dart.setLibraryUri(_StateNotifierStateProviderState, I[9]);
    return _StateNotifierStateProviderState;
  });
  state_notifier_provider._StateNotifierStateProviderState = state_notifier_provider._StateNotifierStateProviderState$();
  dart.addTypeTests(state_notifier_provider._StateNotifierStateProviderState, _is__StateNotifierStateProviderState_default);
  const _is_StateNotifierProviderFamily_default = Symbol('_is_StateNotifierProviderFamily_default');
  state_notifier_provider.StateNotifierProviderFamily$ = dart.generic((T, A) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ProviderReferenceLAndALToTL = () => (ProviderReferenceLAndALToTL = dart.constFn(dart.fnType(TL(), [T$.ProviderReferenceL(), AL()])))();
    var ProviderReferenceLAndALToLTL = () => (ProviderReferenceLAndALToLTL = dart.constFn(dart.legacy(ProviderReferenceLAndALToTL())))();
    var StateNotifierProviderOfTL = () => (StateNotifierProviderOfTL = dart.constFn(state_notifier_provider.StateNotifierProvider$(TL())))();
    var ProviderReferenceLToTL = () => (ProviderReferenceLToTL = dart.constFn(dart.fnType(TL(), [T$.ProviderReferenceL()])))();
    var AL = () => (AL = dart.constFn(dart.legacy(A)))();
    class StateNotifierProviderFamily extends framework.Family$(dart.legacy(T), dart.legacy(T), dart.legacy(A), dart.legacy(framework.ProviderReference), dart.legacy(state_notifier_provider.StateNotifierProvider$(dart.legacy(T)))) {
      create(value, builder, name) {
        AL().as(value);
        ProviderReferenceLAndALToLTL().as(builder);
        return new (StateNotifierProviderOfTL()).new(dart.fn(ref => builder(ref, value), ProviderReferenceLToTL()), {name: name});
      }
    }
    (StateNotifierProviderFamily.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      StateNotifierProviderFamily.__proto__.new.call(this, create, name);
      ;
    }).prototype = StateNotifierProviderFamily.prototype;
    dart.addTypeTests(StateNotifierProviderFamily);
    StateNotifierProviderFamily.prototype[_is_StateNotifierProviderFamily_default] = true;
    dart.addTypeCaches(StateNotifierProviderFamily);
    dart.setMethodSignature(StateNotifierProviderFamily, () => ({
      __proto__: dart.getMethods(StateNotifierProviderFamily.__proto__),
      create: dart.fnType(dart.legacy(state_notifier_provider.StateNotifierProvider$(dart.legacy(T))), [dart.legacy(core.Object), dart.legacy(core.Object), dart.legacy(core.String)])
    }));
    dart.setLibraryUri(StateNotifierProviderFamily, I[9]);
    return StateNotifierProviderFamily;
  });
  state_notifier_provider.StateNotifierProviderFamily = state_notifier_provider.StateNotifierProviderFamily$();
  dart.addTypeTests(state_notifier_provider.StateNotifierProviderFamily, _is_StateNotifierProviderFamily_default);
  const _is_AutoDisposeStateNotifierProvider_default = Symbol('_is_AutoDisposeStateNotifierProvider_default');
  state_notifier_provider.AutoDisposeStateNotifierProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var AutoDisposeProviderReferenceLToTL = () => (AutoDisposeProviderReferenceLToTL = dart.constFn(dart.fnType(TL(), [T$.AutoDisposeProviderReferenceL()])))();
    class AutoDisposeStateNotifierProvider extends provider.AutoDisposeProvider$(dart.legacy(T)) {}
    (AutoDisposeStateNotifierProvider.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      this[_state] = null;
      AutoDisposeStateNotifierProvider.__proto__.new.call(this, dart.fn(ref => {
        let controller = create(ref);
        ref.onDispose(dart.bind(controller, 'dispose'));
        return controller;
      }, AutoDisposeProviderReferenceLToTL()), {name: name});
      ;
    }).prototype = AutoDisposeStateNotifierProvider.prototype;
    dart.addTypeTests(AutoDisposeStateNotifierProvider);
    AutoDisposeStateNotifierProvider.prototype[_is_AutoDisposeStateNotifierProvider_default] = true;
    dart.addTypeCaches(AutoDisposeStateNotifierProvider);
    dart.setLibraryUri(AutoDisposeStateNotifierProvider, I[9]);
    dart.setFieldSignature(AutoDisposeStateNotifierProvider, () => ({
      __proto__: dart.getFields(AutoDisposeStateNotifierProvider.__proto__),
      [_state]: dart.fieldType(dart.legacy(state_notifier_provider.AutoDisposeStateNotifierStateProvider$(dart.legacy(core.Object))))
    }));
    return AutoDisposeStateNotifierProvider;
  });
  state_notifier_provider.AutoDisposeStateNotifierProvider = state_notifier_provider.AutoDisposeStateNotifierProvider$();
  dart.defineLazy(state_notifier_provider.AutoDisposeStateNotifierProvider, {
    /*state_notifier_provider.AutoDisposeStateNotifierProvider.family*/get family() {
      return C[11] || CT.C11;
    }
  }, true);
  dart.addTypeTests(state_notifier_provider.AutoDisposeStateNotifierProvider, _is_AutoDisposeStateNotifierProvider_default);
  const _is_AutoDisposeStateNotifierStateProvider_default = Symbol('_is_AutoDisposeStateNotifierStateProvider_default');
  state_notifier_provider.AutoDisposeStateNotifierStateProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StateNotifierOfTL = () => (StateNotifierOfTL = dart.constFn(state_notifier.StateNotifier$(TL())))();
    var StateNotifierLOfTL = () => (StateNotifierLOfTL = dart.constFn(dart.legacy(StateNotifierOfTL())))();
    var AutoDisposeProviderReferenceLToStateNotifierLOfTL = () => (AutoDisposeProviderReferenceLToStateNotifierLOfTL = dart.constFn(dart.fnType(StateNotifierLOfTL(), [T$.AutoDisposeProviderReferenceL()])))();
    var _AutoDisposeStateNotifierStateProviderStateOfTL = () => (_AutoDisposeStateNotifierStateProviderStateOfTL = dart.constFn(state_notifier_provider._AutoDisposeStateNotifierStateProviderState$(TL())))();
    class AutoDisposeStateNotifierStateProvider extends framework.AutoDisposeProviderBase$(dart.legacy(state_notifier.StateNotifier$(dart.legacy(T))), dart.legacy(T)) {
      createState() {
        return new (_AutoDisposeStateNotifierStateProviderStateOfTL()).new();
      }
    }
    (AutoDisposeStateNotifierStateProvider.__ = function(provider) {
      AutoDisposeStateNotifierStateProvider.__proto__.new.call(this, dart.fn(ref => ref.watch(StateNotifierLOfTL(), provider), AutoDisposeProviderReferenceLToStateNotifierLOfTL()), provider.name != null ? dart.str(provider.name) + ".state" : null);
      ;
    }).prototype = AutoDisposeStateNotifierStateProvider.prototype;
    dart.addTypeTests(AutoDisposeStateNotifierStateProvider);
    AutoDisposeStateNotifierStateProvider.prototype[_is_AutoDisposeStateNotifierStateProvider_default] = true;
    dart.addTypeCaches(AutoDisposeStateNotifierStateProvider);
    dart.setMethodSignature(AutoDisposeStateNotifierStateProvider, () => ({
      __proto__: dart.getMethods(AutoDisposeStateNotifierStateProvider.__proto__),
      createState: dart.fnType(dart.legacy(state_notifier_provider._AutoDisposeStateNotifierStateProviderState$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(AutoDisposeStateNotifierStateProvider, I[9]);
    return AutoDisposeStateNotifierStateProvider;
  });
  state_notifier_provider.AutoDisposeStateNotifierStateProvider = state_notifier_provider.AutoDisposeStateNotifierStateProvider$();
  dart.addTypeTests(state_notifier_provider.AutoDisposeStateNotifierStateProvider, _is_AutoDisposeStateNotifierStateProvider_default);
  const _is__AutoDisposeStateNotifierStateProviderState_default = Symbol('_is__AutoDisposeStateNotifierStateProviderState_default');
  state_notifier_provider._AutoDisposeStateNotifierStateProviderState$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StateNotifierOfTL = () => (StateNotifierOfTL = dart.constFn(state_notifier.StateNotifier$(TL())))();
    var StateNotifierLOfTL = () => (StateNotifierLOfTL = dart.constFn(dart.legacy(StateNotifierOfTL())))();
    const ProviderStateBase__StateNotifierStateProviderStateMixin$36 = class ProviderStateBase__StateNotifierStateProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(state_notifier.StateNotifier$(dart.legacy(T))), dart.legacy(T)) {};
    (ProviderStateBase__StateNotifierStateProviderStateMixin$36.new = function() {
      state_notifier_provider._StateNotifierStateProviderStateMixin$(dart.legacy(T))[dart.mixinNew].call(this);
      ProviderStateBase__StateNotifierStateProviderStateMixin$36.__proto__.new.call(this);
    }).prototype = ProviderStateBase__StateNotifierStateProviderStateMixin$36.prototype;
    dart.applyMixin(ProviderStateBase__StateNotifierStateProviderStateMixin$36, state_notifier_provider._StateNotifierStateProviderStateMixin$(dart.legacy(T)));
    class _AutoDisposeStateNotifierStateProviderState extends ProviderStateBase__StateNotifierStateProviderStateMixin$36 {
      get removeListener() {
        return super.removeListener;
      }
      set removeListener(value) {
        return super.removeListener = value;
      }
      valueChanged(opts) {
        let previous = opts && 'previous' in opts ? opts.previous : null;
        StateNotifierLOfTL().as(previous);
        return super.valueChanged({previous: previous});
      }
      [_listener](value) {
        return super[_listener](value);
      }
      dispose() {
        return super.dispose();
      }
    }
    (_AutoDisposeStateNotifierStateProviderState.new = function() {
      _AutoDisposeStateNotifierStateProviderState.__proto__.new.call(this);
      ;
    }).prototype = _AutoDisposeStateNotifierStateProviderState.prototype;
    dart.addTypeTests(_AutoDisposeStateNotifierStateProviderState);
    _AutoDisposeStateNotifierStateProviderState.prototype[_is__AutoDisposeStateNotifierStateProviderState_default] = true;
    dart.addTypeCaches(_AutoDisposeStateNotifierStateProviderState);
    dart.setMethodSignature(_AutoDisposeStateNotifierStateProviderState, () => ({
      __proto__: dart.getMethods(_AutoDisposeStateNotifierStateProviderState.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {}),
      [_listener]: dart.fnType(dart.void, [dart.legacy(T)])
    }));
    dart.setGetterSignature(_AutoDisposeStateNotifierStateProviderState, () => ({
      __proto__: dart.getGetters(_AutoDisposeStateNotifierStateProviderState.__proto__),
      removeListener: dart.legacy(dart.fnType(dart.void, []))
    }));
    dart.setSetterSignature(_AutoDisposeStateNotifierStateProviderState, () => ({
      __proto__: dart.getSetters(_AutoDisposeStateNotifierStateProviderState.__proto__),
      removeListener: dart.legacy(dart.fnType(dart.void, []))
    }));
    dart.setLibraryUri(_AutoDisposeStateNotifierStateProviderState, I[9]);
    return _AutoDisposeStateNotifierStateProviderState;
  });
  state_notifier_provider._AutoDisposeStateNotifierStateProviderState = state_notifier_provider._AutoDisposeStateNotifierStateProviderState$();
  dart.addTypeTests(state_notifier_provider._AutoDisposeStateNotifierStateProviderState, _is__AutoDisposeStateNotifierStateProviderState_default);
  const _is_AutoDisposeStateNotifierProviderFamily_default = Symbol('_is_AutoDisposeStateNotifierProviderFamily_default');
  state_notifier_provider.AutoDisposeStateNotifierProviderFamily$ = dart.generic((T, A) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var AutoDisposeProviderReferenceLAndALToTL = () => (AutoDisposeProviderReferenceLAndALToTL = dart.constFn(dart.fnType(TL(), [T$.AutoDisposeProviderReferenceL(), AL()])))();
    var AutoDisposeProviderReferenceLAndALToLTL = () => (AutoDisposeProviderReferenceLAndALToLTL = dart.constFn(dart.legacy(AutoDisposeProviderReferenceLAndALToTL())))();
    var AutoDisposeStateNotifierProviderOfTL = () => (AutoDisposeStateNotifierProviderOfTL = dart.constFn(state_notifier_provider.AutoDisposeStateNotifierProvider$(TL())))();
    var AutoDisposeProviderReferenceLToTL = () => (AutoDisposeProviderReferenceLToTL = dart.constFn(dart.fnType(TL(), [T$.AutoDisposeProviderReferenceL()])))();
    var AL = () => (AL = dart.constFn(dart.legacy(A)))();
    class AutoDisposeStateNotifierProviderFamily extends framework.Family$(dart.legacy(T), dart.legacy(T), dart.legacy(A), dart.legacy(framework.AutoDisposeProviderReference), dart.legacy(state_notifier_provider.AutoDisposeStateNotifierProvider$(dart.legacy(T)))) {
      create(value, builder, name) {
        AL().as(value);
        AutoDisposeProviderReferenceLAndALToLTL().as(builder);
        return new (AutoDisposeStateNotifierProviderOfTL()).new(dart.fn(ref => builder(ref, value), AutoDisposeProviderReferenceLToTL()), {name: name});
      }
    }
    (AutoDisposeStateNotifierProviderFamily.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      AutoDisposeStateNotifierProviderFamily.__proto__.new.call(this, create, name);
      ;
    }).prototype = AutoDisposeStateNotifierProviderFamily.prototype;
    dart.addTypeTests(AutoDisposeStateNotifierProviderFamily);
    AutoDisposeStateNotifierProviderFamily.prototype[_is_AutoDisposeStateNotifierProviderFamily_default] = true;
    dart.addTypeCaches(AutoDisposeStateNotifierProviderFamily);
    dart.setMethodSignature(AutoDisposeStateNotifierProviderFamily, () => ({
      __proto__: dart.getMethods(AutoDisposeStateNotifierProviderFamily.__proto__),
      create: dart.fnType(dart.legacy(state_notifier_provider.AutoDisposeStateNotifierProvider$(dart.legacy(T))), [dart.legacy(core.Object), dart.legacy(core.Object), dart.legacy(core.String)])
    }));
    dart.setLibraryUri(AutoDisposeStateNotifierProviderFamily, I[9]);
    return AutoDisposeStateNotifierProviderFamily;
  });
  state_notifier_provider.AutoDisposeStateNotifierProviderFamily = state_notifier_provider.AutoDisposeStateNotifierProviderFamily$();
  dart.addTypeTests(state_notifier_provider.AutoDisposeStateNotifierProviderFamily, _is_AutoDisposeStateNotifierProviderFamily_default);
  state_notifier_provider['AutoDisposeStateNotifierStateProviderX|get#state'] = function AutoDisposeStateNotifierStateProviderX$124get$35state(Value, $this) {
    let t7;
    t7 = $this;
    t7[_state] == null ? t7[_state] = new (state_notifier_provider.AutoDisposeStateNotifierStateProvider$(dart.legacy(Value))).__($this) : null;
    return dart.legacy(state_notifier_provider.AutoDisposeStateNotifierStateProvider$(dart.legacy(Value))).as($this[_state]);
  };
  state_notifier_provider['StateNotifierStateProviderX|get#state'] = function StateNotifierStateProviderX$124get$35state(Value, $this) {
    let t8;
    t8 = $this;
    t8[_state] == null ? t8[_state] = new (state_notifier_provider.StateNotifierStateProvider$(dart.legacy(Value))).__($this) : null;
    return dart.legacy(state_notifier_provider.StateNotifierStateProvider$(dart.legacy(Value))).as($this[_state]);
  };
  const _is__ProviderStateMixin_default = Symbol('_is__ProviderStateMixin_default');
  provider._ProviderStateMixin$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class _ProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(T), dart.legacy(T)) {}
    _ProviderStateMixin[dart.mixinOn] = ProviderStateBase => class _ProviderStateMixin extends ProviderStateBase {
      valueChanged(opts) {
        let previous = opts && 'previous' in opts ? opts.previous : null;
        TL().as(previous);
        if (!dart.equals(this.createdValue, this.exposedValue)) {
          this.exposedValue = this.createdValue;
        }
      }
    };
    dart.addTypeTests(_ProviderStateMixin);
    _ProviderStateMixin.prototype[_is__ProviderStateMixin_default] = true;
    dart.addTypeCaches(_ProviderStateMixin);
    _ProviderStateMixin[dart.implements] = () => [framework.ProviderStateBase$(dart.legacy(T), dart.legacy(T))];
    dart.setMethodSignature(_ProviderStateMixin, () => ({
      __proto__: dart.getMethods(_ProviderStateMixin.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {})
    }));
    dart.setLibraryUri(_ProviderStateMixin, I[1]);
    return _ProviderStateMixin;
  });
  provider._ProviderStateMixin = provider._ProviderStateMixin$();
  dart.addTypeTests(provider._ProviderStateMixin, _is__ProviderStateMixin_default);
  const _is__ProviderState_default = Symbol('_is__ProviderState_default');
  provider._ProviderState$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    const ProviderStateBase__ProviderStateMixin$36 = class ProviderStateBase__ProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(T), dart.legacy(T)) {};
    (ProviderStateBase__ProviderStateMixin$36.new = function() {
      ProviderStateBase__ProviderStateMixin$36.__proto__.new.call(this);
    }).prototype = ProviderStateBase__ProviderStateMixin$36.prototype;
    dart.applyMixin(ProviderStateBase__ProviderStateMixin$36, provider._ProviderStateMixin$(dart.legacy(T)));
    class _ProviderState extends ProviderStateBase__ProviderStateMixin$36 {
      valueChanged(opts) {
        let previous = opts && 'previous' in opts ? opts.previous : null;
        TL().as(previous);
        return super.valueChanged({previous: previous});
      }
    }
    (_ProviderState.new = function() {
      _ProviderState.__proto__.new.call(this);
      ;
    }).prototype = _ProviderState.prototype;
    dart.addTypeTests(_ProviderState);
    _ProviderState.prototype[_is__ProviderState_default] = true;
    dart.addTypeCaches(_ProviderState);
    dart.setMethodSignature(_ProviderState, () => ({
      __proto__: dart.getMethods(_ProviderState.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {})
    }));
    dart.setLibraryUri(_ProviderState, I[1]);
    return _ProviderState;
  });
  provider._ProviderState = provider._ProviderState$();
  dart.addTypeTests(provider._ProviderState, _is__ProviderState_default);
  const _is_ProviderFamily_default = Symbol('_is_ProviderFamily_default');
  provider.ProviderFamily$ = dart.generic((T, A) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ProviderReferenceLAndALToTL = () => (ProviderReferenceLAndALToTL = dart.constFn(dart.fnType(TL(), [T$.ProviderReferenceL(), AL()])))();
    var ProviderReferenceLAndALToLTL = () => (ProviderReferenceLAndALToLTL = dart.constFn(dart.legacy(ProviderReferenceLAndALToTL())))();
    var ProviderOfTL = () => (ProviderOfTL = dart.constFn(provider.Provider$(TL())))();
    var ProviderReferenceLToTL = () => (ProviderReferenceLToTL = dart.constFn(dart.fnType(TL(), [T$.ProviderReferenceL()])))();
    var AL = () => (AL = dart.constFn(dart.legacy(A)))();
    class ProviderFamily extends framework.Family$(dart.legacy(T), dart.legacy(T), dart.legacy(A), dart.legacy(framework.ProviderReference), dart.legacy(provider.Provider$(dart.legacy(T)))) {
      create(value, builder, name) {
        AL().as(value);
        ProviderReferenceLAndALToLTL().as(builder);
        return new (ProviderOfTL()).new(dart.fn(ref => builder(ref, value), ProviderReferenceLToTL()), {name: name});
      }
    }
    (ProviderFamily.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      ProviderFamily.__proto__.new.call(this, create, name);
      ;
    }).prototype = ProviderFamily.prototype;
    dart.addTypeTests(ProviderFamily);
    ProviderFamily.prototype[_is_ProviderFamily_default] = true;
    dart.addTypeCaches(ProviderFamily);
    dart.setMethodSignature(ProviderFamily, () => ({
      __proto__: dart.getMethods(ProviderFamily.__proto__),
      create: dart.fnType(dart.legacy(provider.Provider$(dart.legacy(T))), [dart.legacy(core.Object), dart.legacy(core.Object), dart.legacy(core.String)])
    }));
    dart.setLibraryUri(ProviderFamily, I[1]);
    return ProviderFamily;
  });
  provider.ProviderFamily = provider.ProviderFamily$();
  dart.addTypeTests(provider.ProviderFamily, _is_ProviderFamily_default);
  const _is__AutoDisposeProviderState_default = Symbol('_is__AutoDisposeProviderState_default');
  provider._AutoDisposeProviderState$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    const ProviderStateBase__ProviderStateMixin$36 = class ProviderStateBase__ProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(T), dart.legacy(T)) {};
    (ProviderStateBase__ProviderStateMixin$36.new = function() {
      ProviderStateBase__ProviderStateMixin$36.__proto__.new.call(this);
    }).prototype = ProviderStateBase__ProviderStateMixin$36.prototype;
    dart.applyMixin(ProviderStateBase__ProviderStateMixin$36, provider._ProviderStateMixin$(dart.legacy(T)));
    class _AutoDisposeProviderState extends ProviderStateBase__ProviderStateMixin$36 {
      valueChanged(opts) {
        let previous = opts && 'previous' in opts ? opts.previous : null;
        TL().as(previous);
        return super.valueChanged({previous: previous});
      }
    }
    (_AutoDisposeProviderState.new = function() {
      _AutoDisposeProviderState.__proto__.new.call(this);
      ;
    }).prototype = _AutoDisposeProviderState.prototype;
    dart.addTypeTests(_AutoDisposeProviderState);
    _AutoDisposeProviderState.prototype[_is__AutoDisposeProviderState_default] = true;
    dart.addTypeCaches(_AutoDisposeProviderState);
    dart.setMethodSignature(_AutoDisposeProviderState, () => ({
      __proto__: dart.getMethods(_AutoDisposeProviderState.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {})
    }));
    dart.setLibraryUri(_AutoDisposeProviderState, I[1]);
    return _AutoDisposeProviderState;
  });
  provider._AutoDisposeProviderState = provider._AutoDisposeProviderState$();
  dart.addTypeTests(provider._AutoDisposeProviderState, _is__AutoDisposeProviderState_default);
  const _is_AutoDisposeProviderFamily_default = Symbol('_is_AutoDisposeProviderFamily_default');
  provider.AutoDisposeProviderFamily$ = dart.generic((T, A) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var AutoDisposeProviderReferenceLAndALToTL = () => (AutoDisposeProviderReferenceLAndALToTL = dart.constFn(dart.fnType(TL(), [T$.AutoDisposeProviderReferenceL(), AL()])))();
    var AutoDisposeProviderReferenceLAndALToLTL = () => (AutoDisposeProviderReferenceLAndALToLTL = dart.constFn(dart.legacy(AutoDisposeProviderReferenceLAndALToTL())))();
    var AutoDisposeProviderOfTL = () => (AutoDisposeProviderOfTL = dart.constFn(provider.AutoDisposeProvider$(TL())))();
    var AutoDisposeProviderReferenceLToTL = () => (AutoDisposeProviderReferenceLToTL = dart.constFn(dart.fnType(TL(), [T$.AutoDisposeProviderReferenceL()])))();
    var AL = () => (AL = dart.constFn(dart.legacy(A)))();
    class AutoDisposeProviderFamily extends framework.Family$(dart.legacy(T), dart.legacy(T), dart.legacy(A), dart.legacy(framework.AutoDisposeProviderReference), dart.legacy(provider.AutoDisposeProvider$(dart.legacy(T)))) {
      create(value, builder, name) {
        AL().as(value);
        AutoDisposeProviderReferenceLAndALToLTL().as(builder);
        return new (AutoDisposeProviderOfTL()).new(dart.fn(ref => builder(ref, value), AutoDisposeProviderReferenceLToTL()), {name: name});
      }
    }
    (AutoDisposeProviderFamily.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      AutoDisposeProviderFamily.__proto__.new.call(this, create, name);
      ;
    }).prototype = AutoDisposeProviderFamily.prototype;
    dart.addTypeTests(AutoDisposeProviderFamily);
    AutoDisposeProviderFamily.prototype[_is_AutoDisposeProviderFamily_default] = true;
    dart.addTypeCaches(AutoDisposeProviderFamily);
    dart.setMethodSignature(AutoDisposeProviderFamily, () => ({
      __proto__: dart.getMethods(AutoDisposeProviderFamily.__proto__),
      create: dart.fnType(dart.legacy(provider.AutoDisposeProvider$(dart.legacy(T))), [dart.legacy(core.Object), dart.legacy(core.Object), dart.legacy(core.String)])
    }));
    dart.setLibraryUri(AutoDisposeProviderFamily, I[1]);
    return AutoDisposeProviderFamily;
  });
  provider.AutoDisposeProviderFamily = provider.AutoDisposeProviderFamily$();
  dart.addTypeTests(provider.AutoDisposeProviderFamily, _is_AutoDisposeProviderFamily_default);
  var _isFirstBuild = dart.privateName(select, "_isFirstBuild");
  var _sub = dart.privateName(select, "_sub");
  var _lastOutput = dart.privateName(select, "_lastOutput");
  var _selector = dart.privateName(select, "_selector");
  var _didChange = dart.privateName(select, "_didChange");
  var _listener$ = dart.privateName(select, "_listener");
  var _listener$0 = dart.privateName(framework, "_listener");
  const _is_SelectorSubscription_default = Symbol('_is_SelectorSubscription_default');
  select.SelectorSubscription$ = dart.generic((Input, Output) => {
    var InputL = () => (InputL = dart.constFn(dart.legacy(Input)))();
    var ProviderSubscriptionOfInputL = () => (ProviderSubscriptionOfInputL = dart.constFn(framework.ProviderSubscription$(InputL())))();
    var ProviderSubscriptionLOfInputL = () => (ProviderSubscriptionLOfInputL = dart.constFn(dart.legacy(ProviderSubscriptionOfInputL())))();
    var ProviderSubscriptionLOfInputLTovoid = () => (ProviderSubscriptionLOfInputLTovoid = dart.constFn(dart.fnType(dart.void, [ProviderSubscriptionLOfInputL()])))();
    var ProviderSelectorOfInputL$OutputL = () => (ProviderSelectorOfInputL$OutputL = dart.constFn(framework.ProviderSelector$(InputL(), OutputL())))();
    var ProviderSelectorLOfInputL$OutputL = () => (ProviderSelectorLOfInputL$OutputL = dart.constFn(dart.legacy(ProviderSelectorOfInputL$OutputL())))();
    var InputLToOutputL = () => (InputLToOutputL = dart.constFn(dart.fnType(OutputL(), [InputL()])))();
    var InputLToLOutputL = () => (InputLToLOutputL = dart.constFn(dart.legacy(InputLToOutputL())))();
    var OutputL = () => (OutputL = dart.constFn(dart.legacy(Output)))();
    var ProviderListenableOfOutputL = () => (ProviderListenableOfOutputL = dart.constFn(framework.ProviderListenable$(OutputL())))();
    var ProviderListenableLOfOutputL = () => (ProviderListenableLOfOutputL = dart.constFn(dart.legacy(ProviderListenableOfOutputL())))();
    var _ListenerOfOutputL = () => (_ListenerOfOutputL = dart.constFn(framework._Listener$(OutputL())))();
    var _ListenerLOfOutputL = () => (_ListenerLOfOutputL = dart.constFn(dart.legacy(_ListenerOfOutputL())))();
    class SelectorSubscription extends core.Object {
      updateSelector(providerListenable) {
        let t8;
        ProviderListenableLOfOutputL().as(providerListenable);
        this[_selector] = InputLToLOutputL().as(ProviderSelectorLOfInputL$OutputL().as(providerListenable).selector);
        this[_lastOutput] = (t8 = this[_sub].read(), this[_selector](t8));
      }
      flush() {
        let t8, t8$;
        if (dart.test(this[_sub].flush())) {
          let newOutput = (t8 = this[_sub].read(), this[_selector](t8));
          if (dart.test(this[_isFirstBuild]) || !dart.equals(this[_lastOutput], newOutput)) {
            this[_lastOutput] = newOutput;
            if (!dart.test(this[_isFirstBuild])) {
              t8$ = this[_didChange];
              t8$ == null ? null : t8$(this);
            }
            this[_isFirstBuild] = false;
            return true;
          }
        }
        return false;
      }
      read() {
        this.flush();
        return this[_lastOutput];
      }
      close() {
        return this[_sub].close();
      }
      get [_listener$0]() {
        return _ListenerLOfOutputL().as(this.noSuchMethod(new core._Invocation.getter(C[12] || CT.C12)));
      }
    }
    (SelectorSubscription.new = function(opts) {
      let container = opts && 'container' in opts ? opts.container : null;
      let selector = opts && 'selector' in opts ? opts.selector : null;
      let provider = opts && 'provider' in opts ? opts.provider : null;
      let mayHaveChanged = opts && 'mayHaveChanged' in opts ? opts.mayHaveChanged : null;
      let didChange = opts && 'didChange' in opts ? opts.didChange : null;
      this[_isFirstBuild] = true;
      this[_sub] = null;
      this[_lastOutput] = null;
      this[_selector] = selector;
      this[_didChange] = didChange;
      this[_sub] = container.listen(InputL(), provider, {mayHaveChanged: dart.fn(_ => mayHaveChanged(this), ProviderSubscriptionLOfInputLTovoid())});
    }).prototype = SelectorSubscription.prototype;
    dart.addTypeTests(SelectorSubscription);
    SelectorSubscription.prototype[_is_SelectorSubscription_default] = true;
    dart.addTypeCaches(SelectorSubscription);
    SelectorSubscription[dart.implements] = () => [framework.ProviderSubscription$(dart.legacy(Output))];
    dart.setMethodSignature(SelectorSubscription, () => ({
      __proto__: dart.getMethods(SelectorSubscription.__proto__),
      updateSelector: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      flush: dart.fnType(dart.legacy(core.bool), []),
      read: dart.fnType(dart.legacy(Output), []),
      close: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(SelectorSubscription, () => ({
      __proto__: dart.getGetters(SelectorSubscription.__proto__),
      [_listener$0]: dart.legacy(framework._Listener$(dart.legacy(Output)))
    }));
    dart.setLibraryUri(SelectorSubscription, I[10]);
    dart.setFieldSignature(SelectorSubscription, () => ({
      __proto__: dart.getFields(SelectorSubscription.__proto__),
      [_didChange]: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(select.SelectorSubscription$(dart.legacy(Input), dart.legacy(Output)))]))),
      [_isFirstBuild]: dart.fieldType(dart.legacy(core.bool)),
      [_sub]: dart.fieldType(dart.legacy(framework.ProviderSubscription$(dart.legacy(Input)))),
      [_lastOutput]: dart.fieldType(dart.legacy(Output)),
      [_selector]: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(Output), [dart.legacy(Input)])))
    }));
    return SelectorSubscription;
  });
  select.SelectorSubscription = select.SelectorSubscription$();
  dart.addTypeTests(select.SelectorSubscription, _is_SelectorSubscription_default);
  var _maintainState = dart.privateName(framework, "_maintainState");
  var _origin = dart.privateName(framework, "ProviderElement._origin");
  var _provider$0 = dart.privateName(framework, "ProviderElement._provider");
  var state = dart.privateName(framework, "ProviderElement.state");
  var _container = dart.privateName(framework, "_container");
  var _dependents = dart.privateName(framework, "_dependents");
  var _listeners = dart.privateName(framework, "_listeners");
  var _subscriptions = dart.privateName(framework, "_subscriptions");
  var _previousSubscriptions = dart.privateName(framework, "_previousSubscriptions");
  var _onDisposeListeners = dart.privateName(framework, "_onDisposeListeners");
  var _notificationCount = dart.privateName(framework, "_notificationCount");
  var _notifyDidChangeLastNotificationCount = dart.privateName(framework, "_notifyDidChangeLastNotificationCount");
  var _debugIsFlushing = dart.privateName(framework, "_debugIsFlushing");
  var _dirty = dart.privateName(framework, "_dirty");
  var _dependencyMayHaveChanged = dart.privateName(framework, "_dependencyMayHaveChanged");
  var _mustRecomputeState = dart.privateName(framework, "_mustRecomputeState");
  var _mounted = dart.privateName(framework, "_mounted");
  var _didMount = dart.privateName(framework, "_didMount");
  var _exception = dart.privateName(framework, "_exception");
  var _origin$ = dart.privateName(framework, "_origin");
  var _provider$1 = dart.privateName(framework, "_provider");
  var _debugAssertCanDependOn = dart.privateName(framework, "_debugAssertCanDependOn");
  var _markDependencyMayHaveChanged = dart.privateName(framework, "_markDependencyMayHaveChanged");
  var _runOnDispose = dart.privateName(framework, "_runOnDispose");
  var _runStateCreate = dart.privateName(framework, "_runStateCreate");
  var _notifyDidChange = dart.privateName(framework, "_notifyDidChange");
  var _observers = dart.privateName(framework, "_observers");
  const _is_ProviderElement_default = Symbol('_is_ProviderElement_default');
  framework.ProviderElement$ = dart.generic((Created, Listened) => {
    var CreatedL = () => (CreatedL = dart.constFn(dart.legacy(Created)))();
    var ProviderBaseOfCreatedL$ListenedL = () => (ProviderBaseOfCreatedL$ListenedL = dart.constFn(framework.ProviderBase$(CreatedL(), ListenedL())))();
    var ProviderBaseLOfCreatedL$ListenedL = () => (ProviderBaseLOfCreatedL$ListenedL = dart.constFn(dart.legacy(ProviderBaseOfCreatedL$ListenedL())))();
    var ListenedL = () => (ListenedL = dart.constFn(dart.legacy(Listened)))();
    var _ListenerOfListenedL = () => (_ListenerOfListenedL = dart.constFn(framework._Listener$(ListenedL())))();
    var _ListenerLOfListenedL = () => (_ListenerLOfListenedL = dart.constFn(dart.legacy(_ListenerOfListenedL())))();
    var LinkedListOf_ListenerLOfListenedL = () => (LinkedListOf_ListenerLOfListenedL = dart.constFn(collection.LinkedList$(_ListenerLOfListenedL())))();
    var ProviderSubscriptionOfListenedL = () => (ProviderSubscriptionOfListenedL = dart.constFn(framework.ProviderSubscription$(ListenedL())))();
    class ProviderElement extends core.Object {
      get [_origin$]() {
        return this[_origin];
      }
      set [_origin$](value) {
        this[_origin] = ProviderBaseLOfCreatedL$ListenedL().as(value);
      }
      get [_provider$1]() {
        return this[_provider$0];
      }
      set [_provider$1](value) {
        this[_provider$0] = ProviderBaseLOfCreatedL$ListenedL().as(value);
      }
      get state() {
        return this[state];
      }
      set state(value) {
        super.state = value;
      }
      get origin() {
        return this[_origin$];
      }
      get provider() {
        return this[_provider$1];
      }
      get container() {
        return this[_container];
      }
      get dependents() {
        return (() => {
          let t8 = T$.LinkedHashSetOfProviderElementL().new();
          let t9 = this[_dependents];
          if (t9 != null) for (let t11 of t9) {
            let t10 = T$.ProviderElementL().as(t11);
            t8.add(t10);
          }
          return t8;
        })();
      }
      get hasListeners() {
        return this[_listeners][$isNotEmpty];
      }
      get mounted() {
        return this[_mounted];
      }
      onDispose(listener) {
        if (!dart.test(this[_mounted])) {
          dart.throw(new core.StateError.new("Cannot call onDispose after a provider was dispose"));
        }
        this[_onDisposeListeners] == null ? this[_onDisposeListeners] = new (T$.DoubleLinkedQueueOfVoidToLvoid()).new() : null;
        this[_onDisposeListeners].add(listener);
      }
      [_debugAssertCanDependOn](provider) {
        if (!dart.test(dart.fn(() => {
          let queue = new (T$.ListQueueOfProviderElementL()).new();
          if (this[_dependents] != null) {
            queue.addAll(this[_dependents]);
          }
          while (dart.test(queue[$isNotEmpty])) {
            let current = queue.removeFirst();
            if (current[_dependents] != null) {
              queue.addAll(current.dependents);
            }
            if (dart.equals(current.origin, provider)) {
              dart.throw(new framework.CircularDependencyError.__());
            }
          }
          return true;
        }, T$.VoidToboolL())())) dart.assertFailed("", I[4], 559, 12, "() {\n      final queue = Queue<ProviderElement>();\n      if (_dependents != null) {\n        queue.addAll(_dependents);\n      }\n\n      while (queue.isNotEmpty) {\n        final current = queue.removeFirst();\n        if (current._dependents != null) {\n          queue.addAll(current.dependents);\n        }\n\n        if (current.origin == provider) {\n          throw CircularDependencyError._();\n        }\n      }\n\n      return true;\n    }()");
        return true;
      }
      read(T, provider) {
        if (!dart.test(this[_debugAssertCanDependOn](provider))) dart.assertFailed("", I[4], 583, 12, "_debugAssertCanDependOn(provider)");
        return this[_container].read(dart.legacy(T), provider);
      }
      watch(T, provider) {
        if (!dart.test(this[_debugAssertCanDependOn](provider))) dart.assertFailed("", I[4], 589, 12, "_debugAssertCanDependOn(provider)");
        let element = this[_container].readProviderElement(T$.ObjectL(), dart.legacy(T), provider);
        let sub = dart.legacy(framework.ProviderSubscription$(dart.legacy(T))).as(this[_subscriptions][$putIfAbsent](element, dart.fn(() => {
          let t12, t12$;
          let previousSub = (t12 = this[_previousSubscriptions], t12 == null ? null : t12[$remove](element));
          if (previousSub != null) {
            return previousSub;
          }
          t12$ = element;
          t12$[_dependents] == null ? t12$[_dependents] = T$.LinkedHashSetOfProviderElementL().new() : null;
          element[_dependents].add(this);
          return element.listen({mayHaveChanged: dart.bind(this, _markDependencyMayHaveChanged)});
        }, T$.VoidToProviderSubscriptionL())));
        return sub.read();
      }
      [_markDependencyMayHaveChanged](sub) {
        if (!dart.test(this[_dependencyMayHaveChanged])) {
          this[_dependencyMayHaveChanged] = true;
          this.notifyMayHaveChanged();
        }
      }
      listen(opts) {
        let mayHaveChanged = opts && 'mayHaveChanged' in opts ? opts.mayHaveChanged : null;
        let didChange = opts && 'didChange' in opts ? opts.didChange : null;
        let sub = null;
        let entry = new (_ListenerOfListenedL()).new({mayHaveChanged: mayHaveChanged == null ? null : dart.fn(() => mayHaveChanged(sub), T$.VoidTovoid()), didChange: didChange == null ? null : dart.fn(() => didChange(sub), T$.VoidTovoid()), element: this});
        this[_listeners].add(entry);
        return sub = new (ProviderSubscriptionOfListenedL()).__(entry);
      }
      flush() {
        if (!dart.test(dart.fn(() => {
          this[_debugIsFlushing] = true;
          return true;
        }, T$.VoidToboolL())())) dart.assertFailed("", I[4], 636, 12, "() {\n      _debugIsFlushing = true;\n      return true;\n    }()");
        try {
          if (dart.test(this[_dependencyMayHaveChanged]) || dart.test(this[_mustRecomputeState])) {
            this[_dependencyMayHaveChanged] = false;
            let hasAnyDependencyChanged = this[_mustRecomputeState];
            for (let sub of this[_subscriptions][$values]) {
              if (dart.test(sub.flush())) {
                hasAnyDependencyChanged = true;
              }
            }
            if (dart.test(hasAnyDependencyChanged)) {
              this[_exception] = null;
              this[_runOnDispose]();
              this[_runStateCreate]();
            }
            this[_mustRecomputeState] = false;
          }
          this[_dirty] = false;
          if (this[_notifyDidChangeLastNotificationCount] != this[_notificationCount]) {
            this[_notifyDidChangeLastNotificationCount] = this[_notificationCount];
            this[_notifyDidChange]();
          }
          if (!!dart.test(this[_dirty])) dart.assertFailed("flush did not reset the dirty flag for " + dart.str(this.provider), I[4], 665, 14, "!_dirty");
          if (!!dart.test(this[_dependencyMayHaveChanged])) dart.assertFailed("flush did not reset the _dependencyMayHaveChanged flag for " + dart.str(this.provider), I[4], 667, 9, "!_dependencyMayHaveChanged");
        } finally {
          if (!dart.test(dart.fn(() => {
            this[_debugIsFlushing] = false;
            return true;
          }, T$.VoidToboolL())())) dart.assertFailed("", I[4], 671, 14, "() {\n        _debugIsFlushing = false;\n        return true;\n      }()");
        }
      }
      getExposedValue() {
        if (!!dart.test(this[_dependencyMayHaveChanged])) dart.assertFailed("Called getExposedValue without calling flush before", I[4], 683, 7, "!_dependencyMayHaveChanged");
        if (this[_exception] != null) {
          dart.throw(this[_exception]);
        }
        return this.state[_exposedValue];
      }
      [_debugMarkWillChange]() {
        if (!dart.test(dart.fn(() => {
          if (!dart.test(this[_debugIsFlushing])) {
            for (let vsync of this.container.debugVsyncs) {
              vsync();
            }
          }
          return true;
        }, T$.VoidToboolL())())) dart.assertFailed("", I[4], 693, 12, "() {\n      if (!_debugIsFlushing) {\n        for (final vsync in container.debugVsyncs) {\n          vsync();\n        }\n      }\n      return true;\n    }()");
      }
      markDidChange() {
        if (!dart.test(this[_didMount])) {
          return;
        }
        this[_notificationCount] = dart.notNull(this[_notificationCount]) + 1;
        this.notifyMayHaveChanged();
      }
      notifyMayHaveChanged() {
        if (!dart.test(dart.fn(() => {
          if (framework.ProviderElement._debugCurrentlyBuildingElement == null || dart.equals(framework.ProviderElement._debugCurrentlyBuildingElement, this)) {
            return true;
          }
          let parentsQueue = T$.DoubleLinkedQueueOfProviderElementL().from(this[_subscriptions][$keys]);
          while (dart.test(parentsQueue[$isNotEmpty])) {
            let parent = parentsQueue.removeFirst();
            if (dart.equals(parent, framework.ProviderElement._debugCurrentlyBuildingElement)) {
              return true;
            }
            parentsQueue.addAll(parent[_subscriptions][$keys]);
          }
          dart.throw(new core.AssertionError.new("The provider " + dart.str(this.provider) + " was marked as needing to be recomputed while creating " + dart.str(framework.ProviderElement._debugCurrentlyBuildingElement.provider) + ",\nbut " + dart.str(this.provider) + " does not depend on " + dart.str(framework.ProviderElement._debugCurrentlyBuildingElement.provider) + ".\n"));
        }, T$.VoidToboolL())())) dart.assertFailed("", I[4], 720, 12, "() {\n      if (_debugCurrentlyBuildingElement == null ||\n          _debugCurrentlyBuildingElement == this) {\n        return true;\n      }\n      final parentsQueue = DoubleLinkedQueue<ProviderElement>.from(\n        _subscriptions.keys,\n      );\n\n      while (parentsQueue.isNotEmpty) {\n        final parent = parentsQueue.removeFirst();\n        if (parent == _debugCurrentlyBuildingElement) {\n          return true;\n        }\n        parentsQueue.addAll(parent._subscriptions.keys);\n      }\n\n      throw AssertionError('''\nThe provider $provider was marked as needing to be recomputed while creating ${_debugCurrentlyBuildingElement.provider},\nbut $provider does not depend on ${_debugCurrentlyBuildingElement.provider}.\n''');\n    }()");
        if (!dart.test(this[_mounted])) {
          dart.throw(new core.StateError.new("Cannot call onDispose after a provider was dispose"));
        }
        if (dart.test(this[_dirty])) {
          return;
        }
        this[_dirty] = true;
        for (let listener of this[_listeners]) {
          if (listener.mayHaveChanged != null) {
            framework._runGuarded(listener.mayHaveChanged);
          }
        }
        if (dart.test(this[_didMount])) {
          for (let observer of this[_container][_observers]) {
            framework._runUnaryGuarded(ProviderBaseLOfCreatedL$ListenedL(), dart.void, dart.bind(observer, 'mayHaveChanged'), this[_origin$]);
          }
        }
      }
      [_notifyDidChange]() {
        for (let listener of this[_listeners]) {
          if (listener.didChange != null) {
            framework._runGuarded(listener.didChange);
          }
        }
        for (let observer of this[_container][_observers]) {
          framework._runBinaryGuarded(ProviderBaseLOfCreatedL$ListenedL(), ListenedL(), dart.bind(observer, 'didUpdateProvider'), this[_origin$], this.state[_exposedValue]);
        }
      }
      mayNeedDispose() {
      }
      mount() {
        this[_mounted] = true;
        this.state[_element$] = this;
        if (!dart.test(dart.fn(() => {
          this[_debugIsFlushing] = true;
          return true;
        }, T$.VoidToboolL())())) dart.assertFailed("", I[4], 796, 12, "() {\n      _debugIsFlushing = true;\n      return true;\n    }()");
        try {
          this[_runStateCreate]();
        } finally {
          if (!dart.test(dart.fn(() => {
            this[_debugIsFlushing] = false;
            return true;
          }, T$.VoidToboolL())())) dart.assertFailed("", I[4], 803, 14, "() {\n        _debugIsFlushing = false;\n        return true;\n      }()");
        }
        this[_didMount] = true;
        this[_dirty] = false;
        this[_dependencyMayHaveChanged] = false;
      }
      update(newProvider) {
        ProviderBaseLOfCreatedL$ListenedL().as(newProvider);
        this[_provider$1] = newProvider;
      }
      dispose() {
        this[_mounted] = false;
        this[_runOnDispose]();
        for (let sub of this[_subscriptions][$entries]) {
          sub.key[_dependents].remove(this);
          sub.value.close();
        }
        for (let observer of this[_container][_observers]) {
          framework._runUnaryGuarded(ProviderBaseLOfCreatedL$ListenedL(), dart.void, dart.bind(observer, 'didDisposeProvider'), this[_origin$]);
        }
        this[_listeners].clear();
        this.state.dispose();
      }
      markMustRecomputeState() {
        this[_mustRecomputeState] = true;
        this.notifyMayHaveChanged();
      }
      [_runOnDispose]() {
        let t12;
        t12 = this[_onDisposeListeners];
        t12 == null ? null : t12[$forEach](C[13] || CT.C13);
        this[_onDisposeListeners] = null;
      }
      [_runStateCreate]() {
        let t12;
        let previous = this.state[_createdValue$];
        this[_previousSubscriptions] = this[_subscriptions];
        this[_subscriptions] = new (T$.LinkedMapOfProviderElementL$ProviderSubscriptionL()).new();
        let previouslyBuildingElement = null;
        if (!dart.test(dart.fn(() => {
          previouslyBuildingElement = framework.ProviderElement._debugCurrentlyBuildingElement;
          framework.ProviderElement._debugCurrentlyBuildingElement = this;
          return true;
        }, T$.VoidToboolL())())) dart.assertFailed("", I[4], 867, 12, "() {\n      previouslyBuildingElement = _debugCurrentlyBuildingElement;\n      _debugCurrentlyBuildingElement = this;\n      return true;\n    }()");
        try {
          this.state[_createdValue$] = (t12 = this[_provider$1], t12[_create$](this));
          this.state.valueChanged({previous: previous});
        } catch (e) {
          let err = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (!dart.test(this.state.handleError(err, stack))) {
            this[_exception] = new framework.ProviderException.__(err, stack, this[_provider$1]);
          }
        } finally {
          if (!dart.test(dart.fn(() => {
            framework.ProviderElement._debugCurrentlyBuildingElement = previouslyBuildingElement;
            return true;
          }, T$.VoidToboolL())())) dart.assertFailed("", I[4], 880, 14, "() {\n        _debugCurrentlyBuildingElement = previouslyBuildingElement;\n        return true;\n      }()");
          if (this[_previousSubscriptions] != null) {
            for (let sub of this[_previousSubscriptions][$entries]) {
              sub.key[_dependents].remove(this);
              sub.value.close();
            }
          }
          this[_previousSubscriptions] = null;
        }
      }
    }
    (ProviderElement.new = function(_provider) {
      this[_origin] = null;
      this[_container] = null;
      this[_dependents] = null;
      this[_listeners] = new (LinkedListOf_ListenerLOfListenedL()).new();
      this[_subscriptions] = new (T$.LinkedMapOfProviderElementL$ProviderSubscriptionL()).new();
      this[_previousSubscriptions] = null;
      this[_onDisposeListeners] = null;
      this[_notificationCount] = 0;
      this[_notifyDidChangeLastNotificationCount] = 0;
      this[_debugIsFlushing] = false;
      this[_dirty] = true;
      this[_dependencyMayHaveChanged] = true;
      this[_mustRecomputeState] = false;
      this[_mounted] = false;
      this[_didMount] = false;
      this[_exception] = null;
      this[_provider$0] = _provider;
      this[state] = _provider.createState();
      ;
    }).prototype = ProviderElement.prototype;
    dart.addTypeTests(ProviderElement);
    ProviderElement.prototype[_is_ProviderElement_default] = true;
    dart.addTypeCaches(ProviderElement);
    ProviderElement[dart.implements] = () => [framework.ProviderReference];
    dart.setMethodSignature(ProviderElement, () => ({
      __proto__: dart.getMethods(ProviderElement.__proto__),
      onDispose: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, []))]),
      [_debugAssertCanDependOn]: dart.fnType(dart.legacy(core.bool), [dart.legacy(framework.ProviderBase)]),
      read: dart.gFnType(T => [dart.legacy(T), [dart.legacy(framework.RootProvider$(dart.legacy(core.Object), dart.legacy(T)))]]),
      watch: dart.gFnType(T => [dart.legacy(T), [dart.legacy(framework.ProviderBase$(dart.legacy(core.Object), dart.legacy(T)))]]),
      [_markDependencyMayHaveChanged]: dart.fnType(dart.void, [dart.legacy(framework.ProviderSubscription)]),
      listen: dart.fnType(dart.legacy(framework.ProviderSubscription$(dart.legacy(Listened))), [], {didChange: dart.legacy(dart.fnType(dart.void, [dart.legacy(framework.ProviderSubscription$(dart.legacy(Listened)))])), mayHaveChanged: dart.legacy(dart.fnType(dart.void, [dart.legacy(framework.ProviderSubscription$(dart.legacy(Listened)))]))}, {}),
      flush: dart.fnType(dart.void, []),
      getExposedValue: dart.fnType(dart.legacy(Listened), []),
      [_debugMarkWillChange]: dart.fnType(dart.void, []),
      markDidChange: dart.fnType(dart.void, []),
      notifyMayHaveChanged: dart.fnType(dart.void, []),
      [_notifyDidChange]: dart.fnType(dart.void, []),
      mayNeedDispose: dart.fnType(dart.void, []),
      mount: dart.fnType(dart.void, []),
      update: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      dispose: dart.fnType(dart.void, []),
      markMustRecomputeState: dart.fnType(dart.void, []),
      [_runOnDispose]: dart.fnType(dart.void, []),
      [_runStateCreate]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(ProviderElement, () => ({
      __proto__: dart.getGetters(ProviderElement.__proto__),
      origin: dart.legacy(framework.ProviderBase$(dart.legacy(Created), dart.legacy(Listened))),
      provider: dart.legacy(framework.ProviderBase$(dart.legacy(Created), dart.legacy(Listened))),
      container: dart.legacy(framework.ProviderContainer),
      dependents: dart.legacy(core.Set$(dart.legacy(framework.ProviderElement))),
      hasListeners: dart.legacy(core.bool),
      mounted: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(ProviderElement, I[0]);
    dart.setFieldSignature(ProviderElement, () => ({
      __proto__: dart.getFields(ProviderElement.__proto__),
      [_origin$]: dart.fieldType(dart.legacy(framework.ProviderBase$(dart.legacy(Created), dart.legacy(Listened)))),
      [_provider$1]: dart.fieldType(dart.legacy(framework.ProviderBase$(dart.legacy(Created), dart.legacy(Listened)))),
      state: dart.finalFieldType(dart.legacy(framework.ProviderStateBase$(dart.legacy(Created), dart.legacy(Listened)))),
      [_container]: dart.fieldType(dart.legacy(framework.ProviderContainer)),
      [_dependents]: dart.fieldType(dart.legacy(core.Set$(dart.legacy(framework.ProviderElement)))),
      [_listeners]: dart.finalFieldType(dart.legacy(collection.LinkedList$(dart.legacy(framework._Listener$(dart.legacy(Listened)))))),
      [_subscriptions]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(framework.ProviderElement), dart.legacy(framework.ProviderSubscription)))),
      [_previousSubscriptions]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(framework.ProviderElement), dart.legacy(framework.ProviderSubscription)))),
      [_onDisposeListeners]: dart.fieldType(dart.legacy(collection.DoubleLinkedQueue$(dart.legacy(dart.fnType(dart.void, []))))),
      [_notificationCount]: dart.fieldType(dart.legacy(core.int)),
      [_notifyDidChangeLastNotificationCount]: dart.fieldType(dart.legacy(core.int)),
      [_debugIsFlushing]: dart.fieldType(dart.legacy(core.bool)),
      [_dirty]: dart.fieldType(dart.legacy(core.bool)),
      [_dependencyMayHaveChanged]: dart.fieldType(dart.legacy(core.bool)),
      [_mustRecomputeState]: dart.fieldType(dart.legacy(core.bool)),
      [_mounted]: dart.fieldType(dart.legacy(core.bool)),
      [_didMount]: dart.fieldType(dart.legacy(core.bool)),
      [_exception]: dart.fieldType(dart.legacy(framework.ProviderException))
    }));
    return ProviderElement;
  });
  framework.ProviderElement = framework.ProviderElement$();
  dart.defineLazy(framework.ProviderElement, {
    /*framework.ProviderElement._debugCurrentlyBuildingElement*/get _debugCurrentlyBuildingElement() {
      return null;
    },
    set _debugCurrentlyBuildingElement(_) {}
  }, true);
  dart.addTypeTests(framework.ProviderElement, _is_ProviderElement_default);
  const _is_AutoDisposeProviderElement_default = Symbol('_is_AutoDisposeProviderElement_default');
  framework.AutoDisposeProviderElement$ = dart.generic((Created, Listened) => {
    class AutoDisposeProviderElement extends framework.ProviderElement$(dart.legacy(Created), dart.legacy(Listened)) {
      get maintainState() {
        return this[_maintainState];
      }
      set maintainState(value) {
        this[_maintainState] = value;
        if (!dart.test(this[_maintainState]) && !dart.test(this.hasListeners)) {
          framework._AutoDisposer.instance.scheduleDispose(this);
        }
      }
      mayNeedDispose() {
        if (!dart.test(this.maintainState) && !dart.test(this.hasListeners)) {
          framework._AutoDisposer.instance.scheduleDispose(this);
        }
      }
    }
    (AutoDisposeProviderElement.new = function(provider) {
      this[_maintainState] = false;
      AutoDisposeProviderElement.__proto__.new.call(this, provider);
      ;
    }).prototype = AutoDisposeProviderElement.prototype;
    dart.addTypeTests(AutoDisposeProviderElement);
    AutoDisposeProviderElement.prototype[_is_AutoDisposeProviderElement_default] = true;
    dart.addTypeCaches(AutoDisposeProviderElement);
    AutoDisposeProviderElement[dart.implements] = () => [framework.AutoDisposeProviderReference];
    dart.setGetterSignature(AutoDisposeProviderElement, () => ({
      __proto__: dart.getGetters(AutoDisposeProviderElement.__proto__),
      maintainState: dart.legacy(core.bool)
    }));
    dart.setSetterSignature(AutoDisposeProviderElement, () => ({
      __proto__: dart.getSetters(AutoDisposeProviderElement.__proto__),
      maintainState: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(AutoDisposeProviderElement, I[0]);
    dart.setFieldSignature(AutoDisposeProviderElement, () => ({
      __proto__: dart.getFields(AutoDisposeProviderElement.__proto__),
      [_maintainState]: dart.fieldType(dart.legacy(core.bool))
    }));
    return AutoDisposeProviderElement;
  });
  framework.AutoDisposeProviderElement = framework.AutoDisposeProviderElement$();
  dart.addTypeTests(framework.AutoDisposeProviderElement, _is_AutoDisposeProviderElement_default);
  const _is__LinkedListEntry_default = Symbol('_is__LinkedListEntry_default');
  framework._LinkedListEntry$ = dart.generic(T => {
    class _LinkedListEntry extends collection.LinkedListEntry {}
    (_LinkedListEntry.new = function(value) {
      this.value = value;
      _LinkedListEntry.__proto__.new.call(this);
      ;
    }).prototype = _LinkedListEntry.prototype;
    dart.addTypeTests(_LinkedListEntry);
    _LinkedListEntry.prototype[_is__LinkedListEntry_default] = true;
    dart.addTypeCaches(_LinkedListEntry);
    dart.setLibraryUri(_LinkedListEntry, I[0]);
    dart.setFieldSignature(_LinkedListEntry, () => ({
      __proto__: dart.getFields(_LinkedListEntry.__proto__),
      value: dart.finalFieldType(dart.legacy(T))
    }));
    return _LinkedListEntry;
  }, T => {
    dart.setBaseClass(framework._LinkedListEntry$(dart.legacy(T)), collection.LinkedListEntry$(dart.legacy(framework._LinkedListEntry$(dart.legacy(T)))));
  });
  framework._LinkedListEntry = framework._LinkedListEntry$();
  dart.addTypeTests(framework._LinkedListEntry, _is__LinkedListEntry_default);
  var _scheduled = dart.privateName(framework, "_scheduled");
  var _stateToDispose = dart.privateName(framework, "_stateToDispose");
  var _performDispose = dart.privateName(framework, "_performDispose");
  var _disposeProvider = dart.privateName(framework, "_disposeProvider");
  framework._AutoDisposer = class _AutoDisposer extends core.Object {
    scheduleDispose(element) {
      if (!!dart.test(element.hasListeners)) dart.assertFailed("Tried to dispose " + dart.str(element[_provider$1]) + " , but still has listeners", I[11], 102, 7, "!element.hasListeners");
      this[_stateToDispose] == null ? this[_stateToDispose] = new (T$.LinkedListOf_LinkedListEntryLOfAutoDisposeProviderElementL()).new() : null;
      this[_stateToDispose].add(new (T$._LinkedListEntryOfAutoDisposeProviderElementL()).new(element));
      if (!dart.test(this[_scheduled])) {
        this[_scheduled] = true;
        T$.FutureOfNull().microtask(dart.fn(() => {
          try {
            this[_performDispose]();
          } finally {
            this[_scheduled] = false;
            this[_stateToDispose] = null;
          }
        }, T$.VoidToNull()));
      }
    }
    [_performDispose]() {
      for (let entry = this[_stateToDispose].first; entry != null; entry = entry.next) {
        if (dart.test(entry.value.maintainState) || dart.test(entry.value.hasListeners) || !dart.test(entry.value.mounted)) {
          continue;
        }
        entry.value.container[_disposeProvider](entry.value[_origin$]);
      }
    }
  };
  (framework._AutoDisposer.new = function() {
    this[_scheduled] = false;
    this[_stateToDispose] = null;
    ;
  }).prototype = framework._AutoDisposer.prototype;
  dart.addTypeTests(framework._AutoDisposer);
  dart.addTypeCaches(framework._AutoDisposer);
  dart.setMethodSignature(framework._AutoDisposer, () => ({
    __proto__: dart.getMethods(framework._AutoDisposer.__proto__),
    scheduleDispose: dart.fnType(dart.void, [dart.legacy(framework.AutoDisposeProviderElement)]),
    [_performDispose]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(framework._AutoDisposer, I[0]);
  dart.setFieldSignature(framework._AutoDisposer, () => ({
    __proto__: dart.getFields(framework._AutoDisposer.__proto__),
    [_scheduled]: dart.fieldType(dart.legacy(core.bool)),
    [_stateToDispose]: dart.fieldType(dart.legacy(collection.LinkedList$(dart.legacy(framework._LinkedListEntry$(dart.legacy(framework.AutoDisposeProviderElement))))))
  }));
  dart.defineLazy(framework._AutoDisposer, {
    /*framework._AutoDisposer.instance*/get instance() {
      return new framework._AutoDisposer.new();
    }
  }, true);
  const _is_ProviderListenable_default = Symbol('_is_ProviderListenable_default');
  framework.ProviderListenable$ = dart.generic(Listened => {
    class ProviderListenable extends core.Object {}
    (ProviderListenable.new = function() {
      ;
    }).prototype = ProviderListenable.prototype;
    dart.addTypeTests(ProviderListenable);
    ProviderListenable.prototype[_is_ProviderListenable_default] = true;
    dart.addTypeCaches(ProviderListenable);
    dart.setLibraryUri(ProviderListenable, I[0]);
    return ProviderListenable;
  });
  framework.ProviderListenable = framework.ProviderListenable$();
  dart.addTypeTests(framework.ProviderListenable, _is_ProviderListenable_default);
  var provider$ = dart.privateName(framework, "ProviderSelector.provider");
  var selector$ = dart.privateName(framework, "ProviderSelector.selector");
  var _listen = dart.privateName(framework, "_listen");
  const _is_ProviderSelector_default = Symbol('_is_ProviderSelector_default');
  framework.ProviderSelector$ = dart.generic((Input, Output) => {
    var InputL = () => (InputL = dart.constFn(dart.legacy(Input)))();
    var SelectorSubscriptionOfInputL$OutputL = () => (SelectorSubscriptionOfInputL$OutputL = dart.constFn(select.SelectorSubscription$(InputL(), OutputL())))();
    var OutputL = () => (OutputL = dart.constFn(dart.legacy(Output)))();
    class ProviderSelector extends core.Object {
      get provider() {
        return this[provider$];
      }
      set provider(value) {
        super.provider = value;
      }
      get selector() {
        return this[selector$];
      }
      set selector(value) {
        super.selector = value;
      }
      [_listen](container, opts) {
        let mayHaveChanged = opts && 'mayHaveChanged' in opts ? opts.mayHaveChanged : null;
        let didChange = opts && 'didChange' in opts ? opts.didChange : null;
        return new (SelectorSubscriptionOfInputL$OutputL()).new({container: container, selector: this.selector, provider: this.provider, mayHaveChanged: mayHaveChanged, didChange: didChange});
      }
    }
    (ProviderSelector.new = function(opts) {
      let provider = opts && 'provider' in opts ? opts.provider : null;
      let selector = opts && 'selector' in opts ? opts.selector : null;
      this[provider$] = provider;
      this[selector$] = selector;
      ;
    }).prototype = ProviderSelector.prototype;
    dart.addTypeTests(ProviderSelector);
    ProviderSelector.prototype[_is_ProviderSelector_default] = true;
    dart.addTypeCaches(ProviderSelector);
    ProviderSelector[dart.implements] = () => [framework.ProviderListenable$(dart.legacy(Output))];
    dart.setMethodSignature(ProviderSelector, () => ({
      __proto__: dart.getMethods(ProviderSelector.__proto__),
      [_listen]: dart.fnType(dart.legacy(select.SelectorSubscription$(dart.legacy(Input), dart.legacy(Output))), [dart.legacy(framework.ProviderContainer)], {didChange: dart.legacy(dart.fnType(dart.void, [dart.legacy(select.SelectorSubscription$(dart.legacy(Input), dart.legacy(Output)))])), mayHaveChanged: dart.legacy(dart.fnType(dart.void, [dart.legacy(select.SelectorSubscription$(dart.legacy(Input), dart.legacy(Output)))]))}, {})
    }));
    dart.setLibraryUri(ProviderSelector, I[0]);
    dart.setFieldSignature(ProviderSelector, () => ({
      __proto__: dart.getFields(ProviderSelector.__proto__),
      provider: dart.finalFieldType(dart.legacy(framework.RootProvider$(dart.legacy(core.Object), dart.legacy(Input)))),
      selector: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(Output), [dart.legacy(Input)])))
    }));
    return ProviderSelector;
  });
  framework.ProviderSelector = framework.ProviderSelector$();
  dart.addTypeTests(framework.ProviderSelector, _is_ProviderSelector_default);
  const _is__Listener_default = Symbol('_is__Listener_default');
  framework._Listener$ = dart.generic(Listened => {
    class _Listener extends collection.LinkedListEntry {}
    (_Listener.new = function(opts) {
      let mayHaveChanged = opts && 'mayHaveChanged' in opts ? opts.mayHaveChanged : null;
      let didChange = opts && 'didChange' in opts ? opts.didChange : null;
      let element = opts && 'element' in opts ? opts.element : null;
      this.mayHaveChanged = mayHaveChanged;
      this.didChange = didChange;
      this.element = element;
      this.lastNotificationCount = dart.notNull(element[_notificationCount]) - 1;
      _Listener.__proto__.new.call(this);
      ;
    }).prototype = _Listener.prototype;
    dart.addTypeTests(_Listener);
    _Listener.prototype[_is__Listener_default] = true;
    dart.addTypeCaches(_Listener);
    dart.setLibraryUri(_Listener, I[0]);
    dart.setFieldSignature(_Listener, () => ({
      __proto__: dart.getFields(_Listener.__proto__),
      lastNotificationCount: dart.fieldType(dart.legacy(core.int)),
      mayHaveChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
      didChange: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, []))),
      element: dart.finalFieldType(dart.legacy(framework.ProviderElement$(dart.legacy(core.Object), dart.legacy(Listened))))
    }));
    return _Listener;
  }, Listened => {
    dart.setBaseClass(framework._Listener$(dart.legacy(Listened)), collection.LinkedListEntry$(dart.legacy(framework._Listener$(dart.legacy(Listened)))));
  });
  framework._Listener = framework._Listener$();
  dart.addTypeTests(framework._Listener, _is__Listener_default);
  const _is_ProviderSubscription_default = Symbol('_is_ProviderSubscription_default');
  framework.ProviderSubscription$ = dart.generic(Listened => {
    class ProviderSubscription extends core.Object {
      close() {
        if (this[_listener$0].list != null) {
          this[_listener$0].unlink();
          this[_listener$0].element.mayNeedDispose();
        }
      }
      flush() {
        if (this[_listener$0].list == null) {
          dart.throw(new core.StateError.new("Cannot call ProviderSubscription.flush() after close was called"));
        }
        this[_listener$0].element.flush();
        return dart.notNull(this[_listener$0].element[_notificationCount]) > dart.notNull(this[_listener$0].lastNotificationCount);
      }
      read() {
        if (this[_listener$0].list == null) {
          dart.throw(new core.StateError.new("Cannot call ProviderSubscription.read() after close was called"));
        }
        this[_listener$0].element.flush();
        this[_listener$0].lastNotificationCount = this[_listener$0].element[_notificationCount];
        return this[_listener$0].element.getExposedValue();
      }
    }
    (ProviderSubscription.__ = function(_listener) {
      this[_listener$0] = _listener;
      ;
    }).prototype = ProviderSubscription.prototype;
    dart.addTypeTests(ProviderSubscription);
    ProviderSubscription.prototype[_is_ProviderSubscription_default] = true;
    dart.addTypeCaches(ProviderSubscription);
    dart.setMethodSignature(ProviderSubscription, () => ({
      __proto__: dart.getMethods(ProviderSubscription.__proto__),
      close: dart.fnType(dart.void, []),
      flush: dart.fnType(dart.legacy(core.bool), []),
      read: dart.fnType(dart.legacy(Listened), [])
    }));
    dart.setLibraryUri(ProviderSubscription, I[0]);
    dart.setFieldSignature(ProviderSubscription, () => ({
      __proto__: dart.getFields(ProviderSubscription.__proto__),
      [_listener$0]: dart.finalFieldType(dart.legacy(framework._Listener$(dart.legacy(Listened))))
    }));
    return ProviderSubscription;
  });
  framework.ProviderSubscription = framework.ProviderSubscription$();
  dart.addTypeTests(framework.ProviderSubscription, _is_ProviderSubscription_default);
  var exception$ = dart.privateName(framework, "ProviderException.exception");
  var stackTrace$ = dart.privateName(framework, "ProviderException.stackTrace");
  var provider$0 = dart.privateName(framework, "ProviderException.provider");
  framework.ProviderException = class ProviderException extends core.Object {
    get exception() {
      return this[exception$];
    }
    set exception(value) {
      super.exception = value;
    }
    get stackTrace() {
      return this[stackTrace$];
    }
    set stackTrace(value) {
      super.stackTrace = value;
    }
    get provider() {
      return this[provider$0];
    }
    set provider(value) {
      super.provider = value;
    }
    toString() {
      return "An exception was thrown while building " + dart.str(this.provider) + ".\n\nThrown exception:\n" + dart.str(this.exception) + "\n\nStack trace:\n" + dart.str(this.stackTrace) + "\n";
    }
  };
  (framework.ProviderException.__ = function(exception, stackTrace, provider) {
    this[exception$] = exception;
    this[stackTrace$] = stackTrace;
    this[provider$0] = provider;
    ;
  }).prototype = framework.ProviderException.prototype;
  dart.addTypeTests(framework.ProviderException);
  dart.addTypeCaches(framework.ProviderException);
  framework.ProviderException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(framework.ProviderException, () => ({
    __proto__: dart.getMethods(framework.ProviderException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(framework.ProviderException, I[0]);
  dart.setFieldSignature(framework.ProviderException, () => ({
    __proto__: dart.getFields(framework.ProviderException.__proto__),
    exception: dart.finalFieldType(dart.legacy(core.Object)),
    stackTrace: dart.finalFieldType(dart.legacy(core.StackTrace)),
    provider: dart.finalFieldType(dart.legacy(framework.ProviderBase))
  }));
  dart.defineExtensionMethods(framework.ProviderException, ['toString']);
  var debugVsyncs = dart.privateName(framework, "ProviderContainer.debugVsyncs");
  var _children = dart.privateName(framework, "_children");
  var _overrideForProvider = dart.privateName(framework, "_overrideForProvider");
  var _overrideForFamily = dart.privateName(framework, "_overrideForFamily");
  var _stateReaders = dart.privateName(framework, "_stateReaders");
  var _disposed = dart.privateName(framework, "_disposed");
  var _parent = dart.privateName(framework, "_parent");
  var _localObservers = dart.privateName(framework, "_localObservers");
  var _root = dart.privateName(framework, "_root");
  var _family$ = dart.privateName(framework, "_family");
  var _value$ = dart.privateName(framework, "_value");
  var _createOverride$ = dart.privateName(framework, "_createOverride");
  var _visitStatesInOrder = dart.privateName(framework, "_visitStatesInOrder");
  framework.ProviderContainer = class ProviderContainer extends core.Object {
    get debugVsyncs() {
      return this[debugVsyncs];
    }
    set debugVsyncs(value) {
      super.debugVsyncs = value;
    }
    get debugChildren() {
      return (() => {
        let t13 = T$.LinkedHashSetOfProviderContainerL().new();
        for (let t15 of this[_children]) {
          let t14 = T$.ProviderContainerL().as(t15);
          t13.add(t14);
        }
        return t13;
      })();
    }
    get [_observers]() {
      return new (T$.SyncIterableOfProviderObserverL()).new((function* _observers() {
        let iterable = this[_root] == null ? this[_localObservers] : this[_root][_localObservers];
        if (iterable != null) {
          yield* iterable;
        }
      }).bind(this));
    }
    read(Result, provider) {
      let element = this.readProviderElement(T$.ObjectL(), dart.legacy(Result), provider);
      element.flush();
      element.mayNeedDispose();
      return element.getExposedValue();
    }
    listen(Result, provider, opts) {
      let mayHaveChanged = opts && 'mayHaveChanged' in opts ? opts.mayHaveChanged : null;
      let didChange = opts && 'didChange' in opts ? opts.didChange : null;
      if (dart.legacy(framework.ProviderBase$(T$.ObjectL(), dart.legacy(Result))).is(provider)) {
        return this.readProviderElement(T$.ObjectL(), dart.legacy(Result), provider).listen({mayHaveChanged: mayHaveChanged, didChange: didChange});
      } else if (dart.legacy(framework.ProviderSelector$(T$.ObjectL(), dart.legacy(Result))).is(provider)) {
        return provider[_listen](this, {mayHaveChanged: mayHaveChanged, didChange: didChange});
      } else {
        dart.throw(new core.UnsupportedError.new("Unknown ProviderListenable " + dart.str(provider)));
      }
    }
    refresh(Created, provider) {
      let t16;
      let element = (t16 = this[_root], t16 == null ? this : t16)[_stateReaders][$_get](provider);
      if (element == null) {
        return this.readProviderElement(dart.legacy(Created), T$.ObjectL(), provider).state.createdValue;
      } else {
        element.markMustRecomputeState();
        element.flush();
        return dart.legacy(Created).as(element.state.createdValue);
      }
    }
    [_disposeProvider](provider) {
      let element = this.readProviderElement(T$.ObjectL(), T$.ObjectL(), provider);
      if (!(element[_origin$] != null)) dart.assertFailed("No origin specified – bug?", I[12], 185, 12, "element._origin != null");
      if (!dart.test(this[_stateReaders][$containsKey](element[_origin$]))) dart.assertFailed("Removed a key that does not exist", I[12], 187, 7, "_stateReaders.containsKey(element._origin)");
      this[_stateReaders][$remove](element[_origin$]);
      if (element[_origin$].from != null) {
        element[_origin$].from[_cache][$remove](element[_origin$].argument);
      }
      element.dispose();
    }
    updateOverrides(overrides) {
      if (dart.test(this[_disposed])) {
        dart.throw(new core.StateError.new("Called updateOverrides on a ProviderContainer that was already disposed"));
      }
      let unusedOverrides = null;
      if (!dart.test(dart.fn(() => {
        unusedOverrides = (() => {
          let t16 = T$.ListOfOverrideL().of(overrides);
          return t16;
        })();
        return true;
      }, T$.VoidToboolL())())) dart.assertFailed("", I[12], 213, 12, "() {\n      unusedOverrides = [...overrides];\n      return true;\n    }()");
      for (let override of overrides) {
        if (T$.ProviderOverrideL().is(override)) {
          if (!dart.equals(dart.runtimeType(this[_overrideForProvider][$_get](override[_origin$])), dart.runtimeType(override[_provider$1]))) dart.assertFailed("Replaced the override of type " + dart.str(dart.runtimeType(this[_overrideForProvider][$_get](override[_origin$]))) + " " + "with an override of type " + dart.str(dart.runtimeType(override[_provider$1])) + ", which is different.\n" + "Changing the kind of override or reordering overrides is not supported.", I[12], 221, 11, "_overrideForProvider[override._origin].runtimeType ==\n              override._provider.runtimeType");
          let previousOverride = this[_overrideForProvider][$_get](override[_origin$]);
          this[_overrideForProvider][$_set](override[_origin$], override[_provider$1]);
          if (T$.ScopedProviderL().is(override[_origin$])) {
            for (let child of this[_children]) {
              if (!T$.ValueProviderL().is(override[_provider$1]) || !dart.equals(T$.ValueProviderL().as(override[_provider$1])[_value$], T$.ValueProviderL().as(previousOverride)[_value$])) {
                if (dart.equals(child[_overrideForProvider][$_get](override[_origin$]), previousOverride)) {
                  child.updateOverrides(T$.JSArrayOfOverrideL().of([override]));
                }
              }
            }
          }
          if (!dart.test(dart.fn(() => {
            unusedOverrides[$remove](override);
            return true;
          }, T$.VoidToboolL())())) dart.assertFailed("", I[12], 243, 16, "() {\n          unusedOverrides.remove(override);\n          return true;\n        }()");
          let element = this[_stateReaders][$_get](override[_origin$]);
          if (element == null) {
            continue;
          }
          framework._runUnaryGuarded(T$.ProviderBaseL(), dart.void, dart.bind(element, 'update'), override[_provider$1]);
        } else if (T$.FamilyOverrideL().is(override)) {
          if (!dart.test(dart.fn(() => {
            unusedOverrides[$remove](override);
            return true;
          }, T$.VoidToboolL())())) dart.assertFailed("", I[12], 255, 16, "() {\n          unusedOverrides.remove(override);\n          return true;\n        }()");
          this[_overrideForFamily][$_set](override[_family$], override);
        }
      }
      if (!dart.test(unusedOverrides[$isEmpty])) dart.assertFailed("Updated the list of overrides with providers that were not overriden before", I[12], 264, 7, "unusedOverrides.isEmpty");
    }
    readProviderElement(Created, Listened, provider) {
      let t17;
      if (dart.test(this[_disposed])) {
        dart.throw(new core.StateError.new("Tried to read a provider from a ProviderContainer that was already disposed"));
      }
      if (this[_root] != null && T$.RootProviderL().is(provider)) {
        return this[_root].readProviderElement(dart.legacy(Created), dart.legacy(Listened), provider);
      }
      let element = dart.legacy(framework.ProviderElement$(dart.legacy(Created), dart.legacy(Listened))).as(this[_stateReaders][$putIfAbsent](provider, dart.fn(() => {
        let t18, t17, t17$;
        if (dart.equals(provider, framework._circularDependencyLock)) {
          dart.throw(new framework.CircularDependencyError.__());
        }
        framework._circularDependencyLock == null ? framework._circularDependencyLock = provider : null;
        try {
          let override = null;
          override == null ? override = dart.legacy(framework.ProviderBase$(dart.legacy(Created), dart.legacy(Listened))).as(this[_overrideForProvider][$_get](provider)) : null;
          if (override == null && provider.from != null && this[_overrideForFamily][$_get](provider.from) != null) {
            let familyOverride = this[_overrideForFamily][$_get](provider.from);
            override = dart.legacy(framework.ProviderBase$(dart.legacy(Created), dart.legacy(Listened))).as((t17 = familyOverride, t18 = provider[_argument], t17[_createOverride$](t18)));
          }
          override == null ? override = provider : null;
          let element = (t17$ = override.createElement(), (() => {
            t17$[_provider$1] = override;
            t17$[_origin$] = provider;
            t17$[_container] = this;
            t17$.mount();
            return t17$;
          })());
          for (let observer of this[_observers]) {
            framework._runBinaryGuarded(dart.legacy(framework.ProviderBase$(dart.legacy(Created), dart.legacy(Listened))), dart.legacy(Listened), dart.bind(observer, 'didAddProvider'), provider, element.state[_exposedValue]);
          }
          return element;
        } finally {
          if (dart.equals(framework._circularDependencyLock, provider)) {
            framework._circularDependencyLock = null;
          }
        }
      }, dart.fnType(dart.legacy(framework.ProviderElement$(dart.legacy(Created), dart.legacy(Listened))), []))));
      t17 = element;
      return (() => {
        t17.flush();
        return t17;
      })();
    }
    dispose() {
      let t17, t17$;
      if (dart.test(this[_disposed])) {
        dart.throw(new core.StateError.new("Called disposed on a ProviderContainer that was already disposed"));
      }
      if (dart.test(this[_children][$isNotEmpty])) {
        dart.throw(new core.StateError.new("Tried to dispose a ProviderContainer that still has children containers."));
      }
      this.debugVsyncs.clear();
      t17$ = (t17 = this[_parent], t17 == null ? null : t17[_children]);
      t17$ == null ? null : t17$.remove(this);
      this[_disposed] = true;
      for (let state of this[_visitStatesInOrder]()[$toList]()[$reversed]) {
        state.dispose();
      }
    }
    [_visitStatesInOrder]() {
      return new (T$.SyncIterableOfProviderElementL()).new((function* _visitStatesInOrder() {
        let visitedNodes = new (T$._HashSetOfProviderElementL()).new();
        let queue = new (T$.DoubleLinkedQueueOfProviderElementL()).new();
        for (let element of this[_stateReaders][$values]) {
          if (element.dependents == null || dart.test(element[_subscriptions][$isEmpty])) {
            queue.add(element);
          }
        }
        while (dart.test(queue[$isNotEmpty])) {
          let element = queue.removeFirst();
          if (!dart.test(visitedNodes.add(element))) {
            continue;
          }
          yield element;
          if (element[_dependents] == null) {
            continue;
          }
          for (let dependent of element[_dependents]) {
            if (dart.equals(dependent[_container], this) && dart.test(dependent[_subscriptions][$keys][$every](dart.bind(visitedNodes, 'contains')))) {
              queue.add(dependent);
            }
          }
        }
      }).bind(this));
    }
    get debugProviderElements() {
      let result = null;
      if (!dart.test(dart.fn(() => {
        result = this[_visitStatesInOrder]()[$toList]();
        return true;
      }, T$.VoidToboolL())())) dart.assertFailed("", I[12], 396, 12, "() {\n      result = _visitStatesInOrder().toList();\n      return true;\n    }()");
      return result;
    }
    get debugProviderValues() {
      let res = null;
      if (!dart.test(dart.fn(() => {
        res = (() => {
          let t17 = new (T$.LinkedMapOfProviderBaseL$ObjectL()).new();
          for (let entry of this[_stateReaders][$entries])
            if (entry.value.state != null) t17[$_set](entry.key, entry.value.state.exposedValue);
          return t17;
        })();
        return true;
      }, T$.VoidToboolL())())) dart.assertFailed("", I[12], 406, 12, "() {\n      res = {\n        for (final entry in _stateReaders.entries)\n          if (entry.value.state != null)\n            entry.key: entry.value.state.exposedValue,\n      };\n\n      return true;\n    }()");
      return res;
    }
  };
  (framework.ProviderContainer.new = function(opts) {
    let t13, t13$;
    let parent = opts && 'parent' in opts ? opts.parent : null;
    let overrides = opts && 'overrides' in opts ? opts.overrides : C[14] || CT.C14;
    let observers = opts && 'observers' in opts ? opts.observers : null;
    this[_children] = new (T$._HashSetOfProviderContainerL()).new();
    this[_overrideForProvider] = new (T$.LinkedMapOfProviderBaseL$ProviderBaseL()).new();
    this[_overrideForFamily] = new (T$.LinkedMapOfFamilyLOfdynamic$dynamic$dynamic$ProviderReferenceL$RootProviderL$FamilyOverrideL()).new();
    this[_stateReaders] = new (T$.LinkedMapOfProviderBaseL$ProviderElementL()).new();
    this[debugVsyncs] = new (T$.DoubleLinkedQueueOfVoidToLvoid()).new();
    this[_disposed] = false;
    this[_parent] = parent;
    this[_localObservers] = observers;
    this[_root] = (t13$ = (t13 = parent, t13 == null ? null : t13[_root]), t13$ == null ? parent : t13$);
    if (this[_parent] != null) {
      if (observers != null) {
        dart.throw(new core.UnsupportedError.new("Cannot specify observers on a non-root ProviderContainer/ProviderScope"));
      }
      for (let override of overrides) {
        if (T$.ProviderOverrideL().is(override) && T$.ScopedProviderL().is(override[_origin$])) {
        } else {
          dart.throw(new core.UnsupportedError.new("Cannot override providers on a non-root ProviderContainer/ProviderScope"));
        }
      }
      this[_parent][_children].add(this);
      this[_overrideForProvider][$addEntries](parent[_overrideForProvider][$entries][$where](dart.fn(e => T$.ScopedProviderL().is(e.key), T$.MapEntryLOfProviderBaseL$ProviderBaseLToboolL())));
    }
    for (let override of overrides) {
      if (T$.ProviderOverrideL().is(override)) {
        this[_overrideForProvider][$_set](override[_origin$], override[_provider$1]);
      } else if (T$.FamilyOverrideL().is(override)) {
        this[_overrideForFamily][$_set](override[_family$], override);
      }
    }
  }).prototype = framework.ProviderContainer.prototype;
  dart.addTypeTests(framework.ProviderContainer);
  dart.addTypeCaches(framework.ProviderContainer);
  dart.setMethodSignature(framework.ProviderContainer, () => ({
    __proto__: dart.getMethods(framework.ProviderContainer.__proto__),
    read: dart.gFnType(Result => [dart.legacy(Result), [dart.legacy(framework.ProviderBase$(dart.legacy(core.Object), dart.legacy(Result)))]]),
    listen: dart.gFnType(Result => [dart.legacy(framework.ProviderSubscription$(dart.legacy(Result))), [dart.legacy(framework.ProviderListenable$(dart.legacy(Result)))], {didChange: dart.legacy(dart.fnType(dart.void, [dart.legacy(framework.ProviderSubscription$(dart.legacy(Result)))])), mayHaveChanged: dart.legacy(dart.fnType(dart.void, [dart.legacy(framework.ProviderSubscription$(dart.legacy(Result)))]))}, {}]),
    refresh: dart.gFnType(Created => [dart.legacy(Created), [dart.legacy(framework.RootProvider$(dart.legacy(Created), dart.legacy(core.Object)))]]),
    [_disposeProvider]: dart.fnType(dart.void, [dart.legacy(framework.ProviderBase$(dart.legacy(core.Object), dart.legacy(core.Object)))]),
    updateOverrides: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(framework.Override)))]),
    readProviderElement: dart.gFnType((Created, Listened) => [dart.legacy(framework.ProviderElement$(dart.legacy(Created), dart.legacy(Listened))), [dart.legacy(framework.ProviderBase$(dart.legacy(Created), dart.legacy(Listened)))]]),
    dispose: dart.fnType(dart.void, []),
    [_visitStatesInOrder]: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(framework.ProviderElement))), [])
  }));
  dart.setGetterSignature(framework.ProviderContainer, () => ({
    __proto__: dart.getGetters(framework.ProviderContainer.__proto__),
    debugChildren: dart.legacy(core.Set$(dart.legacy(framework.ProviderContainer))),
    [_observers]: dart.legacy(core.Iterable$(dart.legacy(framework.ProviderObserver))),
    debugProviderElements: dart.legacy(core.List$(dart.legacy(framework.ProviderElement))),
    debugProviderValues: dart.legacy(core.Map$(dart.legacy(framework.ProviderBase), dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(framework.ProviderContainer, I[0]);
  dart.setFieldSignature(framework.ProviderContainer, () => ({
    __proto__: dart.getFields(framework.ProviderContainer.__proto__),
    [_root]: dart.finalFieldType(dart.legacy(framework.ProviderContainer)),
    [_parent]: dart.finalFieldType(dart.legacy(framework.ProviderContainer)),
    [_children]: dart.finalFieldType(dart.legacy(collection.HashSet$(dart.legacy(framework.ProviderContainer)))),
    [_overrideForProvider]: dart.finalFieldType(dart.legacy(collection.HashMap$(dart.legacy(framework.ProviderBase), dart.legacy(framework.ProviderBase)))),
    [_overrideForFamily]: dart.finalFieldType(dart.legacy(collection.HashMap$(dart.legacy(framework.Family$(dart.dynamic, dart.dynamic, dart.dynamic, dart.legacy(framework.ProviderReference), dart.legacy(framework.RootProvider))), dart.legacy(framework.FamilyOverride)))),
    [_stateReaders]: dart.finalFieldType(dart.legacy(collection.HashMap$(dart.legacy(framework.ProviderBase), dart.legacy(framework.ProviderElement)))),
    [_localObservers]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(framework.ProviderObserver)))),
    debugVsyncs: dart.finalFieldType(dart.legacy(collection.DoubleLinkedQueue$(dart.legacy(dart.fnType(dart.void, []))))),
    [_disposed]: dart.fieldType(dart.legacy(core.bool))
  }));
  framework.ProviderObserver = class ProviderObserver extends core.Object {
    didAddProvider(provider, value) {
    }
    mayHaveChanged(provider) {
    }
    didUpdateProvider(provider, newValue) {
    }
    didDisposeProvider(provider) {
    }
  };
  (framework.ProviderObserver.new = function() {
    ;
  }).prototype = framework.ProviderObserver.prototype;
  dart.addTypeTests(framework.ProviderObserver);
  dart.addTypeCaches(framework.ProviderObserver);
  dart.setMethodSignature(framework.ProviderObserver, () => ({
    __proto__: dart.getMethods(framework.ProviderObserver.__proto__),
    didAddProvider: dart.fnType(dart.void, [dart.legacy(framework.ProviderBase), dart.legacy(core.Object)]),
    mayHaveChanged: dart.fnType(dart.void, [dart.legacy(framework.ProviderBase)]),
    didUpdateProvider: dart.fnType(dart.void, [dart.legacy(framework.ProviderBase), dart.legacy(core.Object)]),
    didDisposeProvider: dart.fnType(dart.void, [dart.legacy(framework.ProviderBase)])
  }));
  dart.setLibraryUri(framework.ProviderObserver, I[0]);
  framework.ProviderOverride = class ProviderOverride extends core.Object {};
  (framework.ProviderOverride.new = function(_provider, _origin) {
    this[_provider$1] = _provider;
    this[_origin$] = _origin;
    ;
  }).prototype = framework.ProviderOverride.prototype;
  dart.addTypeTests(framework.ProviderOverride);
  dart.addTypeCaches(framework.ProviderOverride);
  framework.ProviderOverride[dart.implements] = () => [framework.Override];
  dart.setLibraryUri(framework.ProviderOverride, I[0]);
  dart.setFieldSignature(framework.ProviderOverride, () => ({
    __proto__: dart.getFields(framework.ProviderOverride.__proto__),
    [_origin$]: dart.finalFieldType(dart.legacy(framework.ProviderBase)),
    [_provider$1]: dart.finalFieldType(dart.legacy(framework.ProviderBase))
  }));
  framework.Override = class Override extends core.Object {};
  (framework.Override.new = function() {
    ;
  }).prototype = framework.Override.prototype;
  dart.addTypeTests(framework.Override);
  dart.addTypeCaches(framework.Override);
  dart.setLibraryUri(framework.Override, I[0]);
  framework.CircularDependencyError = class CircularDependencyError extends core.Error {};
  (framework.CircularDependencyError.__ = function() {
    framework.CircularDependencyError.__proto__.new.call(this);
    ;
  }).prototype = framework.CircularDependencyError.prototype;
  dart.addTypeTests(framework.CircularDependencyError);
  dart.addTypeCaches(framework.CircularDependencyError);
  dart.setLibraryUri(framework.CircularDependencyError, I[0]);
  framework.FamilyOverride = class FamilyOverride extends core.Object {};
  (framework.FamilyOverride.new = function(_family, _createOverride) {
    this[_family$] = _family;
    this[_createOverride$] = _createOverride;
    ;
  }).prototype = framework.FamilyOverride.prototype;
  dart.addTypeTests(framework.FamilyOverride);
  dart.addTypeCaches(framework.FamilyOverride);
  framework.FamilyOverride[dart.implements] = () => [framework.Override];
  dart.setLibraryUri(framework.FamilyOverride, I[0]);
  dart.setFieldSignature(framework.FamilyOverride, () => ({
    __proto__: dart.getFields(framework.FamilyOverride.__proto__),
    [_createOverride$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(framework.RootProvider), [dart.dynamic]))),
    [_family$]: dart.finalFieldType(dart.legacy(framework.Family$(dart.dynamic, dart.dynamic, dart.dynamic, dart.legacy(framework.ProviderReference), dart.legacy(framework.RootProvider))))
  }));
  const _is_ScopedProvider_default = Symbol('_is_ScopedProvider_default');
  framework.ScopedProvider$ = dart.generic(Listened => {
    var ListenedL = () => (ListenedL = dart.constFn(dart.legacy(Listened)))();
    var ProviderReferenceLToListenedL = () => (ProviderReferenceLToListenedL = dart.constFn(dart.fnType(ListenedL(), [T$.ProviderReferenceL()])))();
    var _ScopedProviderElementOfListenedL = () => (_ScopedProviderElementOfListenedL = dart.constFn(framework._ScopedProviderElement$(ListenedL())))();
    var _ScopedProviderStateOfListenedL = () => (_ScopedProviderStateOfListenedL = dart.constFn(framework._ScopedProviderState$(ListenedL())))();
    var ValueProviderOfListenedL$ListenedL = () => (ValueProviderOfListenedL$ListenedL = dart.constFn(framework.ValueProvider$(ListenedL(), ListenedL())))();
    var ValueProviderElementOfListenedL$ListenedL = () => (ValueProviderElementOfListenedL$ListenedL = dart.constFn(framework.ValueProviderElement$(ListenedL(), ListenedL())))();
    var ValueProviderElementLOfListenedL$ListenedL = () => (ValueProviderElementLOfListenedL$ListenedL = dart.constFn(dart.legacy(ValueProviderElementOfListenedL$ListenedL())))();
    var ValueProviderElementLOfListenedL$ListenedLToListenedL = () => (ValueProviderElementLOfListenedL$ListenedLToListenedL = dart.constFn(dart.fnType(ListenedL(), [ValueProviderElementLOfListenedL$ListenedL()])))();
    var FnToListenedL = () => (FnToListenedL = dart.constFn(dart.fnType(ListenedL(), [T$.ProviderBaseLOfObjectL$TLToLTL()])))();
    var FnToLListenedL = () => (FnToLListenedL = dart.constFn(dart.legacy(FnToListenedL())))();
    var ScopedProviderOfListenedL = () => (ScopedProviderOfListenedL = dart.constFn(framework.ScopedProvider$(ListenedL())))();
    class ScopedProvider extends framework.ProviderBase$(dart.legacy(Listened), dart.legacy(Listened)) {
      createElement() {
        return new (_ScopedProviderElementOfListenedL()).new(this);
      }
      createState() {
        return new (_ScopedProviderStateOfListenedL()).new();
      }
      overrideWithValue(value) {
        ListenedL().as(value);
        return new framework.ProviderOverride.new(new (ValueProviderOfListenedL$ListenedL()).new(dart.fn(ref => value, ValueProviderElementLOfListenedL$ListenedLToListenedL()), value), this);
      }
      overrideAs(create) {
        FnToLListenedL().as(create);
        return new framework.ProviderOverride.new(new (ScopedProviderOfListenedL()).new(create), this);
      }
    }
    (ScopedProvider.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      ScopedProvider.__proto__.new.call(this, create == null ? dart.fn(ref => dart.throw(new core.UnsupportedError.new("No default behavior specified for ScopedProvider<" + dart.str(dart.wrapType(ListenedL())) + ">")), T$.ProviderReferenceLToNull()) : dart.fn(ref => create(dart.bind(T$._ScopedProviderElementL().as(ref), 'watch')), ProviderReferenceLToListenedL()), name);
      ;
    }).prototype = ScopedProvider.prototype;
    dart.addTypeTests(ScopedProvider);
    ScopedProvider.prototype[_is_ScopedProvider_default] = true;
    dart.addTypeCaches(ScopedProvider);
    dart.setMethodSignature(ScopedProvider, () => ({
      __proto__: dart.getMethods(ScopedProvider.__proto__),
      createElement: dart.fnType(dart.legacy(framework._ScopedProviderElement$(dart.legacy(Listened))), []),
      createState: dart.fnType(dart.legacy(framework._ScopedProviderState$(dart.legacy(Listened))), []),
      overrideWithValue: dart.fnType(dart.legacy(framework.Override), [dart.legacy(core.Object)]),
      overrideAs: dart.fnType(dart.legacy(framework.Override), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(ScopedProvider, I[0]);
    return ScopedProvider;
  });
  framework.ScopedProvider = framework.ScopedProvider$();
  dart.addTypeTests(framework.ScopedProvider, _is_ScopedProvider_default);
  const _is__ScopedProviderElement_default = Symbol('_is__ScopedProviderElement_default');
  framework._ScopedProviderElement$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ProviderBaseOfTL$TL = () => (ProviderBaseOfTL$TL = dart.constFn(framework.ProviderBase$(TL(), TL())))();
    var ProviderBaseLOfTL$TL = () => (ProviderBaseLOfTL$TL = dart.constFn(dart.legacy(ProviderBaseOfTL$TL())))();
    class _ScopedProviderElement extends framework.AutoDisposeProviderElement$(dart.legacy(T), dart.legacy(T)) {
      update(newProvider) {
        ProviderBaseLOfTL$TL().as(newProvider);
        super.update(newProvider);
        this.markMustRecomputeState();
      }
    }
    (_ScopedProviderElement.new = function(provider) {
      _ScopedProviderElement.__proto__.new.call(this, provider);
      ;
    }).prototype = _ScopedProviderElement.prototype;
    dart.addTypeTests(_ScopedProviderElement);
    _ScopedProviderElement.prototype[_is__ScopedProviderElement_default] = true;
    dart.addTypeCaches(_ScopedProviderElement);
    dart.setLibraryUri(_ScopedProviderElement, I[0]);
    return _ScopedProviderElement;
  });
  framework._ScopedProviderElement = framework._ScopedProviderElement$();
  dart.addTypeTests(framework._ScopedProviderElement, _is__ScopedProviderElement_default);
  const _is__ScopedProviderState_default = Symbol('_is__ScopedProviderState_default');
  framework._ScopedProviderState$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class _ScopedProviderState extends framework.ProviderStateBase$(dart.legacy(T), dart.legacy(T)) {
      valueChanged(opts) {
        let previous = opts && 'previous' in opts ? opts.previous : null;
        TL().as(previous);
        if (!dart.equals(this.createdValue, this.exposedValue)) {
          this.exposedValue = this.createdValue;
        }
      }
    }
    (_ScopedProviderState.new = function() {
      _ScopedProviderState.__proto__.new.call(this);
      ;
    }).prototype = _ScopedProviderState.prototype;
    dart.addTypeTests(_ScopedProviderState);
    _ScopedProviderState.prototype[_is__ScopedProviderState_default] = true;
    dart.addTypeCaches(_ScopedProviderState);
    dart.setMethodSignature(_ScopedProviderState, () => ({
      __proto__: dart.getMethods(_ScopedProviderState.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {})
    }));
    dart.setLibraryUri(_ScopedProviderState, I[0]);
    return _ScopedProviderState;
  });
  framework._ScopedProviderState = framework._ScopedProviderState$();
  dart.addTypeTests(framework._ScopedProviderState, _is__ScopedProviderState_default);
  const _is_ValueProvider_default = Symbol('_is_ValueProvider_default');
  framework.ValueProvider$ = dart.generic((Created, Listened) => {
    var CreatedL = () => (CreatedL = dart.constFn(dart.legacy(Created)))();
    var ValueProviderElementOfCreatedL$ListenedL = () => (ValueProviderElementOfCreatedL$ListenedL = dart.constFn(framework.ValueProviderElement$(CreatedL(), ListenedL())))();
    var ValueProviderElementLOfCreatedL$ListenedL = () => (ValueProviderElementLOfCreatedL$ListenedL = dart.constFn(dart.legacy(ValueProviderElementOfCreatedL$ListenedL())))();
    var ProviderReferenceLToCreatedL = () => (ProviderReferenceLToCreatedL = dart.constFn(dart.fnType(CreatedL(), [T$.ProviderReferenceL()])))();
    var _ValueProviderStateOfCreatedL$ListenedL = () => (_ValueProviderStateOfCreatedL$ListenedL = dart.constFn(framework._ValueProviderState$(CreatedL(), ListenedL())))();
    var ListenedL = () => (ListenedL = dart.constFn(dart.legacy(Listened)))();
    class ValueProvider extends framework.AlwaysAliveProviderBase$(dart.legacy(Created), dart.legacy(Listened)) {
      createState() {
        return new (_ValueProviderStateOfCreatedL$ListenedL()).new();
      }
      createElement() {
        return new (ValueProviderElementOfCreatedL$ListenedL()).new(this);
      }
      overrideWithValue(value) {
        ListenedL().as(value);
        dart.throw(new core.UnimplementedError.new());
      }
    }
    (ValueProvider.new = function(create, _value) {
      this[_value$] = _value;
      ValueProvider.__proto__.new.call(this, dart.fn(ref => create(ValueProviderElementLOfCreatedL$ListenedL().as(ref)), ProviderReferenceLToCreatedL()), null);
      ;
    }).prototype = ValueProvider.prototype;
    dart.addTypeTests(ValueProvider);
    ValueProvider.prototype[_is_ValueProvider_default] = true;
    dart.addTypeCaches(ValueProvider);
    dart.setMethodSignature(ValueProvider, () => ({
      __proto__: dart.getMethods(ValueProvider.__proto__),
      createState: dart.fnType(dart.legacy(framework._ValueProviderState$(dart.legacy(Created), dart.legacy(Listened))), []),
      createElement: dart.fnType(dart.legacy(framework.ValueProviderElement$(dart.legacy(Created), dart.legacy(Listened))), [])
    }));
    dart.setLibraryUri(ValueProvider, I[0]);
    dart.setFieldSignature(ValueProvider, () => ({
      __proto__: dart.getFields(ValueProvider.__proto__),
      [_value$]: dart.finalFieldType(dart.legacy(Listened))
    }));
    return ValueProvider;
  });
  framework.ValueProvider = framework.ValueProvider$();
  dart.addTypeTests(framework.ValueProvider, _is_ValueProvider_default);
  var onChange = dart.privateName(framework, "ValueProviderElement.onChange");
  const _is_ValueProviderElement_default = Symbol('_is_ValueProviderElement_default');
  framework.ValueProviderElement$ = dart.generic((Created, Listened) => {
    var CreatedL = () => (CreatedL = dart.constFn(dart.legacy(Created)))();
    var ProviderBaseOfCreatedL$ListenedL = () => (ProviderBaseOfCreatedL$ListenedL = dart.constFn(framework.ProviderBase$(CreatedL(), ListenedL())))();
    var ProviderBaseLOfCreatedL$ListenedL = () => (ProviderBaseLOfCreatedL$ListenedL = dart.constFn(dart.legacy(ProviderBaseOfCreatedL$ListenedL())))();
    var ValueProviderOfCreatedL$ListenedL = () => (ValueProviderOfCreatedL$ListenedL = dart.constFn(framework.ValueProvider$(CreatedL(), ListenedL())))();
    var ValueProviderLOfCreatedL$ListenedL = () => (ValueProviderLOfCreatedL$ListenedL = dart.constFn(dart.legacy(ValueProviderOfCreatedL$ListenedL())))();
    var ListenedL = () => (ListenedL = dart.constFn(dart.legacy(Listened)))();
    class ValueProviderElement extends framework.ProviderElement$(dart.legacy(Created), dart.legacy(Listened)) {
      get onChange() {
        return this[onChange];
      }
      set onChange(value) {
        this[onChange] = value;
      }
      update(newProvider) {
        let t18;
        ProviderBaseLOfCreatedL$ListenedL().as(newProvider);
        super.update(newProvider);
        let newValue = ValueProviderLOfCreatedL$ListenedL().as(this.provider)[_value$];
        if (!dart.equals(newValue, this.state[_exposedValue])) {
          this.state.exposedValue = newValue;
          t18 = this.onChange;
          t18 == null ? null : t18(newValue);
        }
      }
    }
    (ValueProviderElement.new = function(provider) {
      this[onChange] = null;
      ValueProviderElement.__proto__.new.call(this, provider);
      ;
    }).prototype = ValueProviderElement.prototype;
    dart.addTypeTests(ValueProviderElement);
    ValueProviderElement.prototype[_is_ValueProviderElement_default] = true;
    dart.addTypeCaches(ValueProviderElement);
    dart.setLibraryUri(ValueProviderElement, I[0]);
    dart.setFieldSignature(ValueProviderElement, () => ({
      __proto__: dart.getFields(ValueProviderElement.__proto__),
      onChange: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(Listened)])))
    }));
    return ValueProviderElement;
  });
  framework.ValueProviderElement = framework.ValueProviderElement$();
  dart.addTypeTests(framework.ValueProviderElement, _is_ValueProviderElement_default);
  const _is__ValueProviderState_default = Symbol('_is__ValueProviderState_default');
  framework._ValueProviderState$ = dart.generic((Created, Listened) => {
    var CreatedL = () => (CreatedL = dart.constFn(dart.legacy(Created)))();
    var ValueProviderOfCreatedL$ListenedL = () => (ValueProviderOfCreatedL$ListenedL = dart.constFn(framework.ValueProvider$(CreatedL(), ListenedL())))();
    var ValueProviderLOfCreatedL$ListenedL = () => (ValueProviderLOfCreatedL$ListenedL = dart.constFn(dart.legacy(ValueProviderOfCreatedL$ListenedL())))();
    var ListenedL = () => (ListenedL = dart.constFn(dart.legacy(Listened)))();
    class _ValueProviderState extends framework.ProviderStateBase$(dart.legacy(Created), dart.legacy(Listened)) {
      valueChanged(opts) {
        let previous = opts && 'previous' in opts ? opts.previous : null;
        this.exposedValue = ValueProviderLOfCreatedL$ListenedL().as(T$.ProviderElementL().as(this.ref).provider)[_value$];
      }
    }
    (_ValueProviderState.new = function() {
      _ValueProviderState.__proto__.new.call(this);
      ;
    }).prototype = _ValueProviderState.prototype;
    dart.addTypeTests(_ValueProviderState);
    _ValueProviderState.prototype[_is__ValueProviderState_default] = true;
    dart.addTypeCaches(_ValueProviderState);
    dart.setMethodSignature(_ValueProviderState, () => ({
      __proto__: dart.getMethods(_ValueProviderState.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {})
    }));
    dart.setLibraryUri(_ValueProviderState, I[0]);
    return _ValueProviderState;
  });
  framework._ValueProviderState = framework._ValueProviderState$();
  dart.addTypeTests(framework._ValueProviderState, _is__ValueProviderState_default);
  framework.describeIdentity = function describeIdentity(object) {
    return dart.str(dart.runtimeType(object)) + "#" + dart.str(framework.shortHash(object));
  };
  framework.shortHash = function shortHash(object) {
    return dart.hashCode(object)[$toUnsigned](20)[$toRadixString](16)[$padLeft](5, "0");
  };
  framework._runGuarded = function _runGuarded(cb) {
    try {
      cb();
    } catch (e) {
      let err = dart.getThrown(e);
      let stack = dart.stackTrace(e);
      async.Zone.current.handleUncaughtError(err, stack);
    }
  };
  framework._runUnaryGuarded = function _runUnaryGuarded(T, Res, cb, value) {
    try {
      cb(value);
    } catch (e) {
      let err = dart.getThrown(e);
      let stack = dart.stackTrace(e);
      async.Zone.current.handleUncaughtError(err, stack);
    }
  };
  framework._runBinaryGuarded = function _runBinaryGuarded(A, B, cb, value, value2) {
    try {
      cb(value, value2);
    } catch (e) {
      let err = dart.getThrown(e);
      let stack = dart.stackTrace(e);
      async.Zone.current.handleUncaughtError(err, stack);
    }
  };
  framework['FamilyX|overrideWithProvider'] = function FamilyX$124overrideWithProvider(Created, Listened, Param, Ref, P, $this, builderOverride) {
    return new framework.FamilyOverride.new($this, dart.fn(param => $this.create(dart.legacy(Param).as(param), builderOverride, null), dart.fnType(dart.legacy(P), [dart.dynamic])));
  };
  framework['FamilyX|get#overrideWithProvider'] = function FamilyX$124get$35overrideWithProvider(Created, Listened, Param, Ref, P, $this) {
    return dart.fn(builderOverride => framework['FamilyX|overrideWithProvider'](dart.legacy(Created), dart.legacy(Listened), dart.legacy(Param), dart.legacy(Ref), dart.legacy(P), $this, builderOverride), dart.fnType(T$.OverrideL(), [dart.legacy(dart.fnType(dart.legacy(Created), [dart.legacy(Ref), dart.legacy(Param)]))]));
  };
  dart.defineLazy(framework, {
    /*framework._circularDependencyLock*/get _circularDependencyLock() {
      return null;
    },
    set _circularDependencyLock(_) {}
  }, true);
  builders.StateProviderBuilder = class StateProviderBuilder extends core.Object {
    call(T, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (state_provider.StateProvider$(dart.legacy(T))).new(create, {name: name});
    }
    get autoDispose() {
      return C[4] || CT.C4;
    }
    get family() {
      return C[3] || CT.C3;
    }
  };
  (builders.StateProviderBuilder.new = function() {
    ;
  }).prototype = builders.StateProviderBuilder.prototype;
  dart.addTypeTests(builders.StateProviderBuilder);
  dart.addTypeCaches(builders.StateProviderBuilder);
  dart.setMethodSignature(builders.StateProviderBuilder, () => ({
    __proto__: dart.getMethods(builders.StateProviderBuilder.__proto__),
    call: dart.gFnType(T => [dart.legacy(state_provider.StateProvider$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.ProviderReference)]))], {name: dart.legacy(core.String)}, {}])
  }));
  dart.setGetterSignature(builders.StateProviderBuilder, () => ({
    __proto__: dart.getGetters(builders.StateProviderBuilder.__proto__),
    autoDispose: dart.legacy(builders.AutoDisposeStateProviderBuilder),
    family: dart.legacy(builders.StateProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.StateProviderBuilder, I[13]);
  builders.StateProviderFamilyBuilder = class StateProviderFamilyBuilder extends core.Object {
    call(T, Value, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (state_provider.StateProviderFamily$(dart.legacy(T), dart.legacy(Value))).new(create, {name: name});
    }
    get autoDispose() {
      return C[15] || CT.C15;
    }
  };
  (builders.StateProviderFamilyBuilder.new = function() {
    ;
  }).prototype = builders.StateProviderFamilyBuilder.prototype;
  dart.addTypeTests(builders.StateProviderFamilyBuilder);
  dart.addTypeCaches(builders.StateProviderFamilyBuilder);
  dart.setMethodSignature(builders.StateProviderFamilyBuilder, () => ({
    __proto__: dart.getMethods(builders.StateProviderFamilyBuilder.__proto__),
    call: dart.gFnType((T, Value) => [dart.legacy(state_provider.StateProviderFamily$(dart.legacy(T), dart.legacy(Value))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.ProviderReference), dart.legacy(Value)]))], {name: dart.legacy(core.String)}, {}])
  }));
  dart.setGetterSignature(builders.StateProviderFamilyBuilder, () => ({
    __proto__: dart.getGetters(builders.StateProviderFamilyBuilder.__proto__),
    autoDispose: dart.legacy(builders.AutoDisposeStateProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.StateProviderFamilyBuilder, I[13]);
  builders.StateNotifierProviderBuilder = class StateNotifierProviderBuilder extends core.Object {
    call(T, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (state_notifier_provider.StateNotifierProvider$(dart.legacy(T))).new(create, {name: name});
    }
    get autoDispose() {
      return C[10] || CT.C10;
    }
    get family() {
      return C[9] || CT.C9;
    }
  };
  (builders.StateNotifierProviderBuilder.new = function() {
    ;
  }).prototype = builders.StateNotifierProviderBuilder.prototype;
  dart.addTypeTests(builders.StateNotifierProviderBuilder);
  dart.addTypeCaches(builders.StateNotifierProviderBuilder);
  dart.setMethodSignature(builders.StateNotifierProviderBuilder, () => ({
    __proto__: dart.getMethods(builders.StateNotifierProviderBuilder.__proto__),
    call: dart.gFnType(T => [dart.legacy(state_notifier_provider.StateNotifierProvider$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.ProviderReference)]))], {name: dart.legacy(core.String)}, {}], T => [dart.legacy(state_notifier.StateNotifier)])
  }));
  dart.setGetterSignature(builders.StateNotifierProviderBuilder, () => ({
    __proto__: dart.getGetters(builders.StateNotifierProviderBuilder.__proto__),
    autoDispose: dart.legacy(builders.AutoDisposeStateNotifierProviderBuilder),
    family: dart.legacy(builders.StateNotifierProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.StateNotifierProviderBuilder, I[13]);
  builders.StateNotifierProviderFamilyBuilder = class StateNotifierProviderFamilyBuilder extends core.Object {
    call(T, Value, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (state_notifier_provider.StateNotifierProviderFamily$(dart.legacy(T), dart.legacy(Value))).new(create, {name: name});
    }
    get autoDispose() {
      return C[11] || CT.C11;
    }
  };
  (builders.StateNotifierProviderFamilyBuilder.new = function() {
    ;
  }).prototype = builders.StateNotifierProviderFamilyBuilder.prototype;
  dart.addTypeTests(builders.StateNotifierProviderFamilyBuilder);
  dart.addTypeCaches(builders.StateNotifierProviderFamilyBuilder);
  dart.setMethodSignature(builders.StateNotifierProviderFamilyBuilder, () => ({
    __proto__: dart.getMethods(builders.StateNotifierProviderFamilyBuilder.__proto__),
    call: dart.gFnType((T, Value) => [dart.legacy(state_notifier_provider.StateNotifierProviderFamily$(dart.legacy(T), dart.legacy(Value))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.ProviderReference), dart.legacy(Value)]))], {name: dart.legacy(core.String)}, {}], (T, Value) => [dart.legacy(state_notifier.StateNotifier), dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(builders.StateNotifierProviderFamilyBuilder, () => ({
    __proto__: dart.getGetters(builders.StateNotifierProviderFamilyBuilder.__proto__),
    autoDispose: dart.legacy(builders.AutoDisposeStateNotifierProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.StateNotifierProviderFamilyBuilder, I[13]);
  builders.ProviderBuilder = class ProviderBuilder extends core.Object {
    call(T, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (provider.Provider$(dart.legacy(T))).new(create, {name: name});
    }
    get autoDispose() {
      return C[1] || CT.C1;
    }
    get family() {
      return C[0] || CT.C0;
    }
  };
  (builders.ProviderBuilder.new = function() {
    ;
  }).prototype = builders.ProviderBuilder.prototype;
  dart.addTypeTests(builders.ProviderBuilder);
  dart.addTypeCaches(builders.ProviderBuilder);
  dart.setMethodSignature(builders.ProviderBuilder, () => ({
    __proto__: dart.getMethods(builders.ProviderBuilder.__proto__),
    call: dart.gFnType(T => [dart.legacy(provider.Provider$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.ProviderReference)]))], {name: dart.legacy(core.String)}, {}])
  }));
  dart.setGetterSignature(builders.ProviderBuilder, () => ({
    __proto__: dart.getGetters(builders.ProviderBuilder.__proto__),
    autoDispose: dart.legacy(builders.AutoDisposeProviderBuilder),
    family: dart.legacy(builders.ProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.ProviderBuilder, I[13]);
  builders.ProviderFamilyBuilder = class ProviderFamilyBuilder extends core.Object {
    call(T, Value, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (provider.ProviderFamily$(dart.legacy(T), dart.legacy(Value))).new(create, {name: name});
    }
    get autoDispose() {
      return C[2] || CT.C2;
    }
  };
  (builders.ProviderFamilyBuilder.new = function() {
    ;
  }).prototype = builders.ProviderFamilyBuilder.prototype;
  dart.addTypeTests(builders.ProviderFamilyBuilder);
  dart.addTypeCaches(builders.ProviderFamilyBuilder);
  dart.setMethodSignature(builders.ProviderFamilyBuilder, () => ({
    __proto__: dart.getMethods(builders.ProviderFamilyBuilder.__proto__),
    call: dart.gFnType((T, Value) => [dart.legacy(provider.ProviderFamily$(dart.legacy(T), dart.legacy(Value))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.ProviderReference), dart.legacy(Value)]))], {name: dart.legacy(core.String)}, {}])
  }));
  dart.setGetterSignature(builders.ProviderFamilyBuilder, () => ({
    __proto__: dart.getGetters(builders.ProviderFamilyBuilder.__proto__),
    autoDispose: dart.legacy(builders.AutoDisposeProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.ProviderFamilyBuilder, I[13]);
  builders.FutureProviderBuilder = class FutureProviderBuilder extends core.Object {
    call(T, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (future_provider.FutureProvider$(dart.legacy(T))).new(create, {name: name});
    }
    get autoDispose() {
      return C[16] || CT.C16;
    }
    get family() {
      return C[17] || CT.C17;
    }
  };
  (builders.FutureProviderBuilder.new = function() {
    ;
  }).prototype = builders.FutureProviderBuilder.prototype;
  dart.addTypeTests(builders.FutureProviderBuilder);
  dart.addTypeCaches(builders.FutureProviderBuilder);
  dart.setMethodSignature(builders.FutureProviderBuilder, () => ({
    __proto__: dart.getMethods(builders.FutureProviderBuilder.__proto__),
    call: dart.gFnType(T => [dart.legacy(future_provider.FutureProvider$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(framework.ProviderReference)]))], {name: dart.legacy(core.String)}, {}])
  }));
  dart.setGetterSignature(builders.FutureProviderBuilder, () => ({
    __proto__: dart.getGetters(builders.FutureProviderBuilder.__proto__),
    autoDispose: dart.legacy(builders.AutoDisposeFutureProviderBuilder),
    family: dart.legacy(builders.FutureProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.FutureProviderBuilder, I[13]);
  builders.FutureProviderFamilyBuilder = class FutureProviderFamilyBuilder extends core.Object {
    call(T, Value, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (future_provider.FutureProviderFamily$(dart.legacy(T), dart.legacy(Value))).new(create, {name: name});
    }
    get autoDispose() {
      return C[18] || CT.C18;
    }
  };
  (builders.FutureProviderFamilyBuilder.new = function() {
    ;
  }).prototype = builders.FutureProviderFamilyBuilder.prototype;
  dart.addTypeTests(builders.FutureProviderFamilyBuilder);
  dart.addTypeCaches(builders.FutureProviderFamilyBuilder);
  dart.setMethodSignature(builders.FutureProviderFamilyBuilder, () => ({
    __proto__: dart.getMethods(builders.FutureProviderFamilyBuilder.__proto__),
    call: dart.gFnType((T, Value) => [dart.legacy(future_provider.FutureProviderFamily$(dart.legacy(T), dart.legacy(Value))), [dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(framework.ProviderReference), dart.legacy(Value)]))], {name: dart.legacy(core.String)}, {}])
  }));
  dart.setGetterSignature(builders.FutureProviderFamilyBuilder, () => ({
    __proto__: dart.getGetters(builders.FutureProviderFamilyBuilder.__proto__),
    autoDispose: dart.legacy(builders.AutoDisposeFutureProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.FutureProviderFamilyBuilder, I[13]);
  builders.StreamProviderBuilder = class StreamProviderBuilder extends core.Object {
    call(T, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (stream_provider.StreamProvider$(dart.legacy(T))).new(create, {name: name});
    }
    get autoDispose() {
      return C[8] || CT.C8;
    }
    get family() {
      return C[7] || CT.C7;
    }
  };
  (builders.StreamProviderBuilder.new = function() {
    ;
  }).prototype = builders.StreamProviderBuilder.prototype;
  dart.addTypeTests(builders.StreamProviderBuilder);
  dart.addTypeCaches(builders.StreamProviderBuilder);
  dart.setMethodSignature(builders.StreamProviderBuilder, () => ({
    __proto__: dart.getMethods(builders.StreamProviderBuilder.__proto__),
    call: dart.gFnType(T => [dart.legacy(stream_provider.StreamProvider$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(framework.ProviderReference)]))], {name: dart.legacy(core.String)}, {}])
  }));
  dart.setGetterSignature(builders.StreamProviderBuilder, () => ({
    __proto__: dart.getGetters(builders.StreamProviderBuilder.__proto__),
    autoDispose: dart.legacy(builders.AutoDisposeStreamProviderBuilder),
    family: dart.legacy(builders.StreamProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.StreamProviderBuilder, I[13]);
  builders.StreamProviderFamilyBuilder = class StreamProviderFamilyBuilder extends core.Object {
    call(T, Value, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (stream_provider.StreamProviderFamily$(dart.legacy(T), dart.legacy(Value))).new(create, {name: name});
    }
    get autoDispose() {
      return C[6] || CT.C6;
    }
  };
  (builders.StreamProviderFamilyBuilder.new = function() {
    ;
  }).prototype = builders.StreamProviderFamilyBuilder.prototype;
  dart.addTypeTests(builders.StreamProviderFamilyBuilder);
  dart.addTypeCaches(builders.StreamProviderFamilyBuilder);
  dart.setMethodSignature(builders.StreamProviderFamilyBuilder, () => ({
    __proto__: dart.getMethods(builders.StreamProviderFamilyBuilder.__proto__),
    call: dart.gFnType((T, Value) => [dart.legacy(stream_provider.StreamProviderFamily$(dart.legacy(T), dart.legacy(Value))), [dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(framework.ProviderReference), dart.legacy(Value)]))], {name: dart.legacy(core.String)}, {}])
  }));
  dart.setGetterSignature(builders.StreamProviderFamilyBuilder, () => ({
    __proto__: dart.getGetters(builders.StreamProviderFamilyBuilder.__proto__),
    autoDispose: dart.legacy(builders.AutoDisposeStreamProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.StreamProviderFamilyBuilder, I[13]);
  builders.AutoDisposeStateProviderBuilder = class AutoDisposeStateProviderBuilder extends core.Object {
    call(T, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (state_provider.AutoDisposeStateProvider$(dart.legacy(T))).new(create, {name: name});
    }
    get family() {
      return C[15] || CT.C15;
    }
  };
  (builders.AutoDisposeStateProviderBuilder.new = function() {
    ;
  }).prototype = builders.AutoDisposeStateProviderBuilder.prototype;
  dart.addTypeTests(builders.AutoDisposeStateProviderBuilder);
  dart.addTypeCaches(builders.AutoDisposeStateProviderBuilder);
  dart.setMethodSignature(builders.AutoDisposeStateProviderBuilder, () => ({
    __proto__: dart.getMethods(builders.AutoDisposeStateProviderBuilder.__proto__),
    call: dart.gFnType(T => [dart.legacy(state_provider.AutoDisposeStateProvider$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.AutoDisposeProviderReference)]))], {name: dart.legacy(core.String)}, {}])
  }));
  dart.setGetterSignature(builders.AutoDisposeStateProviderBuilder, () => ({
    __proto__: dart.getGetters(builders.AutoDisposeStateProviderBuilder.__proto__),
    family: dart.legacy(builders.AutoDisposeStateProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.AutoDisposeStateProviderBuilder, I[13]);
  builders.AutoDisposeStateProviderFamilyBuilder = class AutoDisposeStateProviderFamilyBuilder extends core.Object {
    call(T, Value, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (state_provider.AutoDisposeStateProviderFamily$(dart.legacy(T), dart.legacy(Value))).new(create, {name: name});
    }
  };
  (builders.AutoDisposeStateProviderFamilyBuilder.new = function() {
    ;
  }).prototype = builders.AutoDisposeStateProviderFamilyBuilder.prototype;
  dart.addTypeTests(builders.AutoDisposeStateProviderFamilyBuilder);
  dart.addTypeCaches(builders.AutoDisposeStateProviderFamilyBuilder);
  dart.setMethodSignature(builders.AutoDisposeStateProviderFamilyBuilder, () => ({
    __proto__: dart.getMethods(builders.AutoDisposeStateProviderFamilyBuilder.__proto__),
    call: dart.gFnType((T, Value) => [dart.legacy(state_provider.AutoDisposeStateProviderFamily$(dart.legacy(T), dart.legacy(Value))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.AutoDisposeProviderReference), dart.legacy(Value)]))], {name: dart.legacy(core.String)}, {}])
  }));
  dart.setLibraryUri(builders.AutoDisposeStateProviderFamilyBuilder, I[13]);
  builders.AutoDisposeStateNotifierProviderBuilder = class AutoDisposeStateNotifierProviderBuilder extends core.Object {
    call(T, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (state_notifier_provider.AutoDisposeStateNotifierProvider$(dart.legacy(T))).new(create, {name: name});
    }
    get family() {
      return C[11] || CT.C11;
    }
  };
  (builders.AutoDisposeStateNotifierProviderBuilder.new = function() {
    ;
  }).prototype = builders.AutoDisposeStateNotifierProviderBuilder.prototype;
  dart.addTypeTests(builders.AutoDisposeStateNotifierProviderBuilder);
  dart.addTypeCaches(builders.AutoDisposeStateNotifierProviderBuilder);
  dart.setMethodSignature(builders.AutoDisposeStateNotifierProviderBuilder, () => ({
    __proto__: dart.getMethods(builders.AutoDisposeStateNotifierProviderBuilder.__proto__),
    call: dart.gFnType(T => [dart.legacy(state_notifier_provider.AutoDisposeStateNotifierProvider$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.AutoDisposeProviderReference)]))], {name: dart.legacy(core.String)}, {}], T => [dart.legacy(state_notifier.StateNotifier)])
  }));
  dart.setGetterSignature(builders.AutoDisposeStateNotifierProviderBuilder, () => ({
    __proto__: dart.getGetters(builders.AutoDisposeStateNotifierProviderBuilder.__proto__),
    family: dart.legacy(builders.AutoDisposeStateNotifierProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.AutoDisposeStateNotifierProviderBuilder, I[13]);
  builders.AutoDisposeStateNotifierProviderFamilyBuilder = class AutoDisposeStateNotifierProviderFamilyBuilder extends core.Object {
    call(T, Value, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (state_notifier_provider.AutoDisposeStateNotifierProviderFamily$(dart.legacy(T), dart.legacy(Value))).new(create, {name: name});
    }
  };
  (builders.AutoDisposeStateNotifierProviderFamilyBuilder.new = function() {
    ;
  }).prototype = builders.AutoDisposeStateNotifierProviderFamilyBuilder.prototype;
  dart.addTypeTests(builders.AutoDisposeStateNotifierProviderFamilyBuilder);
  dart.addTypeCaches(builders.AutoDisposeStateNotifierProviderFamilyBuilder);
  dart.setMethodSignature(builders.AutoDisposeStateNotifierProviderFamilyBuilder, () => ({
    __proto__: dart.getMethods(builders.AutoDisposeStateNotifierProviderFamilyBuilder.__proto__),
    call: dart.gFnType((T, Value) => [dart.legacy(state_notifier_provider.AutoDisposeStateNotifierProviderFamily$(dart.legacy(T), dart.legacy(Value))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.AutoDisposeProviderReference), dart.legacy(Value)]))], {name: dart.legacy(core.String)}, {}], (T, Value) => [dart.legacy(state_notifier.StateNotifier), dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(builders.AutoDisposeStateNotifierProviderFamilyBuilder, I[13]);
  builders.AutoDisposeProviderBuilder = class AutoDisposeProviderBuilder extends core.Object {
    call(T, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (provider.AutoDisposeProvider$(dart.legacy(T))).new(create, {name: name});
    }
    get family() {
      return C[2] || CT.C2;
    }
  };
  (builders.AutoDisposeProviderBuilder.new = function() {
    ;
  }).prototype = builders.AutoDisposeProviderBuilder.prototype;
  dart.addTypeTests(builders.AutoDisposeProviderBuilder);
  dart.addTypeCaches(builders.AutoDisposeProviderBuilder);
  dart.setMethodSignature(builders.AutoDisposeProviderBuilder, () => ({
    __proto__: dart.getMethods(builders.AutoDisposeProviderBuilder.__proto__),
    call: dart.gFnType(T => [dart.legacy(provider.AutoDisposeProvider$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.AutoDisposeProviderReference)]))], {name: dart.legacy(core.String)}, {}])
  }));
  dart.setGetterSignature(builders.AutoDisposeProviderBuilder, () => ({
    __proto__: dart.getGetters(builders.AutoDisposeProviderBuilder.__proto__),
    family: dart.legacy(builders.AutoDisposeProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.AutoDisposeProviderBuilder, I[13]);
  builders.AutoDisposeProviderFamilyBuilder = class AutoDisposeProviderFamilyBuilder extends core.Object {
    call(T, Value, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (provider.AutoDisposeProviderFamily$(dart.legacy(T), dart.legacy(Value))).new(create, {name: name});
    }
  };
  (builders.AutoDisposeProviderFamilyBuilder.new = function() {
    ;
  }).prototype = builders.AutoDisposeProviderFamilyBuilder.prototype;
  dart.addTypeTests(builders.AutoDisposeProviderFamilyBuilder);
  dart.addTypeCaches(builders.AutoDisposeProviderFamilyBuilder);
  dart.setMethodSignature(builders.AutoDisposeProviderFamilyBuilder, () => ({
    __proto__: dart.getMethods(builders.AutoDisposeProviderFamilyBuilder.__proto__),
    call: dart.gFnType((T, Value) => [dart.legacy(provider.AutoDisposeProviderFamily$(dart.legacy(T), dart.legacy(Value))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.AutoDisposeProviderReference), dart.legacy(Value)]))], {name: dart.legacy(core.String)}, {}])
  }));
  dart.setLibraryUri(builders.AutoDisposeProviderFamilyBuilder, I[13]);
  builders.AutoDisposeFutureProviderBuilder = class AutoDisposeFutureProviderBuilder extends core.Object {
    call(T, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (future_provider.AutoDisposeFutureProvider$(dart.legacy(T))).new(create, {name: name});
    }
    get family() {
      return C[18] || CT.C18;
    }
  };
  (builders.AutoDisposeFutureProviderBuilder.new = function() {
    ;
  }).prototype = builders.AutoDisposeFutureProviderBuilder.prototype;
  dart.addTypeTests(builders.AutoDisposeFutureProviderBuilder);
  dart.addTypeCaches(builders.AutoDisposeFutureProviderBuilder);
  dart.setMethodSignature(builders.AutoDisposeFutureProviderBuilder, () => ({
    __proto__: dart.getMethods(builders.AutoDisposeFutureProviderBuilder.__proto__),
    call: dart.gFnType(T => [dart.legacy(future_provider.AutoDisposeFutureProvider$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(framework.AutoDisposeProviderReference)]))], {name: dart.legacy(core.String)}, {}])
  }));
  dart.setGetterSignature(builders.AutoDisposeFutureProviderBuilder, () => ({
    __proto__: dart.getGetters(builders.AutoDisposeFutureProviderBuilder.__proto__),
    family: dart.legacy(builders.AutoDisposeFutureProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.AutoDisposeFutureProviderBuilder, I[13]);
  builders.AutoDisposeFutureProviderFamilyBuilder = class AutoDisposeFutureProviderFamilyBuilder extends core.Object {
    call(T, Value, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (future_provider.AutoDisposeFutureProviderFamily$(dart.legacy(T), dart.legacy(Value))).new(create, {name: name});
    }
  };
  (builders.AutoDisposeFutureProviderFamilyBuilder.new = function() {
    ;
  }).prototype = builders.AutoDisposeFutureProviderFamilyBuilder.prototype;
  dart.addTypeTests(builders.AutoDisposeFutureProviderFamilyBuilder);
  dart.addTypeCaches(builders.AutoDisposeFutureProviderFamilyBuilder);
  dart.setMethodSignature(builders.AutoDisposeFutureProviderFamilyBuilder, () => ({
    __proto__: dart.getMethods(builders.AutoDisposeFutureProviderFamilyBuilder.__proto__),
    call: dart.gFnType((T, Value) => [dart.legacy(future_provider.AutoDisposeFutureProviderFamily$(dart.legacy(T), dart.legacy(Value))), [dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(framework.AutoDisposeProviderReference), dart.legacy(Value)]))], {name: dart.legacy(core.String)}, {}])
  }));
  dart.setLibraryUri(builders.AutoDisposeFutureProviderFamilyBuilder, I[13]);
  builders.AutoDisposeStreamProviderBuilder = class AutoDisposeStreamProviderBuilder extends core.Object {
    call(T, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (stream_provider.AutoDisposeStreamProvider$(dart.legacy(T))).new(create, {name: name});
    }
    get family() {
      return C[6] || CT.C6;
    }
  };
  (builders.AutoDisposeStreamProviderBuilder.new = function() {
    ;
  }).prototype = builders.AutoDisposeStreamProviderBuilder.prototype;
  dart.addTypeTests(builders.AutoDisposeStreamProviderBuilder);
  dart.addTypeCaches(builders.AutoDisposeStreamProviderBuilder);
  dart.setMethodSignature(builders.AutoDisposeStreamProviderBuilder, () => ({
    __proto__: dart.getMethods(builders.AutoDisposeStreamProviderBuilder.__proto__),
    call: dart.gFnType(T => [dart.legacy(stream_provider.AutoDisposeStreamProvider$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(framework.AutoDisposeProviderReference)]))], {name: dart.legacy(core.String)}, {}])
  }));
  dart.setGetterSignature(builders.AutoDisposeStreamProviderBuilder, () => ({
    __proto__: dart.getGetters(builders.AutoDisposeStreamProviderBuilder.__proto__),
    family: dart.legacy(builders.AutoDisposeStreamProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.AutoDisposeStreamProviderBuilder, I[13]);
  builders.AutoDisposeStreamProviderFamilyBuilder = class AutoDisposeStreamProviderFamilyBuilder extends core.Object {
    call(T, Value, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (stream_provider.AutoDisposeStreamProviderFamily$(dart.legacy(T), dart.legacy(Value))).new(create, {name: name});
    }
  };
  (builders.AutoDisposeStreamProviderFamilyBuilder.new = function() {
    ;
  }).prototype = builders.AutoDisposeStreamProviderFamilyBuilder.prototype;
  dart.addTypeTests(builders.AutoDisposeStreamProviderFamilyBuilder);
  dart.addTypeCaches(builders.AutoDisposeStreamProviderFamilyBuilder);
  dart.setMethodSignature(builders.AutoDisposeStreamProviderFamilyBuilder, () => ({
    __proto__: dart.getMethods(builders.AutoDisposeStreamProviderFamilyBuilder.__proto__),
    call: dart.gFnType((T, Value) => [dart.legacy(stream_provider.AutoDisposeStreamProviderFamily$(dart.legacy(T), dart.legacy(Value))), [dart.legacy(dart.fnType(dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(framework.AutoDisposeProviderReference), dart.legacy(Value)]))], {name: dart.legacy(core.String)}, {}])
  }));
  dart.setLibraryUri(builders.AutoDisposeStreamProviderFamilyBuilder, I[13]);
  const _is__FutureProviderMixin_default = Symbol('_is__FutureProviderMixin_default');
  future_provider._FutureProviderMixin$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var AsyncValueOfTL = () => (AsyncValueOfTL = dart.constFn(common.AsyncValue$(TL())))();
    var AsyncValueLOfTL = () => (AsyncValueLOfTL = dart.constFn(dart.legacy(AsyncValueOfTL())))();
    var FutureOfTL = () => (FutureOfTL = dart.constFn(async.Future$(TL())))();
    var FutureLOfTL = () => (FutureLOfTL = dart.constFn(dart.legacy(FutureOfTL())))();
    var ValueProviderOfFutureLOfTL$AsyncValueLOfTL = () => (ValueProviderOfFutureLOfTL$AsyncValueLOfTL = dart.constFn(framework.ValueProvider$(FutureLOfTL(), AsyncValueLOfTL())))();
    var CompleterOfTL = () => (CompleterOfTL = dart.constFn(async.Completer$(TL())))();
    var AsyncValueLOfTLToNull = () => (AsyncValueLOfTLToNull = dart.constFn(dart.fnType(core.Null, [AsyncValueLOfTL()])))();
    var AsyncValueLOfTLTovoid = () => (AsyncValueLOfTLTovoid = dart.constFn(dart.fnType(dart.void, [AsyncValueLOfTL()])))();
    var AsyncValueLOfTLToLvoid = () => (AsyncValueLOfTLToLvoid = dart.constFn(dart.legacy(AsyncValueLOfTLTovoid())))();
    var ValueProviderElementOfFutureLOfTL$AsyncValueLOfTL = () => (ValueProviderElementOfFutureLOfTL$AsyncValueLOfTL = dart.constFn(framework.ValueProviderElement$(FutureLOfTL(), AsyncValueLOfTL())))();
    var ValueProviderElementLOfFutureLOfTL$AsyncValueLOfTL = () => (ValueProviderElementLOfFutureLOfTL$AsyncValueLOfTL = dart.constFn(dart.legacy(ValueProviderElementOfFutureLOfTL$AsyncValueLOfTL())))();
    var ValueProviderElementLOfFutureLOfTL$AsyncValueLOfTLToFutureLOfTL = () => (ValueProviderElementLOfFutureLOfTL$AsyncValueLOfTLToFutureLOfTL = dart.constFn(dart.fnType(FutureLOfTL(), [ValueProviderElementLOfFutureLOfTL$AsyncValueLOfTL()])))();
    class _FutureProviderMixin extends framework.RootProvider$(dart.legacy(async.Future$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T)))) {}
    _FutureProviderMixin[dart.mixinOn] = RootProvider => class _FutureProviderMixin extends RootProvider {
      overrideWithValue(value) {
        AsyncValueLOfTL().as(value);
        return new framework.ProviderOverride.new(new (ValueProviderOfFutureLOfTL$AsyncValueLOfTL()).new(dart.fn(ref => {
          let t24, t23;
          let completer = CompleterOfTL().new();
          ref.onChange = dart.fn(newValue => {
            if (dart.test(completer.isCompleted)) {
              ref.markMustRecomputeState();
            } else {
              newValue.when(dart.void, {data: dart.bind(completer, 'complete'), loading: dart.fn(() => {
                }, T$.VoidToNull()), error: dart.bind(completer, 'completeError')});
            }
          }, AsyncValueLOfTLToNull());
          t23 = ref;
          t24 = value;
          AsyncValueLOfTLToLvoid().as(t23.onChange)(t24);
          return completer.future;
        }, ValueProviderElementLOfFutureLOfTL$AsyncValueLOfTLToFutureLOfTL()), value), this);
      }
    };
    dart.addTypeTests(_FutureProviderMixin);
    _FutureProviderMixin.prototype[_is__FutureProviderMixin_default] = true;
    dart.addTypeCaches(_FutureProviderMixin);
    _FutureProviderMixin[dart.implements] = () => [framework.RootProvider$(dart.legacy(async.Future$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T))))];
    dart.setLibraryUri(_FutureProviderMixin, I[14]);
    return _FutureProviderMixin;
  });
  future_provider._FutureProviderMixin = future_provider._FutureProviderMixin$();
  dart.addTypeTests(future_provider._FutureProviderMixin, _is__FutureProviderMixin_default);
  var listenedFuture = dart.privateName(future_provider, "_FutureProviderStateMixin.listenedFuture");
  const _is__FutureProviderStateMixin_default = Symbol('_is__FutureProviderStateMixin_default');
  future_provider._FutureProviderStateMixin$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var FutureOfTL = () => (FutureOfTL = dart.constFn(async.Future$(TL())))();
    var FutureLOfTL = () => (FutureLOfTL = dart.constFn(dart.legacy(FutureOfTL())))();
    var _$AsyncDataOfTL = () => (_$AsyncDataOfTL = dart.constFn(common._$AsyncData$(TL())))();
    var TLToNull = () => (TLToNull = dart.constFn(dart.fnType(core.Null, [TL()])))();
    var _$AsyncErrorOfTL = () => (_$AsyncErrorOfTL = dart.constFn(common._$AsyncError$(TL())))();
    class _FutureProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(async.Future$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T)))) {}
    _FutureProviderStateMixin[dart.mixinOn] = ProviderStateBase => class _FutureProviderStateMixin extends ProviderStateBase {
      get listenedFuture() {
        return this[listenedFuture];
      }
      set listenedFuture(value) {
        this[listenedFuture] = FutureLOfTL().as(value);
      }
      valueChanged(opts) {
        let t23;
        let previous = opts && 'previous' in opts ? opts.previous : null;
        FutureLOfTL().as(previous);
        if (dart.equals(this.createdValue, previous)) {
          return;
        }
        let listenedFuture = this.listenedFuture = this.createdValue;
        this.exposedValue = C[5] || CT.C5;
        t23 = listenedFuture;
        t23 == null ? null : t23.then(core.Null, dart.fn(value => {
          if (dart.equals(this.listenedFuture, listenedFuture)) {
            this.exposedValue = new (_$AsyncDataOfTL()).new(value);
          }
        }, TLToNull()), {onError: dart.fn((error, stack) => {
            if (dart.equals(this.listenedFuture, listenedFuture)) {
              this.exposedValue = new (_$AsyncErrorOfTL()).new(error, stack);
            }
          }, T$.ObjectLAndStackTraceLToNull())});
      }
      handleError(error, stackTrace) {
        this.exposedValue = new (_$AsyncErrorOfTL()).new(error, stackTrace);
        return true;
      }
      dispose() {
        this.listenedFuture = null;
        super.dispose();
      }
    };
    (_FutureProviderStateMixin[dart.mixinNew] = function() {
      this[listenedFuture] = null;
    }).prototype = _FutureProviderStateMixin.prototype;
    dart.addTypeTests(_FutureProviderStateMixin);
    _FutureProviderStateMixin.prototype[_is__FutureProviderStateMixin_default] = true;
    dart.addTypeCaches(_FutureProviderStateMixin);
    _FutureProviderStateMixin[dart.implements] = () => [framework.ProviderStateBase$(dart.legacy(async.Future$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T))))];
    dart.setMethodSignature(_FutureProviderStateMixin, () => ({
      __proto__: dart.getMethods(_FutureProviderStateMixin.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {})
    }));
    dart.setLibraryUri(_FutureProviderStateMixin, I[14]);
    dart.setFieldSignature(_FutureProviderStateMixin, () => ({
      __proto__: dart.getFields(_FutureProviderStateMixin.__proto__),
      listenedFuture: dart.fieldType(dart.legacy(async.Future$(dart.legacy(T))))
    }));
    return _FutureProviderStateMixin;
  });
  future_provider._FutureProviderStateMixin = future_provider._FutureProviderStateMixin$();
  dart.addTypeTests(future_provider._FutureProviderStateMixin, _is__FutureProviderStateMixin_default);
  var _future = dart.privateName(future_provider, "_future");
  const _is_AutoDisposeFutureProvider_default = Symbol('_is_AutoDisposeFutureProvider_default');
  future_provider.AutoDisposeFutureProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var FutureOfTL = () => (FutureOfTL = dart.constFn(async.Future$(TL())))();
    var FutureLOfTL = () => (FutureLOfTL = dart.constFn(dart.legacy(FutureOfTL())))();
    var AutoDisposeCreatedProviderOfFutureLOfTL = () => (AutoDisposeCreatedProviderOfFutureLOfTL = dart.constFn(created_provider.AutoDisposeCreatedProvider$(FutureLOfTL())))();
    var _AutoDisposeFutureProviderStateOfTL = () => (_AutoDisposeFutureProviderStateOfTL = dart.constFn(future_provider._AutoDisposeFutureProviderState$(TL())))();
    const AutoDisposeProviderBase__FutureProviderMixin$36 = class AutoDisposeProviderBase__FutureProviderMixin extends framework.AutoDisposeProviderBase$(dart.legacy(async.Future$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T)))) {};
    (AutoDisposeProviderBase__FutureProviderMixin$36.new = function(create, name) {
      AutoDisposeProviderBase__FutureProviderMixin$36.__proto__.new.call(this, create, name);
    }).prototype = AutoDisposeProviderBase__FutureProviderMixin$36.prototype;
    dart.applyMixin(AutoDisposeProviderBase__FutureProviderMixin$36, future_provider._FutureProviderMixin$(dart.legacy(T)));
    class AutoDisposeFutureProvider extends AutoDisposeProviderBase__FutureProviderMixin$36 {
      get future() {
        let t23;
        t23 = this[_future];
        return t23 == null ? this[_future] = new (AutoDisposeCreatedProviderOfFutureLOfTL()).new(this, {name: this.name == null ? null : dart.str(this.name) + ".future"}) : t23;
      }
      createState() {
        return new (_AutoDisposeFutureProviderStateOfTL()).new();
      }
    }
    (AutoDisposeFutureProvider.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      this[_future] = null;
      AutoDisposeFutureProvider.__proto__.new.call(this, create, name);
      ;
    }).prototype = AutoDisposeFutureProvider.prototype;
    dart.addTypeTests(AutoDisposeFutureProvider);
    AutoDisposeFutureProvider.prototype[_is_AutoDisposeFutureProvider_default] = true;
    dart.addTypeCaches(AutoDisposeFutureProvider);
    dart.setMethodSignature(AutoDisposeFutureProvider, () => ({
      __proto__: dart.getMethods(AutoDisposeFutureProvider.__proto__),
      createState: dart.fnType(dart.legacy(future_provider._AutoDisposeFutureProviderState$(dart.legacy(T))), [])
    }));
    dart.setGetterSignature(AutoDisposeFutureProvider, () => ({
      __proto__: dart.getGetters(AutoDisposeFutureProvider.__proto__),
      future: dart.legacy(framework.RootProvider$(dart.legacy(async.Future$(dart.legacy(T))), dart.legacy(async.Future$(dart.legacy(T)))))
    }));
    dart.setLibraryUri(AutoDisposeFutureProvider, I[14]);
    dart.setFieldSignature(AutoDisposeFutureProvider, () => ({
      __proto__: dart.getFields(AutoDisposeFutureProvider.__proto__),
      [_future]: dart.fieldType(dart.legacy(framework.RootProvider$(dart.legacy(async.Future$(dart.legacy(T))), dart.legacy(async.Future$(dart.legacy(T))))))
    }));
    return AutoDisposeFutureProvider;
  });
  future_provider.AutoDisposeFutureProvider = future_provider.AutoDisposeFutureProvider$();
  dart.defineLazy(future_provider.AutoDisposeFutureProvider, {
    /*future_provider.AutoDisposeFutureProvider.family*/get family() {
      return C[18] || CT.C18;
    }
  }, true);
  dart.addTypeTests(future_provider.AutoDisposeFutureProvider, _is_AutoDisposeFutureProvider_default);
  const _is__AutoDisposeFutureProviderState_default = Symbol('_is__AutoDisposeFutureProviderState_default');
  future_provider._AutoDisposeFutureProviderState$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var FutureOfTL = () => (FutureOfTL = dart.constFn(async.Future$(TL())))();
    var FutureLOfTL = () => (FutureLOfTL = dart.constFn(dart.legacy(FutureOfTL())))();
    const ProviderStateBase__FutureProviderStateMixin$36 = class ProviderStateBase__FutureProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(async.Future$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T)))) {};
    (ProviderStateBase__FutureProviderStateMixin$36.new = function() {
      future_provider._FutureProviderStateMixin$(dart.legacy(T))[dart.mixinNew].call(this);
      ProviderStateBase__FutureProviderStateMixin$36.__proto__.new.call(this);
    }).prototype = ProviderStateBase__FutureProviderStateMixin$36.prototype;
    dart.applyMixin(ProviderStateBase__FutureProviderStateMixin$36, future_provider._FutureProviderStateMixin$(dart.legacy(T)));
    class _AutoDisposeFutureProviderState extends ProviderStateBase__FutureProviderStateMixin$36 {
      get listenedFuture() {
        return super.listenedFuture;
      }
      set listenedFuture(value) {
        FutureLOfTL().as(value);
        return super.listenedFuture = value;
      }
      valueChanged(opts) {
        let previous = opts && 'previous' in opts ? opts.previous : null;
        FutureLOfTL().as(previous);
        return super.valueChanged({previous: previous});
      }
      handleError(error, stackTrace) {
        return super.handleError(error, stackTrace);
      }
      dispose() {
        return super.dispose();
      }
    }
    (_AutoDisposeFutureProviderState.new = function() {
      _AutoDisposeFutureProviderState.__proto__.new.call(this);
      ;
    }).prototype = _AutoDisposeFutureProviderState.prototype;
    dart.addTypeTests(_AutoDisposeFutureProviderState);
    _AutoDisposeFutureProviderState.prototype[_is__AutoDisposeFutureProviderState_default] = true;
    dart.addTypeCaches(_AutoDisposeFutureProviderState);
    dart.setMethodSignature(_AutoDisposeFutureProviderState, () => ({
      __proto__: dart.getMethods(_AutoDisposeFutureProviderState.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {})
    }));
    dart.setGetterSignature(_AutoDisposeFutureProviderState, () => ({
      __proto__: dart.getGetters(_AutoDisposeFutureProviderState.__proto__),
      listenedFuture: dart.legacy(async.Future$(dart.legacy(T)))
    }));
    dart.setSetterSignature(_AutoDisposeFutureProviderState, () => ({
      __proto__: dart.getSetters(_AutoDisposeFutureProviderState.__proto__),
      listenedFuture: dart.legacy(core.Object)
    }));
    dart.setLibraryUri(_AutoDisposeFutureProviderState, I[14]);
    return _AutoDisposeFutureProviderState;
  });
  future_provider._AutoDisposeFutureProviderState = future_provider._AutoDisposeFutureProviderState$();
  dart.addTypeTests(future_provider._AutoDisposeFutureProviderState, _is__AutoDisposeFutureProviderState_default);
  const _is_AutoDisposeFutureProviderFamily_default = Symbol('_is_AutoDisposeFutureProviderFamily_default');
  future_provider.AutoDisposeFutureProviderFamily$ = dart.generic((T, A) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var FutureOfTL = () => (FutureOfTL = dart.constFn(async.Future$(TL())))();
    var FutureLOfTL = () => (FutureLOfTL = dart.constFn(dart.legacy(FutureOfTL())))();
    var AutoDisposeProviderReferenceLAndALToFutureLOfTL = () => (AutoDisposeProviderReferenceLAndALToFutureLOfTL = dart.constFn(dart.fnType(FutureLOfTL(), [T$.AutoDisposeProviderReferenceL(), AL()])))();
    var AutoDisposeProviderReferenceLAndALToLFutureLOfTL = () => (AutoDisposeProviderReferenceLAndALToLFutureLOfTL = dart.constFn(dart.legacy(AutoDisposeProviderReferenceLAndALToFutureLOfTL())))();
    var AutoDisposeFutureProviderOfTL = () => (AutoDisposeFutureProviderOfTL = dart.constFn(future_provider.AutoDisposeFutureProvider$(TL())))();
    var AutoDisposeProviderReferenceLToFutureLOfTL = () => (AutoDisposeProviderReferenceLToFutureLOfTL = dart.constFn(dart.fnType(FutureLOfTL(), [T$.AutoDisposeProviderReferenceL()])))();
    var AL = () => (AL = dart.constFn(dart.legacy(A)))();
    class AutoDisposeFutureProviderFamily extends framework.Family$(dart.legacy(async.Future$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T))), dart.legacy(A), dart.legacy(framework.AutoDisposeProviderReference), dart.legacy(future_provider.AutoDisposeFutureProvider$(dart.legacy(T)))) {
      create(value, builder, name) {
        AL().as(value);
        AutoDisposeProviderReferenceLAndALToLFutureLOfTL().as(builder);
        return new (AutoDisposeFutureProviderOfTL()).new(dart.fn(ref => builder(ref, value), AutoDisposeProviderReferenceLToFutureLOfTL()), {name: name});
      }
    }
    (AutoDisposeFutureProviderFamily.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      AutoDisposeFutureProviderFamily.__proto__.new.call(this, create, name);
      ;
    }).prototype = AutoDisposeFutureProviderFamily.prototype;
    dart.addTypeTests(AutoDisposeFutureProviderFamily);
    AutoDisposeFutureProviderFamily.prototype[_is_AutoDisposeFutureProviderFamily_default] = true;
    dart.addTypeCaches(AutoDisposeFutureProviderFamily);
    dart.setMethodSignature(AutoDisposeFutureProviderFamily, () => ({
      __proto__: dart.getMethods(AutoDisposeFutureProviderFamily.__proto__),
      create: dart.fnType(dart.legacy(future_provider.AutoDisposeFutureProvider$(dart.legacy(T))), [dart.legacy(core.Object), dart.legacy(core.Object), dart.legacy(core.String)])
    }));
    dart.setLibraryUri(AutoDisposeFutureProviderFamily, I[14]);
    return AutoDisposeFutureProviderFamily;
  });
  future_provider.AutoDisposeFutureProviderFamily = future_provider.AutoDisposeFutureProviderFamily$();
  dart.addTypeTests(future_provider.AutoDisposeFutureProviderFamily, _is_AutoDisposeFutureProviderFamily_default);
  const _is_FutureProvider_default = Symbol('_is_FutureProvider_default');
  future_provider.FutureProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var FutureOfTL = () => (FutureOfTL = dart.constFn(async.Future$(TL())))();
    var FutureLOfTL = () => (FutureLOfTL = dart.constFn(dart.legacy(FutureOfTL())))();
    var CreatedProviderOfFutureLOfTL = () => (CreatedProviderOfFutureLOfTL = dart.constFn(created_provider.CreatedProvider$(FutureLOfTL())))();
    var _FutureProviderStateOfTL = () => (_FutureProviderStateOfTL = dart.constFn(future_provider._FutureProviderState$(TL())))();
    const AlwaysAliveProviderBase__FutureProviderMixin$36 = class AlwaysAliveProviderBase__FutureProviderMixin extends framework.AlwaysAliveProviderBase$(dart.legacy(async.Future$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T)))) {};
    (AlwaysAliveProviderBase__FutureProviderMixin$36.new = function(create, name) {
      AlwaysAliveProviderBase__FutureProviderMixin$36.__proto__.new.call(this, create, name);
    }).prototype = AlwaysAliveProviderBase__FutureProviderMixin$36.prototype;
    dart.applyMixin(AlwaysAliveProviderBase__FutureProviderMixin$36, future_provider._FutureProviderMixin$(dart.legacy(T)));
    class FutureProvider extends AlwaysAliveProviderBase__FutureProviderMixin$36 {
      get future() {
        let t23;
        t23 = this[_future];
        return t23 == null ? this[_future] = new (CreatedProviderOfFutureLOfTL()).new(this, {name: this.name == null ? null : dart.str(this.name) + ".future"}) : t23;
      }
      createState() {
        return new (_FutureProviderStateOfTL()).new();
      }
    }
    (FutureProvider.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      this[_future] = null;
      FutureProvider.__proto__.new.call(this, create, name);
      ;
    }).prototype = FutureProvider.prototype;
    dart.addTypeTests(FutureProvider);
    FutureProvider.prototype[_is_FutureProvider_default] = true;
    dart.addTypeCaches(FutureProvider);
    dart.setMethodSignature(FutureProvider, () => ({
      __proto__: dart.getMethods(FutureProvider.__proto__),
      createState: dart.fnType(dart.legacy(future_provider._FutureProviderState$(dart.legacy(T))), [])
    }));
    dart.setGetterSignature(FutureProvider, () => ({
      __proto__: dart.getGetters(FutureProvider.__proto__),
      future: dart.legacy(framework.AlwaysAliveProviderBase$(dart.legacy(async.Future$(dart.legacy(T))), dart.legacy(async.Future$(dart.legacy(T)))))
    }));
    dart.setLibraryUri(FutureProvider, I[14]);
    dart.setFieldSignature(FutureProvider, () => ({
      __proto__: dart.getFields(FutureProvider.__proto__),
      [_future]: dart.fieldType(dart.legacy(framework.AlwaysAliveProviderBase$(dart.legacy(async.Future$(dart.legacy(T))), dart.legacy(async.Future$(dart.legacy(T))))))
    }));
    return FutureProvider;
  });
  future_provider.FutureProvider = future_provider.FutureProvider$();
  dart.defineLazy(future_provider.FutureProvider, {
    /*future_provider.FutureProvider.family*/get family() {
      return C[17] || CT.C17;
    },
    /*future_provider.FutureProvider.autoDispose*/get autoDispose() {
      return C[16] || CT.C16;
    }
  }, true);
  dart.addTypeTests(future_provider.FutureProvider, _is_FutureProvider_default);
  const _is__FutureProviderState_default = Symbol('_is__FutureProviderState_default');
  future_provider._FutureProviderState$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var FutureOfTL = () => (FutureOfTL = dart.constFn(async.Future$(TL())))();
    var FutureLOfTL = () => (FutureLOfTL = dart.constFn(dart.legacy(FutureOfTL())))();
    const ProviderStateBase__FutureProviderStateMixin$36 = class ProviderStateBase__FutureProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(async.Future$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T)))) {};
    (ProviderStateBase__FutureProviderStateMixin$36.new = function() {
      future_provider._FutureProviderStateMixin$(dart.legacy(T))[dart.mixinNew].call(this);
      ProviderStateBase__FutureProviderStateMixin$36.__proto__.new.call(this);
    }).prototype = ProviderStateBase__FutureProviderStateMixin$36.prototype;
    dart.applyMixin(ProviderStateBase__FutureProviderStateMixin$36, future_provider._FutureProviderStateMixin$(dart.legacy(T)));
    class _FutureProviderState extends ProviderStateBase__FutureProviderStateMixin$36 {
      get listenedFuture() {
        return super.listenedFuture;
      }
      set listenedFuture(value) {
        FutureLOfTL().as(value);
        return super.listenedFuture = value;
      }
      valueChanged(opts) {
        let previous = opts && 'previous' in opts ? opts.previous : null;
        FutureLOfTL().as(previous);
        return super.valueChanged({previous: previous});
      }
      handleError(error, stackTrace) {
        return super.handleError(error, stackTrace);
      }
      dispose() {
        return super.dispose();
      }
    }
    (_FutureProviderState.new = function() {
      _FutureProviderState.__proto__.new.call(this);
      ;
    }).prototype = _FutureProviderState.prototype;
    dart.addTypeTests(_FutureProviderState);
    _FutureProviderState.prototype[_is__FutureProviderState_default] = true;
    dart.addTypeCaches(_FutureProviderState);
    dart.setMethodSignature(_FutureProviderState, () => ({
      __proto__: dart.getMethods(_FutureProviderState.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {})
    }));
    dart.setGetterSignature(_FutureProviderState, () => ({
      __proto__: dart.getGetters(_FutureProviderState.__proto__),
      listenedFuture: dart.legacy(async.Future$(dart.legacy(T)))
    }));
    dart.setSetterSignature(_FutureProviderState, () => ({
      __proto__: dart.getSetters(_FutureProviderState.__proto__),
      listenedFuture: dart.legacy(core.Object)
    }));
    dart.setLibraryUri(_FutureProviderState, I[14]);
    return _FutureProviderState;
  });
  future_provider._FutureProviderState = future_provider._FutureProviderState$();
  dart.addTypeTests(future_provider._FutureProviderState, _is__FutureProviderState_default);
  const _is_FutureProviderFamily_default = Symbol('_is_FutureProviderFamily_default');
  future_provider.FutureProviderFamily$ = dart.generic((T, A) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var FutureOfTL = () => (FutureOfTL = dart.constFn(async.Future$(TL())))();
    var FutureLOfTL = () => (FutureLOfTL = dart.constFn(dart.legacy(FutureOfTL())))();
    var ProviderReferenceLAndALToFutureLOfTL = () => (ProviderReferenceLAndALToFutureLOfTL = dart.constFn(dart.fnType(FutureLOfTL(), [T$.ProviderReferenceL(), AL()])))();
    var ProviderReferenceLAndALToLFutureLOfTL = () => (ProviderReferenceLAndALToLFutureLOfTL = dart.constFn(dart.legacy(ProviderReferenceLAndALToFutureLOfTL())))();
    var FutureProviderOfTL = () => (FutureProviderOfTL = dart.constFn(future_provider.FutureProvider$(TL())))();
    var ProviderReferenceLToFutureLOfTL = () => (ProviderReferenceLToFutureLOfTL = dart.constFn(dart.fnType(FutureLOfTL(), [T$.ProviderReferenceL()])))();
    var AL = () => (AL = dart.constFn(dart.legacy(A)))();
    class FutureProviderFamily extends framework.Family$(dart.legacy(async.Future$(dart.legacy(T))), dart.legacy(common.AsyncValue$(dart.legacy(T))), dart.legacy(A), dart.legacy(framework.ProviderReference), dart.legacy(future_provider.FutureProvider$(dart.legacy(T)))) {
      create(value, builder, name) {
        AL().as(value);
        ProviderReferenceLAndALToLFutureLOfTL().as(builder);
        return new (FutureProviderOfTL()).new(dart.fn(ref => builder(ref, value), ProviderReferenceLToFutureLOfTL()), {name: name});
      }
    }
    (FutureProviderFamily.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      FutureProviderFamily.__proto__.new.call(this, create, name);
      ;
    }).prototype = FutureProviderFamily.prototype;
    dart.addTypeTests(FutureProviderFamily);
    FutureProviderFamily.prototype[_is_FutureProviderFamily_default] = true;
    dart.addTypeCaches(FutureProviderFamily);
    dart.setMethodSignature(FutureProviderFamily, () => ({
      __proto__: dart.getMethods(FutureProviderFamily.__proto__),
      create: dart.fnType(dart.legacy(future_provider.FutureProvider$(dart.legacy(T))), [dart.legacy(core.Object), dart.legacy(core.Object), dart.legacy(core.String)])
    }));
    dart.setLibraryUri(FutureProviderFamily, I[14]);
    return FutureProviderFamily;
  });
  future_provider.FutureProviderFamily = future_provider.FutureProviderFamily$();
  dart.addTypeTests(future_provider.FutureProviderFamily, _is_FutureProviderFamily_default);
  common._$AsyncValueTearOff = class _$36AsyncValueTearOff extends core.Object {
    data(T, value) {
      return new (common._$AsyncData$(dart.legacy(T))).new(value);
    }
    loading(T) {
      return new (common._$AsyncLoading$(dart.legacy(T))).new();
    }
    error(T, error, stackTrace = null) {
      return new (common._$AsyncError$(dart.legacy(T))).new(error, stackTrace);
    }
  };
  (common._$AsyncValueTearOff.new = function() {
    ;
  }).prototype = common._$AsyncValueTearOff.prototype;
  dart.addTypeTests(common._$AsyncValueTearOff);
  dart.addTypeCaches(common._$AsyncValueTearOff);
  dart.setMethodSignature(common._$AsyncValueTearOff, () => ({
    __proto__: dart.getMethods(common._$AsyncValueTearOff.__proto__),
    data: dart.gFnType(T => [dart.legacy(common.AsyncData$(dart.legacy(T))), [dart.legacy(T)]]),
    loading: dart.gFnType(T => [dart.legacy(common.AsyncLoading$(dart.legacy(T))), []]),
    error: dart.gFnType(T => [dart.legacy(common.AsyncError$(dart.legacy(T))), [dart.legacy(core.Object)], [dart.legacy(core.StackTrace)]])
  }));
  dart.setLibraryUri(common._$AsyncValueTearOff, I[6]);
  const _is_$36AsyncValueCopyWith_default = Symbol('_is_$36AsyncValueCopyWith_default');
  common.$AsyncValueCopyWith$ = dart.generic((T, $36Res) => {
    class $36AsyncValueCopyWith extends core.Object {}
    ($36AsyncValueCopyWith[dart.mixinNew] = function() {
    }).prototype = $36AsyncValueCopyWith.prototype;
    dart.addTypeTests($36AsyncValueCopyWith);
    $36AsyncValueCopyWith.prototype[_is_$36AsyncValueCopyWith_default] = true;
    dart.addTypeCaches($36AsyncValueCopyWith);
    dart.setLibraryUri($36AsyncValueCopyWith, I[6]);
    return $36AsyncValueCopyWith;
  });
  common.$AsyncValueCopyWith = common.$AsyncValueCopyWith$();
  dart.addTypeTests(common.$AsyncValueCopyWith, _is_$36AsyncValueCopyWith_default);
  var _value$0 = dart.privateName(common, "_$AsyncValueCopyWithImpl._value");
  var _then$ = dart.privateName(common, "_then");
  var _value = dart.privateName(common, "_value");
  const _is__$36AsyncValueCopyWithImpl_default = Symbol('_is__$36AsyncValueCopyWithImpl_default');
  common._$AsyncValueCopyWithImpl$ = dart.generic((T, $36Res) => {
    class _$36AsyncValueCopyWithImpl extends core.Object {
      get [_value]() {
        return this[_value$0];
      }
      set [_value](value) {
        super[_value] = value;
      }
    }
    (_$36AsyncValueCopyWithImpl.new = function(_value, _then) {
      this[_value$0] = _value;
      this[_then$] = _then;
      ;
    }).prototype = _$36AsyncValueCopyWithImpl.prototype;
    dart.addTypeTests(_$36AsyncValueCopyWithImpl);
    _$36AsyncValueCopyWithImpl.prototype[_is__$36AsyncValueCopyWithImpl_default] = true;
    dart.addTypeCaches(_$36AsyncValueCopyWithImpl);
    _$36AsyncValueCopyWithImpl[dart.implements] = () => [common.$AsyncValueCopyWith$(dart.legacy(T), dart.legacy($36Res))];
    dart.setLibraryUri(_$36AsyncValueCopyWithImpl, I[6]);
    dart.setFieldSignature(_$36AsyncValueCopyWithImpl, () => ({
      __proto__: dart.getFields(_$36AsyncValueCopyWithImpl.__proto__),
      [_value]: dart.finalFieldType(dart.legacy(common.AsyncValue$(dart.legacy(T)))),
      [_then$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy($36Res), [dart.legacy(common.AsyncValue$(dart.legacy(T)))])))
    }));
    return _$36AsyncValueCopyWithImpl;
  });
  common._$AsyncValueCopyWithImpl = common._$AsyncValueCopyWithImpl$();
  dart.addTypeTests(common._$AsyncValueCopyWithImpl, _is__$36AsyncValueCopyWithImpl_default);
  const _is_$36AsyncDataCopyWith_default = Symbol('_is_$36AsyncDataCopyWith_default');
  common.$AsyncDataCopyWith$ = dart.generic((T, $36Res) => {
    class $36AsyncDataCopyWith extends core.Object {}
    ($36AsyncDataCopyWith[dart.mixinNew] = function() {
    }).prototype = $36AsyncDataCopyWith.prototype;
    dart.addTypeTests($36AsyncDataCopyWith);
    $36AsyncDataCopyWith.prototype[_is_$36AsyncDataCopyWith_default] = true;
    dart.addTypeCaches($36AsyncDataCopyWith);
    dart.setLibraryUri($36AsyncDataCopyWith, I[6]);
    return $36AsyncDataCopyWith;
  });
  common.$AsyncDataCopyWith = common.$AsyncDataCopyWith$();
  dart.addTypeTests(common.$AsyncDataCopyWith, _is_$36AsyncDataCopyWith_default);
  var Freezed_unionKey = dart.privateName(freezed_annotation, "Freezed.unionKey");
  const _is__$36AsyncDataCopyWithImpl_default = Symbol('_is__$36AsyncDataCopyWithImpl_default');
  common._$AsyncDataCopyWithImpl$ = dart.generic((T, $36Res) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var AsyncDataOfTL = () => (AsyncDataOfTL = dart.constFn(common.AsyncData$(TL())))();
    var AsyncDataLOfTL = () => (AsyncDataLOfTL = dart.constFn(dart.legacy(AsyncDataOfTL())))();
    var AsyncValueOfTL = () => (AsyncValueOfTL = dart.constFn(common.AsyncValue$(TL())))();
    var AsyncValueLOfTL = () => (AsyncValueLOfTL = dart.constFn(dart.legacy(AsyncValueOfTL())))();
    var AsyncValueLOfTLTo$ResL = () => (AsyncValueLOfTLTo$ResL = dart.constFn(dart.fnType($ResL(), [AsyncValueLOfTL()])))();
    var _$AsyncDataOfTL = () => (_$AsyncDataOfTL = dart.constFn(common._$AsyncData$(TL())))();
    var $ResL = () => ($ResL = dart.constFn(dart.legacy($36Res)))();
    class _$36AsyncDataCopyWithImpl extends common._$AsyncValueCopyWithImpl$(dart.legacy(T), dart.legacy($36Res)) {
      get [_value]() {
        return AsyncDataLOfTL().as(super[_value]);
      }
      call(opts) {
        let t23;
        let value = opts && 'value' in opts ? opts.value : C[19] || CT.C19;
        t23 = new (_$AsyncDataOfTL()).new(dart.equals(value, freezed_annotation.freezed) ? this[_value].value : TL().as(value));
        return this[_then$](t23);
      }
    }
    (_$36AsyncDataCopyWithImpl.new = function(_value, _then) {
      _$36AsyncDataCopyWithImpl.__proto__.new.call(this, _value, dart.fn(v => _then(AsyncDataLOfTL().as(v)), AsyncValueLOfTLTo$ResL()));
      ;
    }).prototype = _$36AsyncDataCopyWithImpl.prototype;
    dart.addTypeTests(_$36AsyncDataCopyWithImpl);
    _$36AsyncDataCopyWithImpl.prototype[_is__$36AsyncDataCopyWithImpl_default] = true;
    dart.addTypeCaches(_$36AsyncDataCopyWithImpl);
    _$36AsyncDataCopyWithImpl[dart.implements] = () => [common.$AsyncDataCopyWith$(dart.legacy(T), dart.legacy($36Res))];
    dart.setMethodSignature(_$36AsyncDataCopyWithImpl, () => ({
      __proto__: dart.getMethods(_$36AsyncDataCopyWithImpl.__proto__),
      call: dart.fnType(dart.legacy($36Res), [], {value: dart.legacy(core.Object)}, {})
    }));
    dart.setGetterSignature(_$36AsyncDataCopyWithImpl, () => ({
      __proto__: dart.getGetters(_$36AsyncDataCopyWithImpl.__proto__),
      [_value]: dart.legacy(common.AsyncData$(dart.legacy(T)))
    }));
    dart.setLibraryUri(_$36AsyncDataCopyWithImpl, I[6]);
    return _$36AsyncDataCopyWithImpl;
  });
  common._$AsyncDataCopyWithImpl = common._$AsyncDataCopyWithImpl$();
  dart.addTypeTests(common._$AsyncDataCopyWithImpl, _is__$36AsyncDataCopyWithImpl_default);
  var value$ = dart.privateName(common, "_$AsyncData.value");
  var DeepCollectionEquality__unordered = dart.privateName(equality, "DeepCollectionEquality._unordered");
  var DeepCollectionEquality__base = dart.privateName(equality, "DeepCollectionEquality._base");
  const _is_AsyncData_default = Symbol('_is_AsyncData_default');
  common.AsyncData$ = dart.generic(T => {
    class AsyncData extends common.AsyncValue$(dart.legacy(T)) {}
    (AsyncData.__ = function() {
      AsyncData.__proto__.__.call(this);
      ;
    }).prototype = AsyncData.prototype;
    dart.addTypeTests(AsyncData);
    AsyncData.prototype[_is_AsyncData_default] = true;
    dart.addTypeCaches(AsyncData);
    dart.setLibraryUri(AsyncData, I[6]);
    return AsyncData;
  });
  common.AsyncData = common.AsyncData$();
  dart.addTypeTests(common.AsyncData, _is_AsyncData_default);
  const _is__$36AsyncData_default = Symbol('_is__$36AsyncData_default');
  common._$AsyncData$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var AsyncDataOfTL = () => (AsyncDataOfTL = dart.constFn(common.AsyncData$(TL())))();
    var AsyncDataLOfTL = () => (AsyncDataLOfTL = dart.constFn(dart.legacy(AsyncDataOfTL())))();
    var _$AsyncDataCopyWithImplOfTL$AsyncDataLOfTL = () => (_$AsyncDataCopyWithImplOfTL$AsyncDataLOfTL = dart.constFn(common._$AsyncDataCopyWithImpl$(TL(), AsyncDataLOfTL())))();
    class _$36AsyncData extends common.AsyncData$(dart.legacy(T)) {
      get value() {
        return this[value$];
      }
      set value(value) {
        super.value = value;
      }
      toString() {
        return "AsyncValue<" + dart.str(dart.wrapType(TL())) + ">.data(value: " + dart.str(this.value) + ")";
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || AsyncDataLOfTL().is(other) && (core.identical(other.value, this.value) || dart.test((C[20] || CT.C20).equals(other.value, this.value)));
      }
      get hashCode() {
        return (dart.notNull(dart.hashCode(this.runtimeType)) ^ dart.notNull((C[20] || CT.C20).hash(this.value))) >>> 0;
      }
      get copyWith() {
        return new (_$AsyncDataCopyWithImplOfTL$AsyncDataLOfTL()).new(this, dart.gbind(C[22] || CT.C22, AsyncDataLOfTL()));
      }
      when(Result, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let loading = opts && 'loading' in opts ? opts.loading : null;
        let error = opts && 'error' in opts ? opts.error : null;
        if (!(data != null)) dart.assertFailed(null, I[15], 152, 12, "data != null");
        if (!(loading != null)) dart.assertFailed(null, I[15], 153, 12, "loading != null");
        if (!(error != null)) dart.assertFailed(null, I[15], 154, 12, "error != null");
        return data(this.value);
      }
      maybeWhen(Result, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let loading = opts && 'loading' in opts ? opts.loading : null;
        let error = opts && 'error' in opts ? opts.error : null;
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        if (!(orElse != null)) dart.assertFailed(null, I[15], 166, 12, "orElse != null");
        if (data != null) {
          return data(this.value);
        }
        return orElse();
      }
      map(Result, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let loading = opts && 'loading' in opts ? opts.loading : null;
        let error = opts && 'error' in opts ? opts.error : null;
        if (!(data != null)) dart.assertFailed(null, I[15], 180, 12, "data != null");
        if (!(loading != null)) dart.assertFailed(null, I[15], 181, 12, "loading != null");
        if (!(error != null)) dart.assertFailed(null, I[15], 182, 12, "error != null");
        return data(this);
      }
      maybeMap(Result, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let loading = opts && 'loading' in opts ? opts.loading : null;
        let error = opts && 'error' in opts ? opts.error : null;
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        if (!(orElse != null)) dart.assertFailed(null, I[15], 194, 12, "orElse != null");
        if (data != null) {
          return data(this);
        }
        return orElse();
      }
    }
    (_$36AsyncData.new = function(value) {
      this[value$] = value;
      _$36AsyncData.__proto__.__.call(this);
      ;
    }).prototype = _$36AsyncData.prototype;
    dart.addTypeTests(_$36AsyncData);
    _$36AsyncData.prototype[_is__$36AsyncData_default] = true;
    dart.addTypeCaches(_$36AsyncData);
    dart.setMethodSignature(_$36AsyncData, () => ({
      __proto__: dart.getMethods(_$36AsyncData.__proto__),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
      when: dart.gFnType(Result => [dart.legacy(Result), [], {data: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(T)])), error: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(core.Object), dart.legacy(core.StackTrace)])), loading: dart.legacy(dart.fnType(dart.legacy(Result), []))}, {}]),
      maybeWhen: dart.gFnType(Result => [dart.legacy(Result), [], {data: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(T)])), error: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(core.Object), dart.legacy(core.StackTrace)])), loading: dart.legacy(dart.fnType(dart.legacy(Result), [])), orElse: dart.legacy(dart.fnType(dart.legacy(Result), []))}, {}]),
      map: dart.gFnType(Result => [dart.legacy(Result), [], {data: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncData$(dart.legacy(T)))])), error: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncError$(dart.legacy(T)))])), loading: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncLoading$(dart.legacy(T)))]))}, {}]),
      maybeMap: dart.gFnType(Result => [dart.legacy(Result), [], {data: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncData$(dart.legacy(T)))])), error: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncError$(dart.legacy(T)))])), loading: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncLoading$(dart.legacy(T)))])), orElse: dart.legacy(dart.fnType(dart.legacy(Result), []))}, {}])
    }));
    dart.setGetterSignature(_$36AsyncData, () => ({
      __proto__: dart.getGetters(_$36AsyncData.__proto__),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int),
      copyWith: dart.legacy(common.$AsyncDataCopyWith$(dart.legacy(T), dart.legacy(common.AsyncData$(dart.legacy(T)))))
    }));
    dart.setLibraryUri(_$36AsyncData, I[6]);
    dart.setFieldSignature(_$36AsyncData, () => ({
      __proto__: dart.getFields(_$36AsyncData.__proto__),
      value: dart.finalFieldType(dart.legacy(T))
    }));
    dart.defineExtensionMethods(_$36AsyncData, ['toString', '_equals']);
    dart.defineExtensionAccessors(_$36AsyncData, ['hashCode']);
    return _$36AsyncData;
  });
  common._$AsyncData = common._$AsyncData$();
  dart.addTypeTests(common._$AsyncData, _is__$36AsyncData_default);
  const _is_$36AsyncLoadingCopyWith_default = Symbol('_is_$36AsyncLoadingCopyWith_default');
  common.$AsyncLoadingCopyWith$ = dart.generic((T, $36Res) => {
    class $36AsyncLoadingCopyWith extends core.Object {}
    ($36AsyncLoadingCopyWith[dart.mixinNew] = function() {
    }).prototype = $36AsyncLoadingCopyWith.prototype;
    dart.addTypeTests($36AsyncLoadingCopyWith);
    $36AsyncLoadingCopyWith.prototype[_is_$36AsyncLoadingCopyWith_default] = true;
    dart.addTypeCaches($36AsyncLoadingCopyWith);
    dart.setLibraryUri($36AsyncLoadingCopyWith, I[6]);
    return $36AsyncLoadingCopyWith;
  });
  common.$AsyncLoadingCopyWith = common.$AsyncLoadingCopyWith$();
  dart.addTypeTests(common.$AsyncLoadingCopyWith, _is_$36AsyncLoadingCopyWith_default);
  const _is__$36AsyncLoadingCopyWithImpl_default = Symbol('_is__$36AsyncLoadingCopyWithImpl_default');
  common._$AsyncLoadingCopyWithImpl$ = dart.generic((T, $36Res) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var AsyncLoadingOfTL = () => (AsyncLoadingOfTL = dart.constFn(common.AsyncLoading$(TL())))();
    var AsyncLoadingLOfTL = () => (AsyncLoadingLOfTL = dart.constFn(dart.legacy(AsyncLoadingOfTL())))();
    var AsyncValueOfTL = () => (AsyncValueOfTL = dart.constFn(common.AsyncValue$(TL())))();
    var AsyncValueLOfTL = () => (AsyncValueLOfTL = dart.constFn(dart.legacy(AsyncValueOfTL())))();
    var AsyncValueLOfTLTo$ResL = () => (AsyncValueLOfTLTo$ResL = dart.constFn(dart.fnType($ResL(), [AsyncValueLOfTL()])))();
    var $ResL = () => ($ResL = dart.constFn(dart.legacy($36Res)))();
    class _$36AsyncLoadingCopyWithImpl extends common._$AsyncValueCopyWithImpl$(dart.legacy(T), dart.legacy($36Res)) {
      get [_value]() {
        return AsyncLoadingLOfTL().as(super[_value]);
      }
    }
    (_$36AsyncLoadingCopyWithImpl.new = function(_value, _then) {
      _$36AsyncLoadingCopyWithImpl.__proto__.new.call(this, _value, dart.fn(v => _then(AsyncLoadingLOfTL().as(v)), AsyncValueLOfTLTo$ResL()));
      ;
    }).prototype = _$36AsyncLoadingCopyWithImpl.prototype;
    dart.addTypeTests(_$36AsyncLoadingCopyWithImpl);
    _$36AsyncLoadingCopyWithImpl.prototype[_is__$36AsyncLoadingCopyWithImpl_default] = true;
    dart.addTypeCaches(_$36AsyncLoadingCopyWithImpl);
    _$36AsyncLoadingCopyWithImpl[dart.implements] = () => [common.$AsyncLoadingCopyWith$(dart.legacy(T), dart.legacy($36Res))];
    dart.setGetterSignature(_$36AsyncLoadingCopyWithImpl, () => ({
      __proto__: dart.getGetters(_$36AsyncLoadingCopyWithImpl.__proto__),
      [_value]: dart.legacy(common.AsyncLoading$(dart.legacy(T)))
    }));
    dart.setLibraryUri(_$36AsyncLoadingCopyWithImpl, I[6]);
    return _$36AsyncLoadingCopyWithImpl;
  });
  common._$AsyncLoadingCopyWithImpl = common._$AsyncLoadingCopyWithImpl$();
  dart.addTypeTests(common._$AsyncLoadingCopyWithImpl, _is__$36AsyncLoadingCopyWithImpl_default);
  const _is_AsyncLoading_default = Symbol('_is_AsyncLoading_default');
  common.AsyncLoading$ = dart.generic(T => {
    class AsyncLoading extends common.AsyncValue$(dart.legacy(T)) {}
    (AsyncLoading.__ = function() {
      AsyncLoading.__proto__.__.call(this);
      ;
    }).prototype = AsyncLoading.prototype;
    dart.addTypeTests(AsyncLoading);
    AsyncLoading.prototype[_is_AsyncLoading_default] = true;
    dart.addTypeCaches(AsyncLoading);
    dart.setLibraryUri(AsyncLoading, I[6]);
    return AsyncLoading;
  });
  common.AsyncLoading = common.AsyncLoading$();
  dart.addTypeTests(common.AsyncLoading, _is_AsyncLoading_default);
  const _is__$36AsyncLoading_default = Symbol('_is__$36AsyncLoading_default');
  common._$AsyncLoading$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var AsyncLoadingOfTL = () => (AsyncLoadingOfTL = dart.constFn(common.AsyncLoading$(TL())))();
    var AsyncLoadingLOfTL = () => (AsyncLoadingLOfTL = dart.constFn(dart.legacy(AsyncLoadingOfTL())))();
    class _$36AsyncLoading extends common.AsyncLoading$(dart.legacy(T)) {
      toString() {
        return "AsyncValue<" + dart.str(dart.wrapType(TL())) + ">.loading()";
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || AsyncLoadingLOfTL().is(other);
      }
      get hashCode() {
        return dart.hashCode(this.runtimeType);
      }
      when(Result, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let loading = opts && 'loading' in opts ? opts.loading : null;
        let error = opts && 'error' in opts ? opts.error : null;
        if (!(data != null)) dart.assertFailed(null, I[15], 254, 12, "data != null");
        if (!(loading != null)) dart.assertFailed(null, I[15], 255, 12, "loading != null");
        if (!(error != null)) dart.assertFailed(null, I[15], 256, 12, "error != null");
        return loading();
      }
      maybeWhen(Result, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let loading = opts && 'loading' in opts ? opts.loading : null;
        let error = opts && 'error' in opts ? opts.error : null;
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        if (!(orElse != null)) dart.assertFailed(null, I[15], 268, 12, "orElse != null");
        if (loading != null) {
          return loading();
        }
        return orElse();
      }
      map(Result, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let loading = opts && 'loading' in opts ? opts.loading : null;
        let error = opts && 'error' in opts ? opts.error : null;
        if (!(data != null)) dart.assertFailed(null, I[15], 282, 12, "data != null");
        if (!(loading != null)) dart.assertFailed(null, I[15], 283, 12, "loading != null");
        if (!(error != null)) dart.assertFailed(null, I[15], 284, 12, "error != null");
        return loading(this);
      }
      maybeMap(Result, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let loading = opts && 'loading' in opts ? opts.loading : null;
        let error = opts && 'error' in opts ? opts.error : null;
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        if (!(orElse != null)) dart.assertFailed(null, I[15], 296, 12, "orElse != null");
        if (loading != null) {
          return loading(this);
        }
        return orElse();
      }
    }
    (_$36AsyncLoading.new = function() {
      _$36AsyncLoading.__proto__.__.call(this);
      ;
    }).prototype = _$36AsyncLoading.prototype;
    dart.addTypeTests(_$36AsyncLoading);
    _$36AsyncLoading.prototype[_is__$36AsyncLoading_default] = true;
    dart.addTypeCaches(_$36AsyncLoading);
    dart.setMethodSignature(_$36AsyncLoading, () => ({
      __proto__: dart.getMethods(_$36AsyncLoading.__proto__),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
      when: dart.gFnType(Result => [dart.legacy(Result), [], {data: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(T)])), error: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(core.Object), dart.legacy(core.StackTrace)])), loading: dart.legacy(dart.fnType(dart.legacy(Result), []))}, {}]),
      maybeWhen: dart.gFnType(Result => [dart.legacy(Result), [], {data: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(T)])), error: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(core.Object), dart.legacy(core.StackTrace)])), loading: dart.legacy(dart.fnType(dart.legacy(Result), [])), orElse: dart.legacy(dart.fnType(dart.legacy(Result), []))}, {}]),
      map: dart.gFnType(Result => [dart.legacy(Result), [], {data: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncData$(dart.legacy(T)))])), error: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncError$(dart.legacy(T)))])), loading: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncLoading$(dart.legacy(T)))]))}, {}]),
      maybeMap: dart.gFnType(Result => [dart.legacy(Result), [], {data: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncData$(dart.legacy(T)))])), error: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncError$(dart.legacy(T)))])), loading: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncLoading$(dart.legacy(T)))])), orElse: dart.legacy(dart.fnType(dart.legacy(Result), []))}, {}])
    }));
    dart.setGetterSignature(_$36AsyncLoading, () => ({
      __proto__: dart.getGetters(_$36AsyncLoading.__proto__),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(_$36AsyncLoading, I[6]);
    dart.defineExtensionMethods(_$36AsyncLoading, ['toString', '_equals']);
    dart.defineExtensionAccessors(_$36AsyncLoading, ['hashCode']);
    return _$36AsyncLoading;
  });
  common._$AsyncLoading = common._$AsyncLoading$();
  dart.addTypeTests(common._$AsyncLoading, _is__$36AsyncLoading_default);
  const _is_$36AsyncErrorCopyWith_default = Symbol('_is_$36AsyncErrorCopyWith_default');
  common.$AsyncErrorCopyWith$ = dart.generic((T, $36Res) => {
    class $36AsyncErrorCopyWith extends core.Object {}
    ($36AsyncErrorCopyWith[dart.mixinNew] = function() {
    }).prototype = $36AsyncErrorCopyWith.prototype;
    dart.addTypeTests($36AsyncErrorCopyWith);
    $36AsyncErrorCopyWith.prototype[_is_$36AsyncErrorCopyWith_default] = true;
    dart.addTypeCaches($36AsyncErrorCopyWith);
    dart.setLibraryUri($36AsyncErrorCopyWith, I[6]);
    return $36AsyncErrorCopyWith;
  });
  common.$AsyncErrorCopyWith = common.$AsyncErrorCopyWith$();
  dart.addTypeTests(common.$AsyncErrorCopyWith, _is_$36AsyncErrorCopyWith_default);
  const _is__$36AsyncErrorCopyWithImpl_default = Symbol('_is__$36AsyncErrorCopyWithImpl_default');
  common._$AsyncErrorCopyWithImpl$ = dart.generic((T, $36Res) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var AsyncErrorOfTL = () => (AsyncErrorOfTL = dart.constFn(common.AsyncError$(TL())))();
    var AsyncErrorLOfTL = () => (AsyncErrorLOfTL = dart.constFn(dart.legacy(AsyncErrorOfTL())))();
    var AsyncValueOfTL = () => (AsyncValueOfTL = dart.constFn(common.AsyncValue$(TL())))();
    var AsyncValueLOfTL = () => (AsyncValueLOfTL = dart.constFn(dart.legacy(AsyncValueOfTL())))();
    var AsyncValueLOfTLTo$ResL = () => (AsyncValueLOfTLTo$ResL = dart.constFn(dart.fnType($ResL(), [AsyncValueLOfTL()])))();
    var _$AsyncErrorOfTL = () => (_$AsyncErrorOfTL = dart.constFn(common._$AsyncError$(TL())))();
    var $ResL = () => ($ResL = dart.constFn(dart.legacy($36Res)))();
    class _$36AsyncErrorCopyWithImpl extends common._$AsyncValueCopyWithImpl$(dart.legacy(T), dart.legacy($36Res)) {
      get [_value]() {
        return AsyncErrorLOfTL().as(super[_value]);
      }
      call(opts) {
        let t23;
        let error = opts && 'error' in opts ? opts.error : C[19] || CT.C19;
        let stackTrace = opts && 'stackTrace' in opts ? opts.stackTrace : C[19] || CT.C19;
        t23 = new (_$AsyncErrorOfTL()).new(dart.equals(error, freezed_annotation.freezed) ? this[_value].error : error, dart.equals(stackTrace, freezed_annotation.freezed) ? this[_value].stackTrace : T$.StackTraceL().as(stackTrace));
        return this[_then$](t23);
      }
    }
    (_$36AsyncErrorCopyWithImpl.new = function(_value, _then) {
      _$36AsyncErrorCopyWithImpl.__proto__.new.call(this, _value, dart.fn(v => _then(AsyncErrorLOfTL().as(v)), AsyncValueLOfTLTo$ResL()));
      ;
    }).prototype = _$36AsyncErrorCopyWithImpl.prototype;
    dart.addTypeTests(_$36AsyncErrorCopyWithImpl);
    _$36AsyncErrorCopyWithImpl.prototype[_is__$36AsyncErrorCopyWithImpl_default] = true;
    dart.addTypeCaches(_$36AsyncErrorCopyWithImpl);
    _$36AsyncErrorCopyWithImpl[dart.implements] = () => [common.$AsyncErrorCopyWith$(dart.legacy(T), dart.legacy($36Res))];
    dart.setMethodSignature(_$36AsyncErrorCopyWithImpl, () => ({
      __proto__: dart.getMethods(_$36AsyncErrorCopyWithImpl.__proto__),
      call: dart.fnType(dart.legacy($36Res), [], {error: dart.legacy(core.Object), stackTrace: dart.legacy(core.Object)}, {})
    }));
    dart.setGetterSignature(_$36AsyncErrorCopyWithImpl, () => ({
      __proto__: dart.getGetters(_$36AsyncErrorCopyWithImpl.__proto__),
      [_value]: dart.legacy(common.AsyncError$(dart.legacy(T)))
    }));
    dart.setLibraryUri(_$36AsyncErrorCopyWithImpl, I[6]);
    return _$36AsyncErrorCopyWithImpl;
  });
  common._$AsyncErrorCopyWithImpl = common._$AsyncErrorCopyWithImpl$();
  dart.addTypeTests(common._$AsyncErrorCopyWithImpl, _is__$36AsyncErrorCopyWithImpl_default);
  var error$ = dart.privateName(common, "_$AsyncError.error");
  var stackTrace$0 = dart.privateName(common, "_$AsyncError.stackTrace");
  const _is_AsyncError_default = Symbol('_is_AsyncError_default');
  common.AsyncError$ = dart.generic(T => {
    class AsyncError extends common.AsyncValue$(dart.legacy(T)) {}
    (AsyncError.__ = function() {
      AsyncError.__proto__.__.call(this);
      ;
    }).prototype = AsyncError.prototype;
    dart.addTypeTests(AsyncError);
    AsyncError.prototype[_is_AsyncError_default] = true;
    dart.addTypeCaches(AsyncError);
    dart.setLibraryUri(AsyncError, I[6]);
    return AsyncError;
  });
  common.AsyncError = common.AsyncError$();
  dart.addTypeTests(common.AsyncError, _is_AsyncError_default);
  const _is__$36AsyncError_default = Symbol('_is__$36AsyncError_default');
  common._$AsyncError$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var AsyncErrorOfTL = () => (AsyncErrorOfTL = dart.constFn(common.AsyncError$(TL())))();
    var AsyncErrorLOfTL = () => (AsyncErrorLOfTL = dart.constFn(dart.legacy(AsyncErrorOfTL())))();
    var _$AsyncErrorCopyWithImplOfTL$AsyncErrorLOfTL = () => (_$AsyncErrorCopyWithImplOfTL$AsyncErrorLOfTL = dart.constFn(common._$AsyncErrorCopyWithImpl$(TL(), AsyncErrorLOfTL())))();
    class _$36AsyncError extends common.AsyncError$(dart.legacy(T)) {
      get error() {
        return this[error$];
      }
      set error(value) {
        super.error = value;
      }
      get stackTrace() {
        return this[stackTrace$0];
      }
      set stackTrace(value) {
        super.stackTrace = value;
      }
      toString() {
        return "AsyncValue<" + dart.str(dart.wrapType(TL())) + ">.error(error: " + dart.str(this.error) + ", stackTrace: " + dart.str(this.stackTrace) + ")";
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || AsyncErrorLOfTL().is(other) && (core.identical(other.error, this.error) || dart.test((C[20] || CT.C20).equals(other.error, this.error))) && (other.stackTrace == this.stackTrace || dart.test((C[20] || CT.C20).equals(other.stackTrace, this.stackTrace)));
      }
      get hashCode() {
        return (dart.notNull(dart.hashCode(this.runtimeType)) ^ dart.notNull((C[20] || CT.C20).hash(this.error)) ^ dart.notNull((C[20] || CT.C20).hash(this.stackTrace))) >>> 0;
      }
      get copyWith() {
        return new (_$AsyncErrorCopyWithImplOfTL$AsyncErrorLOfTL()).new(this, dart.gbind(C[22] || CT.C22, AsyncErrorLOfTL()));
      }
      when(Result, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let loading = opts && 'loading' in opts ? opts.loading : null;
        let error = opts && 'error' in opts ? opts.error : null;
        if (!(data != null)) dart.assertFailed(null, I[15], 384, 12, "data != null");
        if (!(loading != null)) dart.assertFailed(null, I[15], 385, 12, "loading != null");
        if (!(error != null)) dart.assertFailed(null, I[15], 386, 12, "error != null");
        return error(this.error, this.stackTrace);
      }
      maybeWhen(Result, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let loading = opts && 'loading' in opts ? opts.loading : null;
        let error = opts && 'error' in opts ? opts.error : null;
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        if (!(orElse != null)) dart.assertFailed(null, I[15], 398, 12, "orElse != null");
        if (error != null) {
          return error(this.error, this.stackTrace);
        }
        return orElse();
      }
      map(Result, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let loading = opts && 'loading' in opts ? opts.loading : null;
        let error = opts && 'error' in opts ? opts.error : null;
        if (!(data != null)) dart.assertFailed(null, I[15], 412, 12, "data != null");
        if (!(loading != null)) dart.assertFailed(null, I[15], 413, 12, "loading != null");
        if (!(error != null)) dart.assertFailed(null, I[15], 414, 12, "error != null");
        return error(this);
      }
      maybeMap(Result, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let loading = opts && 'loading' in opts ? opts.loading : null;
        let error = opts && 'error' in opts ? opts.error : null;
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        if (!(orElse != null)) dart.assertFailed(null, I[15], 426, 12, "orElse != null");
        if (error != null) {
          return error(this);
        }
        return orElse();
      }
    }
    (_$36AsyncError.new = function(error, stackTrace = null) {
      this[error$] = error;
      this[stackTrace$0] = stackTrace;
      if (!(error != null)) dart.assertFailed(null, I[15], 343, 16, "error != null");
      _$36AsyncError.__proto__.__.call(this);
      ;
    }).prototype = _$36AsyncError.prototype;
    dart.addTypeTests(_$36AsyncError);
    _$36AsyncError.prototype[_is__$36AsyncError_default] = true;
    dart.addTypeCaches(_$36AsyncError);
    dart.setMethodSignature(_$36AsyncError, () => ({
      __proto__: dart.getMethods(_$36AsyncError.__proto__),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
      when: dart.gFnType(Result => [dart.legacy(Result), [], {data: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(T)])), error: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(core.Object), dart.legacy(core.StackTrace)])), loading: dart.legacy(dart.fnType(dart.legacy(Result), []))}, {}]),
      maybeWhen: dart.gFnType(Result => [dart.legacy(Result), [], {data: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(T)])), error: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(core.Object), dart.legacy(core.StackTrace)])), loading: dart.legacy(dart.fnType(dart.legacy(Result), [])), orElse: dart.legacy(dart.fnType(dart.legacy(Result), []))}, {}]),
      map: dart.gFnType(Result => [dart.legacy(Result), [], {data: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncData$(dart.legacy(T)))])), error: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncError$(dart.legacy(T)))])), loading: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncLoading$(dart.legacy(T)))]))}, {}]),
      maybeMap: dart.gFnType(Result => [dart.legacy(Result), [], {data: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncData$(dart.legacy(T)))])), error: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncError$(dart.legacy(T)))])), loading: dart.legacy(dart.fnType(dart.legacy(Result), [dart.legacy(common.AsyncLoading$(dart.legacy(T)))])), orElse: dart.legacy(dart.fnType(dart.legacy(Result), []))}, {}])
    }));
    dart.setGetterSignature(_$36AsyncError, () => ({
      __proto__: dart.getGetters(_$36AsyncError.__proto__),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int),
      copyWith: dart.legacy(common.$AsyncErrorCopyWith$(dart.legacy(T), dart.legacy(common.AsyncError$(dart.legacy(T)))))
    }));
    dart.setLibraryUri(_$36AsyncError, I[6]);
    dart.setFieldSignature(_$36AsyncError, () => ({
      __proto__: dart.getFields(_$36AsyncError.__proto__),
      error: dart.finalFieldType(dart.legacy(core.Object)),
      stackTrace: dart.finalFieldType(dart.legacy(core.StackTrace))
    }));
    dart.defineExtensionMethods(_$36AsyncError, ['toString', '_equals']);
    dart.defineExtensionAccessors(_$36AsyncError, ['hashCode']);
    return _$36AsyncError;
  });
  common._$AsyncError = common._$AsyncError$();
  dart.addTypeTests(common._$AsyncError, _is__$36AsyncError_default);
  common._$identity = function _$36identity(T, value) {
    return value;
  };
  dart.defineLazy(common, {
    /*common.$AsyncValue*/get $AsyncValue() {
      return C[23] || CT.C23;
    }
  }, true);
  dart.trackLibraries("packages/riverpod/src/created_provider.dart", {
    "package:riverpod/src/created_provider.dart": created_provider,
    "package:riverpod/src/state_provider.dart": state_provider,
    "package:riverpod/src/stream_provider.dart": stream_provider,
    "package:riverpod/src/state_notifier_provider.dart": state_notifier_provider,
    "package:riverpod/src/provider.dart": provider,
    "package:riverpod/src/framework/select.dart": select,
    "package:riverpod/src/framework.dart": framework,
    "package:riverpod/src/internals.dart": internals,
    "package:riverpod/src/builders.dart": builders,
    "package:riverpod/src/future_provider.dart": future_provider,
    "package:riverpod/src/common.dart": common
  }, {
    "package:riverpod/src/state_provider.dart": ["state_provider/base.dart", "state_provider/auto_dispose.dart"],
    "package:riverpod/src/stream_provider.dart": ["stream_provider/auto_dispose.dart", "stream_provider/base.dart"],
    "package:riverpod/src/state_notifier_provider.dart": ["state_notifier_provider/base.dart", "state_notifier_provider/auto_dispose.dart"],
    "package:riverpod/src/provider.dart": ["provider/base.dart", "provider/auto_dispose.dart"],
    "package:riverpod/src/framework.dart": ["framework/auto_dispose.dart", "framework/base_provider.dart", "framework/container.dart", "framework/family.dart", "framework/scoped_provider.dart", "framework/value_provider.dart"],
    "package:riverpod/src/future_provider.dart": ["future_provider/auto_dispose.dart", "future_provider/base.dart"],
    "package:riverpod/src/common.dart": ["common.freezed.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["framework/base_provider.dart","provider/base.dart","created_provider.dart","framework/auto_dispose.dart","provider/auto_dispose.dart","state_provider.dart","state_provider/base.dart","framework/family.dart","state_provider/auto_dispose.dart","common.dart","stream_provider.dart","stream_provider/auto_dispose.dart","stream_provider/base.dart","state_notifier_provider.dart","state_notifier_provider/base.dart","state_notifier_provider/auto_dispose.dart","provider.dart","framework/select.dart","framework/container.dart","framework/scoped_provider.dart","framework/value_provider.dart","builders.dart","future_provider.dart","future_provider/auto_dispose.dart","future_provider/base.dart","common.freezed.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../V:/packages/riverpod/src/created_provider.dart.lib.js"}');
  // Exports:
  return {
    src__created_provider: created_provider,
    src__state_provider: state_provider,
    src__stream_provider: stream_provider,
    src__state_notifier_provider: state_notifier_provider,
    src__provider: provider,
    src__framework__select: select,
    src__framework: framework,
    src__internals: internals,
    src__builders: builders,
    src__future_provider: future_provider,
    src__common: common
  };
}));

//# sourceMappingURL=created_provider.dart.lib.js.map
