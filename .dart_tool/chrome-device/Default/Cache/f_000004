define(['dart_sdk', 'packages/riverpod/src/created_provider.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/foundation/change_notifier.dart'], (function load__packages__flutter_riverpod__src__provider_dart(dart_sdk, packages__riverpod__src__created_provider$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__foundation__change_notifier$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = packages__riverpod__src__created_provider$46dart.src__framework;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const framework$ = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  var provider$ = Object.create(dart.library);
  var framework$0 = Object.create(dart.library);
  var consumer = Object.create(dart.library);
  var internals = Object.create(dart.library);
  var builders = Object.create(dart.library);
  var change_notifier_provider = Object.create(dart.library);
  var $entries = dartx.entries;
  var $values = dartx.values;
  var $clear = dartx.clear;
  var $remove = dartx.remove;
  var $putIfAbsent = dartx.putIfAbsent;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    ObjectL: () => (T$.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    RootProviderLOfObjectL$TLToTL: () => (T$.RootProviderLOfObjectL$TLToTL = dart.constFn(dart.gFnType(T => {
      var TL = () => (TL = dart.constFn(dart.legacy(T)))();
      var RootProviderOfObjectL$TL = () => (RootProviderOfObjectL$TL = dart.constFn(framework.RootProvider$(T$.ObjectL(), TL())))();
      var RootProviderLOfObjectL$TL = () => (RootProviderLOfObjectL$TL = dart.constFn(dart.legacy(RootProviderOfObjectL$TL())))();
      return [TL(), [RootProviderLOfObjectL$TL()]];
    })))(),
    RootProviderLOfCreatedL$ObjectLToCreatedL: () => (T$.RootProviderLOfCreatedL$ObjectLToCreatedL = dart.constFn(dart.gFnType(Created => {
      var CreatedL = () => (CreatedL = dart.constFn(dart.legacy(Created)))();
      var RootProviderOfCreatedL$ObjectL = () => (RootProviderOfCreatedL$ObjectL = dart.constFn(framework.RootProvider$(CreatedL(), T$.ObjectL())))();
      var RootProviderLOfCreatedL$ObjectL = () => (RootProviderLOfCreatedL$ObjectL = dart.constFn(dart.legacy(RootProviderOfCreatedL$ObjectL())))();
      return [CreatedL(), [RootProviderLOfCreatedL$ObjectL()]];
    })))(),
    OverrideL: () => (T$.OverrideL = dart.constFn(dart.legacy(framework.Override)))(),
    UncontrolledProviderScopeL: () => (T$.UncontrolledProviderScopeL = dart.constFn(dart.legacy(framework$0.UncontrolledProviderScope)))(),
    ProviderObserverL: () => (T$.ProviderObserverL = dart.constFn(dart.legacy(framework.ProviderObserver)))(),
    IterablePropertyOfProviderObserverL: () => (T$.IterablePropertyOfProviderObserverL = dart.constFn(diagnostics.IterableProperty$(T$.ProviderObserverL())))(),
    IterablePropertyOfOverrideL: () => (T$.IterablePropertyOfOverrideL = dart.constFn(diagnostics.IterableProperty$(T$.OverrideL())))(),
    ProviderScopeStateL: () => (T$.ProviderScopeStateL = dart.constFn(dart.legacy(framework$0.ProviderScopeState)))(),
    DiagnosticsPropertyOfObjectL: () => (T$.DiagnosticsPropertyOfObjectL = dart.constFn(diagnostics.DiagnosticsProperty$(T$.ObjectL())))(),
    boolL: () => (T$.boolL = dart.constFn(dart.legacy(core.bool)))(),
    VoidToboolL: () => (T$.VoidToboolL = dart.constFn(dart.fnType(T$.boolL(), [])))(),
    ProviderScopeL: () => (T$.ProviderScopeL = dart.constFn(dart.legacy(framework$0.ProviderScope)))(),
    _LocationL: () => (T$._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    ProxyWidgetL: () => (T$.ProxyWidgetL = dart.constFn(dart.legacy(framework$.ProxyWidget)))(),
    ProviderBaseL: () => (T$.ProviderBaseL = dart.constFn(dart.legacy(framework.ProviderBase)))(),
    ProviderSubscriptionL: () => (T$.ProviderSubscriptionL = dart.constFn(dart.legacy(framework.ProviderSubscription)))(),
    LinkedMapOfProviderBaseL$ProviderSubscriptionL: () => (T$.LinkedMapOfProviderBaseL$ProviderSubscriptionL = dart.constFn(_js_helper.LinkedMap$(T$.ProviderBaseL(), T$.ProviderSubscriptionL())))(),
    ConsumerWidgetL: () => (T$.ConsumerWidgetL = dart.constFn(dart.legacy(consumer.ConsumerWidget)))(),
    VoidToProviderSubscriptionL: () => (T$.VoidToProviderSubscriptionL = dart.constFn(dart.fnType(T$.ProviderSubscriptionL(), [])))(),
    ElementL: () => (T$.ElementL = dart.constFn(dart.legacy(framework$.Element)))(),
    ProviderReferenceL: () => (T$.ProviderReferenceL = dart.constFn(dart.legacy(framework.ProviderReference)))(),
    AutoDisposeProviderReferenceL: () => (T$.AutoDisposeProviderReferenceL = dart.constFn(dart.legacy(framework.AutoDisposeProviderReference)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constList([], T$.OverrideL());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "container",
        [_Location_column]: 7,
        [_Location_line]: 221,
        [_Location_file]: null
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 222,
        [_Location_file]: null
      });
    },
    get C2() {
      return C[2] = dart.constList([C[3] || CT.C3, C[4] || CT.C4], T$._LocationL());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[2] || CT.C2,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 220,
        [_Location_file]: "file:///C:/Users/KIIT/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_riverpod-0.11.1/lib/src/framework.dart"
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: builders.AutoDisposeChangeNotifierProviderBuilder.prototype
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: builders.ChangeNotifierProviderFamilyBuilder.prototype
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: builders.AutoDisposeChangeNotifierProviderFamilyBuilder.prototype
      });
    }
  }, false);
  var C = Array(8).fill(void 0);
  var I = [
    "file:///C:/Users/KIIT/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_riverpod-0.11.1/lib/src/framework.dart",
    "package:flutter_riverpod/src/framework.dart",
    "file:///C:/Users/KIIT/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_riverpod-0.11.1/lib/src/consumer.dart",
    "package:flutter_riverpod/src/consumer.dart",
    "package:flutter_riverpod/src/builders.dart",
    "package:flutter_riverpod/src/change_notifier_provider.dart"
  ];
  provider$['BuildContextX|read'] = function BuildContextX$124read(T, $this, provider) {
    return framework$0.ProviderScope.containerOf($this, {listen: false}).read(dart.legacy(T), provider);
  };
  provider$['BuildContextX|get#read'] = function BuildContextX$124get$35read($this) {
    return dart.fn((T, provider) => provider$['BuildContextX|read'](dart.legacy(T), $this, provider), T$.RootProviderLOfObjectL$TLToTL());
  };
  provider$['BuildContextX|refresh'] = function BuildContextX$124refresh(Created, $this, provider) {
    return framework$0.ProviderScope.containerOf($this, {listen: false}).refresh(dart.legacy(Created), provider);
  };
  provider$['BuildContextX|get#refresh'] = function BuildContextX$124get$35refresh($this) {
    return dart.fn((Created, provider) => provider$['BuildContextX|refresh'](dart.legacy(Created), $this, provider), T$.RootProviderLOfCreatedL$ObjectLToCreatedL());
  };
  var child$ = dart.privateName(framework$0, "ProviderScope.child");
  var observers$ = dart.privateName(framework$0, "ProviderScope.observers");
  var overrides$ = dart.privateName(framework$0, "ProviderScope.overrides");
  framework$0.ProviderScope = class ProviderScope extends framework$.StatefulWidget {
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    get observers() {
      return this[observers$];
    }
    set observers(value) {
      super.observers = value;
    }
    get overrides() {
      return this[overrides$];
    }
    set overrides(value) {
      super.overrides = value;
    }
    static containerOf(context, opts) {
      let listen = opts && 'listen' in opts ? opts.listen : true;
      let scope = null;
      if (dart.test(listen)) {
        scope = context.dependOnInheritedWidgetOfExactType(T$.UncontrolledProviderScopeL());
      } else {
        scope = T$.UncontrolledProviderScopeL().as(context.getElementForInheritedWidgetOfExactType(T$.UncontrolledProviderScopeL()).widget);
      }
      if (scope == null) {
        dart.throw(new core.StateError.new("No ProviderScope found"));
      }
      return scope.container;
    }
    createState() {
      return new framework$0.ProviderScopeState.new();
    }
    createElement() {
      return new framework$0._ProviderScopeElement.new(this);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (T$.IterablePropertyOfProviderObserverL()).new("observers", this.observers));
      properties.add(new (T$.IterablePropertyOfOverrideL()).new("overrides", this.overrides));
    }
  };
  (framework$0.ProviderScope.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let overrides = opts && 'overrides' in opts ? opts.overrides : C[0] || CT.C0;
    let observers = opts && 'observers' in opts ? opts.observers : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[overrides$] = overrides;
    this[observers$] = observers;
    this[child$] = child;
    if (!(child != null)) dart.assertFailed("child cannot be `null`", I[0], 86, 16, "child != null");
    framework$0.ProviderScope.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = framework$0.ProviderScope.prototype;
  dart.addTypeTests(framework$0.ProviderScope);
  dart.addTypeCaches(framework$0.ProviderScope);
  dart.setMethodSignature(framework$0.ProviderScope, () => ({
    __proto__: dart.getMethods(framework$0.ProviderScope.__proto__),
    createState: dart.fnType(dart.legacy(framework$0.ProviderScopeState), []),
    createElement: dart.fnType(dart.legacy(framework$0._ProviderScopeElement), []),
    debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)])
  }));
  dart.setLibraryUri(framework$0.ProviderScope, I[1]);
  dart.setFieldSignature(framework$0.ProviderScope, () => ({
    __proto__: dart.getFields(framework$0.ProviderScope.__proto__),
    child: dart.finalFieldType(dart.legacy(framework$.Widget)),
    observers: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(framework.ProviderObserver)))),
    overrides: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(framework.Override))))
  }));
  framework$0._ProviderScopeElement = class _ProviderScopeElement extends framework$.StatefulElement {
    debugFillProperties(properties) {
      let t4;
      super.debugFillProperties(properties);
      let container = T$.ProviderScopeStateL().as(this.state).container;
      for (let entry of container.debugProviderValues[$entries]) {
        let name = (t4 = entry.key.name, t4 == null ? framework.describeIdentity(entry.key) : t4);
        properties.add(new (T$.DiagnosticsPropertyOfObjectL()).new(name, entry.value));
      }
    }
  };
  (framework$0._ProviderScopeElement.new = function(widget) {
    framework$0._ProviderScopeElement.__proto__.new.call(this, widget);
    ;
  }).prototype = framework$0._ProviderScopeElement.prototype;
  dart.addTypeTests(framework$0._ProviderScopeElement);
  dart.addTypeCaches(framework$0._ProviderScopeElement);
  dart.setMethodSignature(framework$0._ProviderScopeElement, () => ({
    __proto__: dart.getMethods(framework$0._ProviderScopeElement.__proto__),
    debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)])
  }));
  dart.setLibraryUri(framework$0._ProviderScopeElement, I[1]);
  var container = dart.privateName(framework$0, "ProviderScopeState.container");
  var _debugParentOwner = dart.privateName(framework$0, "_debugParentOwner");
  var _dirty = dart.privateName(framework$0, "_dirty");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  framework$0.ProviderScopeState = class ProviderScopeState extends framework$.State$(dart.legacy(framework$0.ProviderScope)) {
    get container() {
      return this[container];
    }
    set container(value) {
      this[container] = value;
    }
    initState() {
      let t4, t4$;
      super.initState();
      let scope = T$.UncontrolledProviderScopeL().as((t4 = this.context.getElementForInheritedWidgetOfExactType(T$.UncontrolledProviderScopeL()), t4 == null ? null : t4.widget));
      if (!dart.test(dart.fn(() => {
        let t4;
        this[_debugParentOwner] = (t4 = scope, t4 == null ? null : t4.container);
        return true;
      }, T$.VoidToboolL())())) dart.assertFailed("", I[0], 173, 12, "() {\n      _debugParentOwner = scope?.container;\n      return true;\n    }()");
      this.container = new framework.ProviderContainer.new({parent: (t4$ = scope, t4$ == null ? null : t4$.container), overrides: this.widget.overrides, observers: this.widget.observers});
    }
    didUpdateWidget(oldWidget) {
      T$.ProviderScopeL().as(oldWidget);
      super.didUpdateWidget(oldWidget);
      this[_dirty] = true;
    }
    build(context) {
      if (!dart.test(dart.fn(() => {
        let t4, t4$;
        let scope = T$.UncontrolledProviderScopeL().as((t4 = context.getElementForInheritedWidgetOfExactType(T$.UncontrolledProviderScopeL()), t4 == null ? null : t4.widget));
        if (!dart.equals((t4$ = scope, t4$ == null ? null : t4$.container), this[_debugParentOwner])) {
          dart.throw(new core.UnsupportedError.new("ProviderScope was rebuilt with a different ProviderScope ancestor"));
        }
        return true;
      }, T$.VoidToboolL())())) dart.assertFailed("", I[0], 203, 12, "() {\n      final scope = context\n          .getElementForInheritedWidgetOfExactType<UncontrolledProviderScope>()\n          ?.widget as UncontrolledProviderScope;\n\n      if (scope?.container != _debugParentOwner) {\n        throw UnsupportedError(\n          'ProviderScope was rebuilt with a different ProviderScope ancestor',\n        );\n      }\n      return true;\n    }()");
      if (dart.test(this[_dirty])) {
        this[_dirty] = false;
        this.container.updateOverrides(this.widget.overrides);
      }
      return new framework$0.UncontrolledProviderScope.new({container: this.container, child: this.widget.child, $creationLocationd_0dea112b090073317d4: C[1] || CT.C1});
    }
    dispose() {
      this.container.dispose();
      super.dispose();
    }
  };
  (framework$0.ProviderScopeState.new = function() {
    this[container] = null;
    this[_debugParentOwner] = null;
    this[_dirty] = false;
    framework$0.ProviderScopeState.__proto__.new.call(this);
    ;
  }).prototype = framework$0.ProviderScopeState.prototype;
  dart.addTypeTests(framework$0.ProviderScopeState);
  dart.addTypeCaches(framework$0.ProviderScopeState);
  dart.setMethodSignature(framework$0.ProviderScopeState, () => ({
    __proto__: dart.getMethods(framework$0.ProviderScopeState.__proto__),
    didUpdateWidget: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    build: dart.fnType(dart.legacy(framework$.Widget), [dart.legacy(framework$.BuildContext)])
  }));
  dart.setLibraryUri(framework$0.ProviderScopeState, I[1]);
  dart.setFieldSignature(framework$0.ProviderScopeState, () => ({
    __proto__: dart.getFields(framework$0.ProviderScopeState.__proto__),
    container: dart.fieldType(dart.legacy(framework.ProviderContainer)),
    [_debugParentOwner]: dart.fieldType(dart.legacy(framework.ProviderContainer)),
    [_dirty]: dart.fieldType(dart.legacy(core.bool))
  }));
  var container$ = dart.privateName(framework$0, "UncontrolledProviderScope.container");
  framework$0.UncontrolledProviderScope = class UncontrolledProviderScope extends framework$.InheritedWidget {
    get container() {
      return this[container$];
    }
    set container(value) {
      super.container = value;
    }
    updateShouldNotify(oldWidget) {
      T$.UncontrolledProviderScopeL().as(oldWidget);
      return !dart.equals(this.container, oldWidget.container);
    }
    debugFillProperties(properties) {
      let t4;
      super.debugFillProperties(properties);
      for (let entry of this.container.debugProviderValues[$entries]) {
        let name = (t4 = entry.key.name, t4 == null ? framework.describeIdentity(entry.key) : t4);
        properties.add(new (T$.DiagnosticsPropertyOfObjectL()).new(name, entry.value));
      }
    }
    createElement() {
      return new framework$0._UncontrolledProviderScopeElement.new(this);
    }
  };
  (framework$0.UncontrolledProviderScope.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let container = opts && 'container' in opts ? opts.container : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[container$] = container;
    if (!(container != null)) dart.assertFailed("ProviderContainer cannot be null", I[0], 245, 16, "container != null");
    framework$0.UncontrolledProviderScope.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = framework$0.UncontrolledProviderScope.prototype;
  dart.addTypeTests(framework$0.UncontrolledProviderScope);
  dart.addTypeCaches(framework$0.UncontrolledProviderScope);
  dart.setMethodSignature(framework$0.UncontrolledProviderScope, () => ({
    __proto__: dart.getMethods(framework$0.UncontrolledProviderScope.__proto__),
    updateShouldNotify: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)]),
    createElement: dart.fnType(dart.legacy(framework$0._UncontrolledProviderScopeElement), [])
  }));
  dart.setLibraryUri(framework$0.UncontrolledProviderScope, I[1]);
  dart.setFieldSignature(framework$0.UncontrolledProviderScope, () => ({
    __proto__: dart.getFields(framework$0.UncontrolledProviderScope.__proto__),
    container: dart.finalFieldType(dart.legacy(framework.ProviderContainer))
  }));
  framework$0._UncontrolledProviderScopeElement = class _UncontrolledProviderScopeElement extends framework$.InheritedElement {
    mount(parent, newSlot) {
      if (!dart.test(dart.fn(() => {
        T$.UncontrolledProviderScopeL().as(this.widget).container.debugVsyncs.add(dart.bind(this, 'markNeedsBuild'));
        return true;
      }, T$.VoidToboolL())())) dart.assertFailed("", I[0], 278, 12, "() {\n      (widget as UncontrolledProviderScope)\n          .container\n          .debugVsyncs\n          .add(markNeedsBuild);\n      return true;\n    }()");
      super.mount(parent, newSlot);
    }
    update(newWidget) {
      T$.ProxyWidgetL().as(newWidget);
      if (!dart.test(dart.fn(() => {
        T$.UncontrolledProviderScopeL().as(this.widget).container.debugVsyncs.remove(dart.bind(this, 'markNeedsBuild'));
        T$.UncontrolledProviderScopeL().as(newWidget).container.debugVsyncs.add(dart.bind(this, 'markNeedsBuild'));
        return true;
      }, T$.VoidToboolL())())) dart.assertFailed("", I[0], 290, 12, "() {\n      (widget as UncontrolledProviderScope)\n          .container\n          .debugVsyncs\n          .remove(markNeedsBuild);\n      (newWidget as UncontrolledProviderScope)\n          .container\n          .debugVsyncs\n          .add(markNeedsBuild);\n      return true;\n    }()");
      super.update(newWidget);
    }
    unmount() {
      if (!dart.test(dart.fn(() => {
        T$.UncontrolledProviderScopeL().as(this.widget).container.debugVsyncs.remove(dart.bind(this, 'markNeedsBuild'));
        return true;
      }, T$.VoidToboolL())())) dart.assertFailed("", I[0], 306, 12, "() {\n      (widget as UncontrolledProviderScope)\n          .container\n          .debugVsyncs\n          .remove(markNeedsBuild);\n      return true;\n    }()");
      super.unmount();
    }
  };
  (framework$0._UncontrolledProviderScopeElement.new = function(widget) {
    framework$0._UncontrolledProviderScopeElement.__proto__.new.call(this, widget);
    ;
  }).prototype = framework$0._UncontrolledProviderScopeElement.prototype;
  dart.addTypeTests(framework$0._UncontrolledProviderScopeElement);
  dart.addTypeCaches(framework$0._UncontrolledProviderScopeElement);
  dart.setMethodSignature(framework$0._UncontrolledProviderScopeElement, () => ({
    __proto__: dart.getMethods(framework$0._UncontrolledProviderScopeElement.__proto__),
    mount: dart.fnType(dart.void, [dart.legacy(framework$.Element), dart.dynamic]),
    update: dart.fnType(dart.void, [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(framework$0._UncontrolledProviderScopeElement, I[1]);
  var _builder = dart.privateName(consumer, "Consumer._builder");
  var _child = dart.privateName(consumer, "Consumer._child");
  var _builder$ = dart.privateName(consumer, "_builder");
  var _child$ = dart.privateName(consumer, "_child");
  consumer.ConsumerWidget = class ConsumerWidget extends framework$.StatefulWidget {
    createState() {
      return new consumer._ConsumerState.new();
    }
  };
  (consumer.ConsumerWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    consumer.ConsumerWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = consumer.ConsumerWidget.prototype;
  dart.addTypeTests(consumer.ConsumerWidget);
  dart.addTypeCaches(consumer.ConsumerWidget);
  dart.setMethodSignature(consumer.ConsumerWidget, () => ({
    __proto__: dart.getMethods(consumer.ConsumerWidget.__proto__),
    createState: dart.fnType(dart.legacy(consumer._ConsumerState), [])
  }));
  dart.setLibraryUri(consumer.ConsumerWidget, I[3]);
  consumer.Consumer = class Consumer extends consumer.ConsumerWidget {
    get [_builder$]() {
      return this[_builder];
    }
    set [_builder$](value) {
      super[_builder$] = value;
    }
    get [_child$]() {
      return this[_child];
    }
    set [_child$](value) {
      super[_child$] = value;
    }
    build(context, watch) {
      let t6, t5, t4;
      t4 = context;
      t5 = watch;
      t6 = this[_child$];
      return this[_builder$](t4, t5, t6);
    }
  };
  (consumer.Consumer.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[_child] = child;
    this[_builder] = builder;
    if (!(builder != null)) dart.assertFailed("the parameter builder cannot be null", I[2], 137, 16, "builder != null");
    consumer.Consumer.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = consumer.Consumer.prototype;
  dart.addTypeTests(consumer.Consumer);
  dart.addTypeCaches(consumer.Consumer);
  dart.setMethodSignature(consumer.Consumer, () => ({
    __proto__: dart.getMethods(consumer.Consumer.__proto__),
    build: dart.fnType(dart.legacy(framework$.Widget), [dart.legacy(framework$.BuildContext), dart.legacy(dart.gFnType(T => [dart.legacy(T), [dart.legacy(framework.ProviderBase$(dart.legacy(core.Object), dart.legacy(T)))]]))])
  }));
  dart.setLibraryUri(consumer.Consumer, I[3]);
  dart.setFieldSignature(consumer.Consumer, () => ({
    __proto__: dart.getFields(consumer.Consumer.__proto__),
    [_builder$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(framework$.Widget), [dart.legacy(framework$.BuildContext), dart.legacy(dart.gFnType(T => [dart.legacy(T), [dart.legacy(framework.ProviderBase$(dart.legacy(core.Object), dart.legacy(T)))]])), dart.legacy(framework$.Widget)]))),
    [_child$]: dart.finalFieldType(dart.legacy(framework$.Widget))
  }));
  var _container = dart.privateName(consumer, "_container");
  var _dependencies = dart.privateName(consumer, "_dependencies");
  var _oldDependencies = dart.privateName(consumer, "_oldDependencies");
  var _debugSelecting = dart.privateName(consumer, "_debugSelecting");
  var _buildCache = dart.privateName(consumer, "_buildCache");
  var _isExternalBuild = dart.privateName(consumer, "_isExternalBuild");
  var _reader = dart.privateName(consumer, "_reader");
  var _mayHaveChanged = dart.privateName(consumer, "_mayHaveChanged");
  consumer._ConsumerState = class _ConsumerState extends framework$.State$(dart.legacy(consumer.ConsumerWidget)) {
    didUpdateWidget(oldWidget) {
      T$.ConsumerWidgetL().as(oldWidget);
      super.didUpdateWidget(oldWidget);
      this[_isExternalBuild] = true;
    }
    reassemble() {
      super.reassemble();
      this[_isExternalBuild] = true;
    }
    didChangeDependencies() {
      super.didChangeDependencies();
      this[_isExternalBuild] = true;
      let newContainer = framework$0.ProviderScope.containerOf(this.context);
      if (!dart.equals(this[_container], newContainer)) {
        this[_container] = newContainer;
        for (let dependency of this[_dependencies][$values]) {
          dependency.close();
        }
        this[_dependencies][$clear]();
      }
    }
    build(context) {
      let didFlush = false;
      for (let dep of this[_dependencies][$values]) {
        if (dart.test(dep.flush())) {
          didFlush = true;
        }
      }
      let shouldRecompute = dart.test(this[_isExternalBuild]) || didFlush;
      this[_isExternalBuild] = false;
      if (!shouldRecompute) {
        return this[_buildCache];
      }
      if (!dart.test(dart.fn(() => {
        this[_debugSelecting] = true;
        return true;
      }, T$.VoidToboolL())())) dart.assertFailed("", I[2], 290, 12, "() {\n      _debugSelecting = true;\n      return true;\n    }()");
      try {
        this[_oldDependencies] = this[_dependencies];
        this[_dependencies] = new (T$.LinkedMapOfProviderBaseL$ProviderSubscriptionL()).new();
        return this[_buildCache] = this.widget.build(context, dart.bind(this, _reader));
      } finally {
        if (!dart.test(dart.fn(() => {
          this[_debugSelecting] = false;
          return true;
        }, T$.VoidToboolL())())) dart.assertFailed("", I[2], 299, 14, "() {\n        _debugSelecting = false;\n        return true;\n      }()");
        for (let dep of this[_oldDependencies][$values]) {
          dep.close();
        }
        this[_oldDependencies] = null;
      }
    }
    [_reader](Res, target) {
      if (!dart.test(this[_debugSelecting])) dart.assertFailed("Cannot use `read` outside of the body of the Consumer callback", I[2], 312, 7, "_debugSelecting");
      return dart.legacy(Res).as(this[_dependencies][$putIfAbsent](target, dart.fn(() => {
        let t4;
        let oldDependency = (t4 = this[_oldDependencies], t4 == null ? null : t4[$remove](target));
        if (oldDependency != null) {
          return oldDependency;
        }
        return this[_container].listen(dart.legacy(Res), target, {mayHaveChanged: dart.bind(this, _mayHaveChanged)});
      }, T$.VoidToProviderSubscriptionL())).read());
    }
    [_mayHaveChanged](sub) {
      T$.ElementL().as(this.context).markNeedsBuild();
    }
    dispose() {
      for (let dependency of this[_dependencies][$values]) {
        dependency.close();
      }
      super.dispose();
    }
  };
  (consumer._ConsumerState.new = function() {
    this[_container] = null;
    this[_dependencies] = new (T$.LinkedMapOfProviderBaseL$ProviderSubscriptionL()).new();
    this[_oldDependencies] = null;
    this[_debugSelecting] = null;
    this[_buildCache] = null;
    this[_isExternalBuild] = true;
    consumer._ConsumerState.__proto__.new.call(this);
    ;
  }).prototype = consumer._ConsumerState.prototype;
  dart.addTypeTests(consumer._ConsumerState);
  dart.addTypeCaches(consumer._ConsumerState);
  dart.setMethodSignature(consumer._ConsumerState, () => ({
    __proto__: dart.getMethods(consumer._ConsumerState.__proto__),
    didUpdateWidget: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    build: dart.fnType(dart.legacy(framework$.Widget), [dart.legacy(framework$.BuildContext)]),
    [_reader]: dart.gFnType(Res => [dart.legacy(Res), [dart.legacy(framework.ProviderBase$(dart.legacy(core.Object), dart.legacy(Res)))]]),
    [_mayHaveChanged]: dart.fnType(dart.void, [dart.legacy(framework.ProviderSubscription)])
  }));
  dart.setLibraryUri(consumer._ConsumerState, I[3]);
  dart.setFieldSignature(consumer._ConsumerState, () => ({
    __proto__: dart.getFields(consumer._ConsumerState.__proto__),
    [_container]: dart.fieldType(dart.legacy(framework.ProviderContainer)),
    [_dependencies]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(framework.ProviderBase), dart.legacy(framework.ProviderSubscription)))),
    [_oldDependencies]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(framework.ProviderBase), dart.legacy(framework.ProviderSubscription)))),
    [_debugSelecting]: dart.fieldType(dart.legacy(core.bool)),
    [_buildCache]: dart.fieldType(dart.legacy(framework$.Widget)),
    [_isExternalBuild]: dart.fieldType(dart.legacy(core.bool))
  }));
  builders.ChangeNotifierProviderBuilder = class ChangeNotifierProviderBuilder extends core.Object {
    call(T, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (change_notifier_provider.ChangeNotifierProvider$(dart.legacy(T))).new(create, {name: name});
    }
    get autoDispose() {
      return C[5] || CT.C5;
    }
    get family() {
      return C[6] || CT.C6;
    }
  };
  (builders.ChangeNotifierProviderBuilder.new = function() {
    ;
  }).prototype = builders.ChangeNotifierProviderBuilder.prototype;
  dart.addTypeTests(builders.ChangeNotifierProviderBuilder);
  dart.addTypeCaches(builders.ChangeNotifierProviderBuilder);
  dart.setMethodSignature(builders.ChangeNotifierProviderBuilder, () => ({
    __proto__: dart.getMethods(builders.ChangeNotifierProviderBuilder.__proto__),
    call: dart.gFnType(T => [dart.legacy(change_notifier_provider.ChangeNotifierProvider$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.ProviderReference)]))], {name: dart.legacy(core.String)}, {}], T => [dart.legacy(change_notifier.ChangeNotifier)])
  }));
  dart.setGetterSignature(builders.ChangeNotifierProviderBuilder, () => ({
    __proto__: dart.getGetters(builders.ChangeNotifierProviderBuilder.__proto__),
    autoDispose: dart.legacy(builders.AutoDisposeChangeNotifierProviderBuilder),
    family: dart.legacy(builders.ChangeNotifierProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.ChangeNotifierProviderBuilder, I[4]);
  builders.ChangeNotifierProviderFamilyBuilder = class ChangeNotifierProviderFamilyBuilder extends core.Object {
    call(T, Value, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (change_notifier_provider.ChangeNotifierProviderFamily$(dart.legacy(T), dart.legacy(Value))).new(create, {name: name});
    }
    get autoDispose() {
      return C[7] || CT.C7;
    }
  };
  (builders.ChangeNotifierProviderFamilyBuilder.new = function() {
    ;
  }).prototype = builders.ChangeNotifierProviderFamilyBuilder.prototype;
  dart.addTypeTests(builders.ChangeNotifierProviderFamilyBuilder);
  dart.addTypeCaches(builders.ChangeNotifierProviderFamilyBuilder);
  dart.setMethodSignature(builders.ChangeNotifierProviderFamilyBuilder, () => ({
    __proto__: dart.getMethods(builders.ChangeNotifierProviderFamilyBuilder.__proto__),
    call: dart.gFnType((T, Value) => [dart.legacy(change_notifier_provider.ChangeNotifierProviderFamily$(dart.legacy(T), dart.legacy(Value))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.ProviderReference), dart.legacy(Value)]))], {name: dart.legacy(core.String)}, {}], (T, Value) => [dart.legacy(change_notifier.ChangeNotifier), dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(builders.ChangeNotifierProviderFamilyBuilder, () => ({
    __proto__: dart.getGetters(builders.ChangeNotifierProviderFamilyBuilder.__proto__),
    autoDispose: dart.legacy(builders.AutoDisposeChangeNotifierProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.ChangeNotifierProviderFamilyBuilder, I[4]);
  builders.AutoDisposeChangeNotifierProviderBuilder = class AutoDisposeChangeNotifierProviderBuilder extends core.Object {
    call(T, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (change_notifier_provider.AutoDisposeChangeNotifierProvider$(dart.legacy(T))).new(create, {name: name});
    }
    get family() {
      return C[7] || CT.C7;
    }
  };
  (builders.AutoDisposeChangeNotifierProviderBuilder.new = function() {
    ;
  }).prototype = builders.AutoDisposeChangeNotifierProviderBuilder.prototype;
  dart.addTypeTests(builders.AutoDisposeChangeNotifierProviderBuilder);
  dart.addTypeCaches(builders.AutoDisposeChangeNotifierProviderBuilder);
  dart.setMethodSignature(builders.AutoDisposeChangeNotifierProviderBuilder, () => ({
    __proto__: dart.getMethods(builders.AutoDisposeChangeNotifierProviderBuilder.__proto__),
    call: dart.gFnType(T => [dart.legacy(change_notifier_provider.AutoDisposeChangeNotifierProvider$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.AutoDisposeProviderReference)]))], {name: dart.legacy(core.String)}, {}], T => [dart.legacy(change_notifier.ChangeNotifier)])
  }));
  dart.setGetterSignature(builders.AutoDisposeChangeNotifierProviderBuilder, () => ({
    __proto__: dart.getGetters(builders.AutoDisposeChangeNotifierProviderBuilder.__proto__),
    family: dart.legacy(builders.AutoDisposeChangeNotifierProviderFamilyBuilder)
  }));
  dart.setLibraryUri(builders.AutoDisposeChangeNotifierProviderBuilder, I[4]);
  builders.AutoDisposeChangeNotifierProviderFamilyBuilder = class AutoDisposeChangeNotifierProviderFamilyBuilder extends core.Object {
    call(T, Value, create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      return new (change_notifier_provider.AutoDisposeChangeNotifierProviderFamily$(dart.legacy(T), dart.legacy(Value))).new(create, {name: name});
    }
  };
  (builders.AutoDisposeChangeNotifierProviderFamilyBuilder.new = function() {
    ;
  }).prototype = builders.AutoDisposeChangeNotifierProviderFamilyBuilder.prototype;
  dart.addTypeTests(builders.AutoDisposeChangeNotifierProviderFamilyBuilder);
  dart.addTypeCaches(builders.AutoDisposeChangeNotifierProviderFamilyBuilder);
  dart.setMethodSignature(builders.AutoDisposeChangeNotifierProviderFamilyBuilder, () => ({
    __proto__: dart.getMethods(builders.AutoDisposeChangeNotifierProviderFamilyBuilder.__proto__),
    call: dart.gFnType((T, Value) => [dart.legacy(change_notifier_provider.AutoDisposeChangeNotifierProviderFamily$(dart.legacy(T), dart.legacy(Value))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(framework.AutoDisposeProviderReference), dart.legacy(Value)]))], {name: dart.legacy(core.String)}, {}], (T, Value) => [dart.legacy(change_notifier.ChangeNotifier), dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(builders.AutoDisposeChangeNotifierProviderFamilyBuilder, I[4]);
  var _listener = dart.privateName(change_notifier_provider, "_listener");
  const _is__ChangeNotifierProviderStateMixin_default = Symbol('_is__ChangeNotifierProviderStateMixin_default');
  change_notifier_provider._ChangeNotifierProviderStateMixin$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class _ChangeNotifierProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(T), dart.legacy(T)) {}
    _ChangeNotifierProviderStateMixin[dart.mixinOn] = ProviderStateBase => class _ChangeNotifierProviderStateMixin extends ProviderStateBase {
      valueChanged(opts) {
        let t4, t4$, t4$0;
        let previous = opts && 'previous' in opts ? opts.previous : null;
        TL().as(previous);
        if (dart.equals(this.createdValue, previous)) {
          return;
        }
        t4 = previous;
        t4 == null ? null : t4.removeListener(dart.bind(this, _listener));
        t4$ = previous;
        t4$ == null ? null : t4$.dispose();
        this.exposedValue = this.createdValue;
        t4$0 = this.createdValue;
        t4$0 == null ? null : t4$0.addListener(dart.bind(this, _listener));
      }
      [_listener]() {
        this.exposedValue = this.createdValue;
      }
      dispose() {
        let t4, t4$;
        t4 = this.createdValue;
        t4 == null ? null : t4.removeListener(dart.bind(this, _listener));
        t4$ = this.createdValue;
        t4$ == null ? null : t4$.dispose();
        super.dispose();
      }
    };
    dart.addTypeTests(_ChangeNotifierProviderStateMixin);
    _ChangeNotifierProviderStateMixin.prototype[_is__ChangeNotifierProviderStateMixin_default] = true;
    dart.addTypeCaches(_ChangeNotifierProviderStateMixin);
    _ChangeNotifierProviderStateMixin[dart.implements] = () => [framework.ProviderStateBase$(dart.legacy(T), dart.legacy(T))];
    dart.setMethodSignature(_ChangeNotifierProviderStateMixin, () => ({
      __proto__: dart.getMethods(_ChangeNotifierProviderStateMixin.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {}),
      [_listener]: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_ChangeNotifierProviderStateMixin, I[5]);
    return _ChangeNotifierProviderStateMixin;
  });
  change_notifier_provider._ChangeNotifierProviderStateMixin = change_notifier_provider._ChangeNotifierProviderStateMixin$();
  dart.addTypeTests(change_notifier_provider._ChangeNotifierProviderStateMixin, _is__ChangeNotifierProviderStateMixin_default);
  const _is_ChangeNotifierProvider_default = Symbol('_is_ChangeNotifierProvider_default');
  change_notifier_provider.ChangeNotifierProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _ChangeNotifierProviderStateOfTL = () => (_ChangeNotifierProviderStateOfTL = dart.constFn(change_notifier_provider._ChangeNotifierProviderState$(TL())))();
    class ChangeNotifierProvider extends framework.AlwaysAliveProviderBase$(dart.legacy(T), dart.legacy(T)) {
      createState() {
        return new (_ChangeNotifierProviderStateOfTL()).new();
      }
    }
    (ChangeNotifierProvider.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      ChangeNotifierProvider.__proto__.new.call(this, create, name);
      ;
    }).prototype = ChangeNotifierProvider.prototype;
    dart.addTypeTests(ChangeNotifierProvider);
    ChangeNotifierProvider.prototype[_is_ChangeNotifierProvider_default] = true;
    dart.addTypeCaches(ChangeNotifierProvider);
    dart.setMethodSignature(ChangeNotifierProvider, () => ({
      __proto__: dart.getMethods(ChangeNotifierProvider.__proto__),
      createState: dart.fnType(dart.legacy(change_notifier_provider._ChangeNotifierProviderState$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(ChangeNotifierProvider, I[5]);
    return ChangeNotifierProvider;
  });
  change_notifier_provider.ChangeNotifierProvider = change_notifier_provider.ChangeNotifierProvider$();
  dart.defineLazy(change_notifier_provider.ChangeNotifierProvider, {
    /*change_notifier_provider.ChangeNotifierProvider.family*/get family() {
      return C[6] || CT.C6;
    },
    /*change_notifier_provider.ChangeNotifierProvider.autoDispose*/get autoDispose() {
      return C[5] || CT.C5;
    }
  }, true);
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProvider, _is_ChangeNotifierProvider_default);
  const _is__ChangeNotifierProviderState_default = Symbol('_is__ChangeNotifierProviderState_default');
  change_notifier_provider._ChangeNotifierProviderState$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    const ProviderStateBase__ChangeNotifierProviderStateMixin$36 = class ProviderStateBase__ChangeNotifierProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(T), dart.legacy(T)) {};
    (ProviderStateBase__ChangeNotifierProviderStateMixin$36.new = function() {
      ProviderStateBase__ChangeNotifierProviderStateMixin$36.__proto__.new.call(this);
    }).prototype = ProviderStateBase__ChangeNotifierProviderStateMixin$36.prototype;
    dart.applyMixin(ProviderStateBase__ChangeNotifierProviderStateMixin$36, change_notifier_provider._ChangeNotifierProviderStateMixin$(dart.legacy(T)));
    class _ChangeNotifierProviderState extends ProviderStateBase__ChangeNotifierProviderStateMixin$36 {
      valueChanged(opts) {
        let previous = opts && 'previous' in opts ? opts.previous : null;
        TL().as(previous);
        return super.valueChanged({previous: previous});
      }
      [_listener]() {
        return super[_listener]();
      }
      dispose() {
        return super.dispose();
      }
    }
    (_ChangeNotifierProviderState.new = function() {
      _ChangeNotifierProviderState.__proto__.new.call(this);
      ;
    }).prototype = _ChangeNotifierProviderState.prototype;
    dart.addTypeTests(_ChangeNotifierProviderState);
    _ChangeNotifierProviderState.prototype[_is__ChangeNotifierProviderState_default] = true;
    dart.addTypeCaches(_ChangeNotifierProviderState);
    dart.setMethodSignature(_ChangeNotifierProviderState, () => ({
      __proto__: dart.getMethods(_ChangeNotifierProviderState.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {}),
      [_listener]: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_ChangeNotifierProviderState, I[5]);
    return _ChangeNotifierProviderState;
  });
  change_notifier_provider._ChangeNotifierProviderState = change_notifier_provider._ChangeNotifierProviderState$();
  dart.addTypeTests(change_notifier_provider._ChangeNotifierProviderState, _is__ChangeNotifierProviderState_default);
  const _is_ChangeNotifierProviderFamily_default = Symbol('_is_ChangeNotifierProviderFamily_default');
  change_notifier_provider.ChangeNotifierProviderFamily$ = dart.generic((T, A) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ProviderReferenceLAndALToTL = () => (ProviderReferenceLAndALToTL = dart.constFn(dart.fnType(TL(), [T$.ProviderReferenceL(), AL()])))();
    var ProviderReferenceLAndALToLTL = () => (ProviderReferenceLAndALToLTL = dart.constFn(dart.legacy(ProviderReferenceLAndALToTL())))();
    var ChangeNotifierProviderOfTL = () => (ChangeNotifierProviderOfTL = dart.constFn(change_notifier_provider.ChangeNotifierProvider$(TL())))();
    var ProviderReferenceLToTL = () => (ProviderReferenceLToTL = dart.constFn(dart.fnType(TL(), [T$.ProviderReferenceL()])))();
    var AL = () => (AL = dart.constFn(dart.legacy(A)))();
    class ChangeNotifierProviderFamily extends framework.Family$(dart.legacy(T), dart.legacy(T), dart.legacy(A), dart.legacy(framework.ProviderReference), dart.legacy(change_notifier_provider.ChangeNotifierProvider$(dart.legacy(T)))) {
      create(value, builder, name) {
        AL().as(value);
        ProviderReferenceLAndALToLTL().as(builder);
        return new (ChangeNotifierProviderOfTL()).new(dart.fn(ref => builder(ref, value), ProviderReferenceLToTL()), {name: name});
      }
    }
    (ChangeNotifierProviderFamily.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      ChangeNotifierProviderFamily.__proto__.new.call(this, create, name);
      ;
    }).prototype = ChangeNotifierProviderFamily.prototype;
    dart.addTypeTests(ChangeNotifierProviderFamily);
    ChangeNotifierProviderFamily.prototype[_is_ChangeNotifierProviderFamily_default] = true;
    dart.addTypeCaches(ChangeNotifierProviderFamily);
    dart.setMethodSignature(ChangeNotifierProviderFamily, () => ({
      __proto__: dart.getMethods(ChangeNotifierProviderFamily.__proto__),
      create: dart.fnType(dart.legacy(change_notifier_provider.ChangeNotifierProvider$(dart.legacy(T))), [dart.legacy(core.Object), dart.legacy(core.Object), dart.legacy(core.String)])
    }));
    dart.setLibraryUri(ChangeNotifierProviderFamily, I[5]);
    return ChangeNotifierProviderFamily;
  });
  change_notifier_provider.ChangeNotifierProviderFamily = change_notifier_provider.ChangeNotifierProviderFamily$();
  dart.addTypeTests(change_notifier_provider.ChangeNotifierProviderFamily, _is_ChangeNotifierProviderFamily_default);
  const _is_AutoDisposeChangeNotifierProvider_default = Symbol('_is_AutoDisposeChangeNotifierProvider_default');
  change_notifier_provider.AutoDisposeChangeNotifierProvider$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _AutoDisposeChangeNotifierProviderStateOfTL = () => (_AutoDisposeChangeNotifierProviderStateOfTL = dart.constFn(change_notifier_provider._AutoDisposeChangeNotifierProviderState$(TL())))();
    class AutoDisposeChangeNotifierProvider extends framework.AutoDisposeProviderBase$(dart.legacy(T), dart.legacy(T)) {
      createState() {
        return new (_AutoDisposeChangeNotifierProviderStateOfTL()).new();
      }
    }
    (AutoDisposeChangeNotifierProvider.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      AutoDisposeChangeNotifierProvider.__proto__.new.call(this, create, name);
      ;
    }).prototype = AutoDisposeChangeNotifierProvider.prototype;
    dart.addTypeTests(AutoDisposeChangeNotifierProvider);
    AutoDisposeChangeNotifierProvider.prototype[_is_AutoDisposeChangeNotifierProvider_default] = true;
    dart.addTypeCaches(AutoDisposeChangeNotifierProvider);
    dart.setMethodSignature(AutoDisposeChangeNotifierProvider, () => ({
      __proto__: dart.getMethods(AutoDisposeChangeNotifierProvider.__proto__),
      createState: dart.fnType(dart.legacy(change_notifier_provider._AutoDisposeChangeNotifierProviderState$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(AutoDisposeChangeNotifierProvider, I[5]);
    return AutoDisposeChangeNotifierProvider;
  });
  change_notifier_provider.AutoDisposeChangeNotifierProvider = change_notifier_provider.AutoDisposeChangeNotifierProvider$();
  dart.defineLazy(change_notifier_provider.AutoDisposeChangeNotifierProvider, {
    /*change_notifier_provider.AutoDisposeChangeNotifierProvider.family*/get family() {
      return C[6] || CT.C6;
    }
  }, true);
  dart.addTypeTests(change_notifier_provider.AutoDisposeChangeNotifierProvider, _is_AutoDisposeChangeNotifierProvider_default);
  const _is__AutoDisposeChangeNotifierProviderState_default = Symbol('_is__AutoDisposeChangeNotifierProviderState_default');
  change_notifier_provider._AutoDisposeChangeNotifierProviderState$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    const ProviderStateBase__ChangeNotifierProviderStateMixin$36 = class ProviderStateBase__ChangeNotifierProviderStateMixin extends framework.ProviderStateBase$(dart.legacy(T), dart.legacy(T)) {};
    (ProviderStateBase__ChangeNotifierProviderStateMixin$36.new = function() {
      ProviderStateBase__ChangeNotifierProviderStateMixin$36.__proto__.new.call(this);
    }).prototype = ProviderStateBase__ChangeNotifierProviderStateMixin$36.prototype;
    dart.applyMixin(ProviderStateBase__ChangeNotifierProviderStateMixin$36, change_notifier_provider._ChangeNotifierProviderStateMixin$(dart.legacy(T)));
    class _AutoDisposeChangeNotifierProviderState extends ProviderStateBase__ChangeNotifierProviderStateMixin$36 {
      valueChanged(opts) {
        let previous = opts && 'previous' in opts ? opts.previous : null;
        TL().as(previous);
        return super.valueChanged({previous: previous});
      }
      [_listener]() {
        return super[_listener]();
      }
      dispose() {
        return super.dispose();
      }
    }
    (_AutoDisposeChangeNotifierProviderState.new = function() {
      _AutoDisposeChangeNotifierProviderState.__proto__.new.call(this);
      ;
    }).prototype = _AutoDisposeChangeNotifierProviderState.prototype;
    dart.addTypeTests(_AutoDisposeChangeNotifierProviderState);
    _AutoDisposeChangeNotifierProviderState.prototype[_is__AutoDisposeChangeNotifierProviderState_default] = true;
    dart.addTypeCaches(_AutoDisposeChangeNotifierProviderState);
    dart.setMethodSignature(_AutoDisposeChangeNotifierProviderState, () => ({
      __proto__: dart.getMethods(_AutoDisposeChangeNotifierProviderState.__proto__),
      valueChanged: dart.fnType(dart.void, [], {previous: dart.legacy(core.Object)}, {}),
      [_listener]: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_AutoDisposeChangeNotifierProviderState, I[5]);
    return _AutoDisposeChangeNotifierProviderState;
  });
  change_notifier_provider._AutoDisposeChangeNotifierProviderState = change_notifier_provider._AutoDisposeChangeNotifierProviderState$();
  dart.addTypeTests(change_notifier_provider._AutoDisposeChangeNotifierProviderState, _is__AutoDisposeChangeNotifierProviderState_default);
  const _is_AutoDisposeChangeNotifierProviderFamily_default = Symbol('_is_AutoDisposeChangeNotifierProviderFamily_default');
  change_notifier_provider.AutoDisposeChangeNotifierProviderFamily$ = dart.generic((T, A) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var AutoDisposeProviderReferenceLAndALToTL = () => (AutoDisposeProviderReferenceLAndALToTL = dart.constFn(dart.fnType(TL(), [T$.AutoDisposeProviderReferenceL(), AL()])))();
    var AutoDisposeProviderReferenceLAndALToLTL = () => (AutoDisposeProviderReferenceLAndALToLTL = dart.constFn(dart.legacy(AutoDisposeProviderReferenceLAndALToTL())))();
    var AutoDisposeChangeNotifierProviderOfTL = () => (AutoDisposeChangeNotifierProviderOfTL = dart.constFn(change_notifier_provider.AutoDisposeChangeNotifierProvider$(TL())))();
    var AutoDisposeProviderReferenceLToTL = () => (AutoDisposeProviderReferenceLToTL = dart.constFn(dart.fnType(TL(), [T$.AutoDisposeProviderReferenceL()])))();
    var AL = () => (AL = dart.constFn(dart.legacy(A)))();
    class AutoDisposeChangeNotifierProviderFamily extends framework.Family$(dart.legacy(T), dart.legacy(T), dart.legacy(A), dart.legacy(framework.AutoDisposeProviderReference), dart.legacy(change_notifier_provider.AutoDisposeChangeNotifierProvider$(dart.legacy(T)))) {
      create(value, builder, name) {
        AL().as(value);
        AutoDisposeProviderReferenceLAndALToLTL().as(builder);
        return new (AutoDisposeChangeNotifierProviderOfTL()).new(dart.fn(ref => builder(ref, value), AutoDisposeProviderReferenceLToTL()), {name: name});
      }
    }
    (AutoDisposeChangeNotifierProviderFamily.new = function(create, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      AutoDisposeChangeNotifierProviderFamily.__proto__.new.call(this, create, name);
      ;
    }).prototype = AutoDisposeChangeNotifierProviderFamily.prototype;
    dart.addTypeTests(AutoDisposeChangeNotifierProviderFamily);
    AutoDisposeChangeNotifierProviderFamily.prototype[_is_AutoDisposeChangeNotifierProviderFamily_default] = true;
    dart.addTypeCaches(AutoDisposeChangeNotifierProviderFamily);
    dart.setMethodSignature(AutoDisposeChangeNotifierProviderFamily, () => ({
      __proto__: dart.getMethods(AutoDisposeChangeNotifierProviderFamily.__proto__),
      create: dart.fnType(dart.legacy(change_notifier_provider.AutoDisposeChangeNotifierProvider$(dart.legacy(T))), [dart.legacy(core.Object), dart.legacy(core.Object), dart.legacy(core.String)])
    }));
    dart.setLibraryUri(AutoDisposeChangeNotifierProviderFamily, I[5]);
    return AutoDisposeChangeNotifierProviderFamily;
  });
  change_notifier_provider.AutoDisposeChangeNotifierProviderFamily = change_notifier_provider.AutoDisposeChangeNotifierProviderFamily$();
  dart.addTypeTests(change_notifier_provider.AutoDisposeChangeNotifierProviderFamily, _is_AutoDisposeChangeNotifierProviderFamily_default);
  dart.trackLibraries("packages/flutter_riverpod/src/provider.dart", {
    "package:flutter_riverpod/src/provider.dart": provider$,
    "package:flutter_riverpod/src/framework.dart": framework$0,
    "package:flutter_riverpod/src/consumer.dart": consumer,
    "package:flutter_riverpod/src/internals.dart": internals,
    "package:flutter_riverpod/src/builders.dart": builders,
    "package:flutter_riverpod/src/change_notifier_provider.dart": change_notifier_provider
  }, {
    "package:flutter_riverpod/src/change_notifier_provider.dart": ["change_notifier_provider/base.dart", "change_notifier_provider/auto_dispose.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["provider.dart","framework.dart","consumer.dart","builders.dart","change_notifier_provider.dart","change_notifier_provider/base.dart","change_notifier_provider/auto_dispose.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../V:/packages/flutter_riverpod/src/provider.dart.lib.js"}');
  // Exports:
  return {
    src__provider: provider$,
    src__framework: framework$0,
    src__consumer: consumer,
    src__internals: internals,
    src__builders: builders,
    src__change_notifier_provider: change_notifier_provider
  };
}));

//# sourceMappingURL=provider.dart.lib.js.map
